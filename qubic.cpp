#include <intrin.h>



////////// Private Settings \\\\\\\\\\

#define NUMBER_OF_COMPUTING_PROCESSORS 0
#define NUMBER_OF_MINING_PROCESSORS 0

// Do NOT share the data of "Private Settings" section with anyone!!!
static unsigned char ownSeed[55 + 1] = "<seed>";

static const unsigned char ownAddress[4] = { 0, 0, 0, 0 };
static const unsigned char ownMask[4] = { 255, 255, 255, 255 };
static const unsigned char defaultRouteAddress[4] = { 0, 0, 0, 0 };
static const unsigned char defaultRouteMask[4] = { 0, 0, 0, 0 };
static const unsigned char defaultRouteGateway[4] = { 0, 0, 0, 0 };
static const unsigned char ownPublicAddress[4] = { 0, 0, 0, 0 };

#define OPERATOR "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
#define COMPUTOR "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
#define MINING_DATA_FILE_NAME L"mining.data"
#define SOLUTION_DATA_FILE_NAME L"solution.data"



////////// Public Settings \\\\\\\\\\

#define ADMIN "LGBPOLGKLJIKFJCEEDBLIBCCANAHFAFLGEFPEABCHFNAKMKOOBBKGHNDFFKINEGLBBMMIH"

static const unsigned char knownPublicPeers[][4] = {
};

static const unsigned char whitelistedPeers[][4] = {
};

//static const unsigned int blacklistedPeers[][2] = { {16777472, 16778239}, { 16779264, 16781311 }, { 16785408, 16793599 }, { 16842752, 16843007 }, { 16843264, 16859135 }, { 16908288, 16909055 }, { 16909312, 16941055 }, { 16973824, 17039359 }, { 17039616, 17072127 }, { 17301504, 17367039 }, { 17432576, 17435135 }, { 17435392, 17465343 }, { 17563648, 17825791 }, { 18350080, 18874367 }, { 19726336, 19791871 }, { 19922944, 20185087 }, { 20447232, 20971519 }, { 21233664, 21495807 }, { 22020096, 22764287 }, { 22764289, 23068671 }, { 24379392, 24641535 }, { 28573696, 28966911 }, { 29097984, 29884415 }, { 30015488, 30408703 }, { 34608384, 34608639 }, { 34629376, 34629631 }, { 34642432, 34642687 }, { 34643712, 34644479 }, { 34646016, 34646271 }, { 34671616, 34672127 }, { 34851840, 34852863 }, { 34929920, 34930687 }, { 35056896, 35057151 }, { 35104512, 35104767 }, { 37230592, 37231615 }, { 37246976, 37247743 }, { 37253120, 37254143 }, { 37259776, 37260031 }, { 37270528, 37271551 }, { 37282816, 37283839 }, { 37285888, 37286911 }, { 37299456, 37299967 }, { 37303296, 37304319 }, { 37310464, 37311487 }, { 37337088, 37338111 }, { 37372928, 37373951 }, { 37380096, 37381119 }, { 37431296, 37432319 }, { 37433344, 37434367 }, { 37440512, 37442559 }, { 37462016, 37463039 }, { 37466112, 37467135 }, { 37475584, 37477375 }, { 37482496, 37483519 }, { 37486592, 37748735 }, { 39583744, 39845887 }, { 83962112, 83962367 }, { 83963392, 83965951 }, { 84025344, 84033535 }, { 84082688, 84148223 }, { 84410368, 84414975 }, { 84415488, 84416511 }, { 84417536, 84418559 }, { 84419584, 84420607 }, { 84421120, 84421631 }, { 84422656, 84426495 }, { 84426752, 84427263 }, { 84428800, 84433919 }, { 84451328, 84457471 }, { 84459520, 84471807 }, { 84622336, 84627455 }, { 84934656, 85196799 }, { 85367040, 85367295 }, { 85367552, 85367807 }, { 85405696, 85407743 }, { 85417984, 85422079 }, { 85725184, 85729279 }, { 86020096, 86022143 }, { 86179840, 86220799 }, { 86482944, 86484991 }, { 86638592, 86671359 }, { 86736896, 86745087 }, { 86765568, 86767615 }, { 86769664, 86773759 }, { 86779904, 86780927 }, { 86781952, 86786047 }, { 86812672, 86814719 }, { 86855680, 86856703 }, { 86884352, 86886399 }, { 86886656, 86887167 }, { 86887424, 86888447 }, { 86888704, 86889727 }, { 86889984, 86890303 }, { 86890496, 86891775 }, { 86892032, 86892287 }, { 86892544, 86892799 }, { 86893056, 86895199 }, { 86895232, 86898559 }, { 86898688, 86899199 }, { 86899712, 86900735 }, { 87363584, 87367679 }, { 87390208, 87392255 }, { 87590912, 87592959 }, { 87675136, 87676159 }, { 87676928, 87678975 }, { 87681024, 87683071 }, { 87752704, 87754751 }, { 87755776, 87756799 }, { 87758848, 87761407 }, { 87761664, 87761919 }, { 87763968, 87766527 }, { 87766784, 87768063 }, { 87777792, 87779327 }, { 87783424, 87793663 }, { 87797760, 87798783 }, { 87799808, 87800319 }, { 87804928, 87805951 }, { 87808000, 87818239 }, { 87885824, 87889919 }, { 87943168, 87945215 }, { 87953920, 87954431 }, { 87958280, 87958527 }, { 88047616, 88049663 }, { 88053760, 88055807 }, { 88932352, 88940543 }, { 89096192, 89128959 }, { 89370112, 89370623 }, { 90456064, 90472447 }, { 90502144, 90503167 }, { 90505216, 90516479 }, { 90517504, 90518527 }, { 90520576, 90528767 }, { 90537984, 90540031 }, { 90544128, 90546175 }, { 90554368, 90560511 }, { 90561024, 90561279 }, { 90562560, 90570751 }, { 90609664, 90611711 }, { 90710016, 90710271 }, { 90710528, 90710783 }, { 90711552, 90712319 }, { 90712576, 90712831 }, { 90713344, 90713599 }, { 90713920, 90714111 }, { 90720256, 90720767 }, { 90753024, 90755071 }, { 92274688, 92536831 }, { 92572416, 92572927 }, { 92621824, 92622847 }, { 92623872, 92624127 }, { 92630016, 92630527 }, { 92630784, 92631039 }, { 92633088, 92633599 }, { 92723200, 92725247 }, { 92798976, 93323263 }, { 93339648, 93343743 }, { 93347840, 93356031 }, { 93429760, 93431807 }, { 93437952, 93454335 }, { 93687808, 93691903 }, { 93702144, 93708287 }, { 93955072, 93956095 }, { 94183424, 94183935 }, { 94184192, 94184447 }, { 94265344, 94273535 }, { 94300160, 94302207 }, { 94330880, 94337023 }, { 94633984, 94896127 }, { 95158272, 95166463 }, { 95203840, 95204351 }, { 95207784, 95207935 }, { 95377408, 95387647 }, { 95557632, 95559679 }, { 95571968, 95574015 }, { 95686912, 95687679 }, { 95706112, 95708159 }, { 95708416, 95709183 }, { 95718144, 95718399 }, { 95726592, 95727615 }, { 95744000, 95745023 }, { 95754240, 95754495 }, { 95754752, 95755007 }, { 95763456, 95764479 }, { 95775744, 95776767 }, { 95801344, 95802367 }, { 95806208, 95806463 }, { 95812608, 95813631 }, { 95814656, 95815679 }, { 95819776, 95820287 }, { 95820544, 95820799 }, { 95822848, 95823615 }, { 95826944, 95827967 }, { 95830016, 95831039 }, { 95835136, 95836159 }, { 95837184, 95838207 }, { 95843328, 95843839 }, { 95870976, 95871999 }, { 95886336, 95887359 }, { 95895552, 95897599 }, { 95912192, 95912959 }, { 95916032, 95917055 }, { 95918080, 95920127 }, { 95925248, 95926271 }, { 95927296, 95928319 }, { 95938560, 95939583 }, { 95944192, 95944447 }, { 96151552, 96153599 }, { 96157696, 96165887 }, { 96207360, 96207871 }, { 96208896, 96209663 }, { 96214016, 96215039 }, { 96215808, 96216063 }, { 96216320, 96219647 }, { 96220160, 96223231 }, { 96224256, 96224767 }, { 96225280, 96228863 }, { 96229376, 96230399 }, { 96231424, 96234495 }, { 96235520, 96237567 }, { 96237824, 96238079 }, { 96239616, 96240639 }, { 96241664, 96244735 }, { 96244992, 96245503 }, { 96246784, 96249855 }, { 96250368, 96250879 }, { 96253952, 96254975 }, { 96256000, 96256511 }, { 96257024, 96258047 }, { 96259072, 96259583 }, { 96259840, 96261375 }, { 96262656, 96264447 }, { 96265472, 96265727 }, { 96266496, 96267775 }, { 96272384, 96305151 }, { 96321536, 96323583 }, { 96323840, 96324095 }, { 96324864, 96325119 }, { 96325632, 96327679 }, { 96329472, 96336895 }, { 96972704, 96972799 }, { 96976896, 96985087 }, { 97001472, 97009663 }, { 97386496, 97419263 }, { 98736128, 98738175 }, { 98743552, 98743807 }, { 98762752, 98893823 }, { 100253696, 100261887 }, { 100313088, 100315135 }, { 100329472, 100331519 }, { 100408064, 100409343 }, { 100417536, 100418559 }, { 100430848, 100431103 }, { 100431616, 100431871 }, { 100440320, 100441087 }, { 100445184, 100446463 }, { 100446976, 100447231 }, { 100450304, 100451327 }, { 100482048, 100482815 }, { 100492288, 100493311 }, { 100503552, 100504575 }, { 100508672, 100509695 }, { 100577280, 100579327 }, { 100589568, 100597759 }, { 100646912, 100648863 }, { 100648960, 100649983 }, { 100650240, 100650975 }, { 100651008, 100653055 }, { 100653312, 100653935 }, { 100654016, 100659711 }, { 100659968, 100660223 }, { 100660736, 100661759 }, { 100662272, 100662783 }, { 100663040, 100663295 }, { 135559680, 135559935 }, { 135596544, 135596799 }, { 135622144, 135622399 }, { 136004375, 136004607 }, { 136483328, 136483583 }, { 136497152, 136497407 }, { 136846080, 136846335 }, { 136914176, 136914431 }, { 142606336, 143077375 }, { 143077632, 146800639 }, { 147914752, 147922943 }, { 147947520, 147963903 }, { 225169408, 225169663 }, { 225170688, 225170943 }, { 225173504, 225173759 }, { 225174016, 225174271 }, { 225179136, 225179391 }, { 225180928, 225181183 }, { 234881024, 234883071 }, { 234884096, 234885119 }, { 234946560, 234947583 }, { 234952704, 234953727 }, { 234971136, 234971903 }, { 234974208, 234975231 }, { 235929600, 236978175 }, { 241598464, 241599487 }, { 241605632, 241605887 }, { 241606400, 241606655 }, { 241611776, 241612799 }, { 241631232, 243269631 }, { 243400704, 243531775 }, { 243662848, 243793919 }, { 244318208, 245366783 }, { 247479296, 247480319 }, { 247483392, 247484415 }, { 247726080, 247857151 }, { 248250368, 248381439 }, { 248512512, 249561087 }, { 266742016, 266742271 }, { 266744064, 266744319 }, { 266767616, 266767871 }, { 289779712, 289783807 }, { 290521600, 290521855 }, { 290522880, 290523391 }, { 290524928, 290527743 }, { 290528256, 290531071 }, { 290531584, 290536191 }, { 290538240, 290538495 }, { 290540544, 290541055 }, { 290554112, 290554367 }, { 290554624, 290554879 }, { 290555136, 290555391 }, { 290555648, 290555903 }, { 290556160, 290556671 }, { 290557184, 290557439 }, { 290557696, 290558207 }, { 290558464, 290560767 }, { 290561024, 290562047 }, { 290564864, 290565119 }, { 290793032, 290793033 }, { 290832384, 290836479 }, { 290914304, 290926591 }, { 290927104, 290927359 }, { 290927616, 290927871 }, { 290928128, 290928383 }, { 290928640, 290930687 }, { 290932736, 290936831 }, { 290938880, 290945023 }, { 290949120, 290950399 }, { 290951168, 290955263 }, { 290975744, 290976447 }, { 290976512, 290976703 }, { 290979840, 290996223 }, { 291000320, 291006463 }, { 291006976, 291007999 }, { 291008512, 291010559 }, { 291012608, 291032831 }, { 291309568, 291311615 }, { 291313664, 291315711 }, { 291319808, 291327999 }, { 291332096, 291340287 }, { 291342336, 291344383 }, { 291346432, 291348479 }, { 291354624, 291356671 }, { 291358720, 291364863 }, { 291366912, 291368959 }, { 291373824, 291373825 }, { 291377152, 291418111 }, { 291420160, 291432447 }, { 291434496, 291436543 }, { 293062656, 293063167 }, { 293568512, 293569023 }, { 300654592, 300658687 }, { 388139520, 388140031 }, { 388196352, 388197119 }, { 388206592, 388207103 }, { 388893696, 388894207 }, { 389319168, 389319679 }, { 389351168, 389351423 }, { 389572864, 389573119 }, { 390141440, 390141695 }, { 390796288, 390796543 }, { 391806976, 391811071 }, { 391840320, 391840511 }, { 391840856, 391841031 }, { 391841888, 391842047 }, { 391842376, 391842559 }, { 391845792, 391845887 }, { 391846144, 391846399 }, { 392111520, 392111615 }, { 392814592, 392822783 }, { 393081856, 393082367 }, { 393158656, 393166847 }, { 393175040, 393183231 }, { 393199616, 393207807 }, { 396685312, 396685567 }, { 397080576, 397080831 }, { 398781440, 398781695 }, { 398940160, 398941183 }, { 399280128, 399280639 }, { 399688192, 399688703 }, { 400111104, 400111615 }, { 400130560, 400131071 }, { 400261120, 400261887 }, { 400263168, 400263679 }, { 400890416, 400890607 }, { 400891680, 400891807 }, { 400895744, 400895999 }, { 400898624, 400898783 }, { 400901104, 400901119 }, { 400903952, 400904191 }, { 401230920, 401231103 }, { 401240320, 401240575 }, { 401389888, 401390079 }, { 401394480, 401394687 }, { 401399200, 401399295 }, { 401400864, 401401071 }, { 401402000, 401402111 }, { 401403776, 401403903 }, { 402260128, 402260143 }, { 402260576, 402260655 }, { 402266144, 402266367 }, { 402266704, 402266879 }, { 402270032, 402270047 }, { 402272896, 402273023 }, { 402281104, 402281215 }, { 402281872, 402281919 }, { 402286080, 402286319 }, { 402287216, 402287311 }, { 402287632, 402287871 }, { 402288400, 402288639 }, { 402333696, 402334303 }, { 402334464, 402334727 }, { 402334976, 402335807 }, { 402336008, 402341887 }, { 402522928, 402523135 }, { 402524976, 402525183 }, { 402530176, 402530303 }, { 402532240, 402532255 }, { 402533904, 402534095 }, { 402537360, 402537471 }, { 402538736, 402538751 }, { 402543760, 402543871 }, { 402544528, 402544639 }, { 402588760, 402588927 }, { 402596128, 402596359 }, { 402597128, 402597383 }, { 402597888, 402598143 }, { 402598400, 402598655 }, { 402599680, 402599935 }, { 402601240, 402601471 }, { 402602296, 402602495 }, { 402602752, 402603007 }, { 402604544, 402604799 }, { 402605608, 402605831 }, { 402607392, 402607615 }, { 402608640, 402608895 }, { 402609208, 402609407 }, { 402610200, 402610431 }, { 402611456, 402611711 }, { 402611976, 402612223 }, { 402613760, 402614015 }, { 453017600, 453019647 }, { 453025792, 453027839 }, { 453032960, 453033983 }, { 453037056, 453040127 }, { 453509120, 455081983 }, { 455272448, 455274495 }, { 455344128, 456130559 }, { 456271872, 456273919 }, { 456294400, 456327167 }, { 456542208, 456544255 }, { 456562688, 456564735 }, { 456572928, 456589311 }, { 459460608, 459472895 }, { 459505664, 459538431 }, { 459735040, 459800575 }, { 459964416, 459980799 }, { 459983872, 459984895 }, { 460136448, 460144639 }, { 460160000, 460161023 }, { 460306704, 460306943 }, { 460310225, 460310271 }, { 460324864, 460341247 }, { 460345344, 460349439 }, { 460353536, 460355583 }, { 460423168, 460439551 }, { 460521472, 460554239 }, { 460598272, 460599295 }, { 460933120, 460935167 }, { 460945408, 460947455 }, { 461373440, 461504511 }, { 461626368, 461627391 }, { 462422016, 462487551 }, { 462684160, 463470591 }, { 465043456, 467927039 }, { 520294400, 520298495 }, { 520489984, 520490495 }, { 520490752, 520491007 }, { 520511488, 520511999 }, { 520514560, 520514815 }, { 520515328, 520515775 }, { 520516480, 520516607 }, { 520516864, 520517503 }, { 520518400, 520518911 }, { 520519168, 520519423 }, { 520609792, 520613887 }, { 520617984, 520683519 }, { 520749056, 520749823 }, { 520750080, 520750335 }, { 520750592, 520753151 }, { 520765440, 520781823 }, { 520899584, 520900607 }, { 520949760, 520951807 }, { 520953856, 520962047 }, { 520978432, 520980479 }, { 520982528, 520984575 }, { 520990720, 520992767 }, { 521080832, 521082879 }, { 521097216, 521101311 }, { 521543680, 521545727 }, { 521601024, 521666559 }, { 521672704, 521674751 }, { 521688832, 521689087 }, { 521738240, 521740287 }, { 521783296, 521785343 }, { 521789440, 521791487 }, { 521793536, 521795583 }, { 521928704, 521945087 }, { 521953280, 521961471 }, { 521977856, 521994239 }, { 522027008, 522059775 }, { 522141696, 522143743 }, { 522174464, 522178559 }, { 522717184, 522719231 }, { 522723328, 522741759 }, { 522743808, 522748671 }, { 522748928, 522750719 }, { 522750976, 522754303 }, { 522754560, 522758143 }, { 522759168, 522759679 }, { 522760704, 522761215 }, { 522763264, 522764287 }, { 522766336, 522767359 }, { 522779136, 522779647 }, { 522780672, 522783231 }, { 522788864, 522792959 }, { 522795008, 522797055 }, { 522805248, 522807295 }, { 522811392, 522813439 }, { 522819584, 522823679 }, { 522827776, 522831871 }, { 522838016, 522840063 }, { 522842112, 522844159 }, { 522845695, 522845951 }, { 522854400, 522858495 }, { 522869248, 522869503 }, { 522870784, 522874879 }, { 522895104, 522911743 }, { 522960896, 522969087 }, { 522979328, 522981375 }, { 522989568, 522993663 }, { 522997760, 523001855 }, { 523022336, 523024895 }, { 523025408, 523026431 }, { 523038720, 523042815 }, { 523202560, 523223039 }, { 528490496, 528498687 }, { 528515072, 528523263 }, { 528531456, 528539647 }, { 528547840, 528553215 }, { 528553728, 528555519 }, { 528555776, 528556031 }, { 528572416, 528576511 }, { 528579072, 528579839 }, { 528580096, 528588799 }, { 528596992, 528605183 }, { 528613376, 528637951 }, { 528642048, 528654335 }, { 528662528, 528664575 }, { 528666624, 528668671 }, { 528676864, 528678911 }, { 528699392, 528701439 }, { 528702464, 528703487 }, { 528715776, 528719871 }, { 528726016, 528727039 }, { 528727552, 528736255 }, { 528742400, 528744447 }, { 528753664, 528753695 }, { 528769024, 528793599 }, { 528797696, 528809983 }, { 528818176, 528822015 }, { 528822272, 528826367 }, { 528836608, 528838655 }, { 528840704, 528842751 }, { 528861184, 528863231 }, { 528867328, 528887807 }, { 528908288, 528926719 }, { 528932864, 528941055 }, { 528943104, 528945151 }, { 528949248, 528973823 }, { 528988160, 528990207 }, { 528998400, 529006591 }, { 529793024, 529794815 }, { 529795072, 529798143 }, { 529798400, 529798655 }, { 529799168, 529799423 }, { 529799680, 529800191 }, { 529800960, 529805823 }, { 529809408, 529818623 }, { 529819648, 529825791 }, { 529827840, 529828863 }, { 529830912, 529831167 }, { 529836288, 529836543 }, { 529837056, 529837567 }, { 529838080, 529842175 }, { 529844736, 529845759 }, { 529848320, 529849087 }, { 529849856, 529854463 }, { 529855488, 529855743 }, { 529856000, 529857023 }, { 530710528, 530841599 }, { 531243008, 531245055 }, { 531248896, 531249151 }, { 531263488, 531265535 }, { 531277824, 531279871 }, { 531281920, 531283967 }, { 531349248, 531351551 }, { 531382272, 531382527 }, { 531382784, 531383295 }, { 531398656, 531400703 }, { 531415040, 531423231 }, { 531431424, 531496959 }, { 531709952, 531718143 }, { 531720192, 531722239 }, { 531890176, 532021247 }, { 532201472, 532203519 }, { 532204544, 532205055 }, { 532205568, 532212735 }, { 532212992, 532214271 }, { 532214528, 532214783 }, { 532215808, 532221951 }, { 532297728, 532303871 }, { 532307968, 532310015 }, { 532316160, 532324351 }, { 532373504, 532375551 }, { 532703232, 532705279 }, { 532709376, 532725759 }, { 532772864, 532774911 }, { 533250048, 533254143 }, { 533256192, 533262335 }, { 533264384, 533266431 }, { 533463040, 533463807 }, { 533487616, 533491711 }, { 533504000, 533512191 }, { 533676032, 533680127 }, { 533692416, 533725183 }, { 533891072, 533893119 }, { 533899264, 533899519 }, { 533905408, 533913599 }, { 533921792, 533954559 }, { 534264320, 534264575 }, { 534264832, 534265087 }, { 534290432, 534296575 }, { 534379776, 534380031 }, { 534380288, 534380543 }, { 534523392, 534523903 }, { 534550528, 534560767 }, { 534650880, 534652927 }, { 534700032, 534700287 }, { 534700800, 534701055 }, { 534701568, 534701823 }, { 534703360, 534703615 }, { 534703872, 534704127 }, { 534704384, 534707199 }, { 534707456, 534707711 }, { 534707968, 534708223 }, { 576925696, 576927743 }, { 577185280, 577186303 }, { 603979776, 603980799 }, { 603981824, 604110847 }, { 604241920, 604504063 }, { 605028352, 606412799 }, { 606413824, 606414335 }, { 606414592, 606420991 }, { 606601216, 607256575 }, { 607322112, 607387647 }, { 607649792, 608174079 }, { 610271232, 618659839 }, { 620232704, 620494847 }, { 620625920, 620691455 }, { 620721152, 620722175 }, { 620724224, 620725247 }, { 620733440, 620734463 }, { 620735488, 620737535 }, { 620747776, 620748799 }, { 620787712, 620789061 }, { 620789248, 620789759 }, { 620822528, 620845055 }, { 620855296, 620859391 }, { 621318144, 621322239 }, { 621346816, 621350911 }, { 621356032, 621358079 }, { 621359104, 621361151 }, { 621363200, 621363711 }, { 621363968, 621369087 }, { 621369344, 621370751 }, { 621370880, 621371903 }, { 621372160, 621381631 }, { 621383680, 621387775 }, { 621408256, 621410303 }, { 621824256, 621824511 }, { 621826048, 621828351 }, { 621828608, 621828863 }, { 621936640, 621937663 }, { 621938688, 621942783 }, { 621943040, 621944319 }, { 621944576, 621945855 }, { 621946112, 621947391 }, { 621952000, 621952511 }, { 621955072, 621959935 }, { 621960192, 621961215 }, { 621962240, 621969407 }, { 621975552, 621977599 }, { 622000128, 622004223 }, { 622010368, 622018559 }, { 622020608, 622022655 }, { 622053888, 622054143 }, { 622067712, 622329855 }, { 622520320, 622522367 }, { 622632960, 622641151 }, { 622657536, 622690303 }, { 622880000, 622880255 }, { 623650816, 623652863 }, { 623691264, 623691775 }, { 623783936, 623788031 }, { 623804416, 623806463 }, { 623966208, 623968255 }, { 624009216, 624025599 }, { 624566272, 624568319 }, { 624577968, 624577983 }, { 624687872, 624688127 }, { 624693248, 624695295 }, { 624734208, 624736255 }, { 624742400, 624746495 }, { 624799744, 624801791 }, { 625491968, 625500159 }, { 625511168, 625511679 }, { 625512192, 625512447 }, { 625520640, 625522687 }, { 625672192, 625674239 }, { 625721344, 625725439 }, { 625727488, 625729535 }, { 625735680, 625737727 }, { 625770496, 625786879 }, { 625829888, 625831935 }, { 625836288, 625837251 }, { 625837312, 625838079 }, { 625840896, 625841407 }, { 625841664, 625841919 }, { 625868800, 625999871 }, { 627220480, 627228671 }, { 627240960, 627245055 }, { 627300352, 627302399 }, { 627965952, 628006911 }, { 628023296, 628029439 }, { 628097024, 628230143 }, { 628232192, 628236287 }, { 628752384, 628785151 }, { 628873216, 628875263 }, { 629325824, 629326847 }, { 629391360, 629399551 }, { 629874688, 629878783 }, { 629879040, 629879807 }, { 629880064, 629882879 }, { 629886976, 629889023 }, { 629891072, 629895167 }, { 629915648, 629967615 }, { 629967872, 629968223 }, { 629968384, 629968639 }, { 629968896, 629971071 }, { 629972992, 629983231 }, { 629987328, 629987583 }, { 629988608, 629988863 }, { 629993728, 629993983 }, { 629994752, 629995007 }, { 629995520, 629995775 }, { 629997312, 629997567 }, { 630130688, 630136831 }, { 630153216, 630157311 }, { 630194176, 630456319 }, { 630784000, 630802431 }, { 631050240, 631054335 }, { 631105536, 631107583 }, { 633077760, 633094143 }, { 633208832, 633241599 }, { 633339904, 633602047 }, { 633880576, 633884671 }, { 633886720, 633888767 }, { 633894912, 633896959 }, { 633997312, 633999359 }, { 634112000, 634114047 }, { 634122240, 634124287 }, { 634126336, 634191871 }, { 634195968, 634198015 }, { 634204160, 634206207 }, { 634208256, 634216447 }, { 634404864, 634408959 }, { 634413056, 634415103 }, { 634419200, 634421247 }, { 634511360, 634517503 }, { 635196416, 635197439 }, { 635213824, 635217919 }, { 635219968, 635224063 }, { 635260928, 635261951 }, { 635283136, 635283199 }, { 635287552, 635289599 }, { 635291648, 635292159 }, { 635292416, 635293439 }, { 635719680, 635723775 }, { 635727872, 635729919 }, { 635858944, 635860991 }, { 635865088, 635865599 }, { 635865856, 635872255 }, { 635873280, 635873791 }, { 635875072, 635875327 }, { 635876096, 635876351 }, { 635877376, 635877887 }, { 635878400, 635878655 }, { 635879424, 635885055 }, { 635887104, 635889407 }, { 635889664, 635893503 }, { 635893760, 635894527 }, { 635894784, 635895807 }, { 635994112, 636026879 }, { 636047360, 636049407 }, { 636055552, 636057599 }, { 636174336, 636176383 }, { 636190720, 636223487 }, { 637272064, 637272831 }, { 637275136, 637275391 }, { 637276160, 637278207 }, { 637337088, 637337599 }, { 644602624, 644602879 }, { 645622016, 645622271 }, { 645623040, 645623807 }, { 654311424, 654311679 }, { 654311936, 654376959 }, { 658505728, 661454847 }, { 662700032, 666894335 }, { 675807232, 675938303 }, { 679313408, 679346175 }, { 679362560, 679378943 }, { 704643072, 704644095 }, { 704645120, 704650239 }, { 704651264, 704659455 }, { 704675840, 704723967 }, { 704741376, 704774143 }, { 704905216, 705167359 }, { 707788800, 708575231 }, { 708706304, 708751359 }, { 708752384, 708755455 }, { 708771840, 708837375 }, { 709885952, 710017023 }, { 710098944, 710104063 }, { 710105088, 710934527 }, { 710950912, 710961151 }, { 710962176, 711065599 }, { 711131136, 711160831 }, { 711161856, 711163903 }, { 711196672, 711458815 }, { 712507392, 712712191 }, { 712713216, 712769535 }, { 713031680, 714080255 }, { 714866688, 714874879 }, { 714875904, 716930047 }, { 716931072, 716963839 }, { 717225984, 717750271 }, { 717815808, 717848575 }, { 717881344, 720437247 }, { 720502784, 725769727 }, { 725769984, 725832703 }, { 725832960, 725855487 }, { 725855744, 725870847 }, { 725871104, 725875199 }, { 725875456, 725875967 }, { 725876224, 725980415 }, { 725980672, 726004735 }, { 726004992, 726007295 }, { 726007552, 726906879 }, { 726907136, 727187967 }, { 727188224, 727192831 }, { 727193088, 727193855 }, { 727194112, 727197183 }, { 727197440, 727198207 }, { 727198464, 727199743 }, { 727200000, 727203071 }, { 727203328, 727205631 }, { 727205888, 727207679 }, { 727207936, 727208959 }, { 727209216, 727210495 }, { 727210752, 727212031 }, { 727212288, 727214335 }, { 727214592, 727216895 }, { 727217152, 727219967 }, { 727220224, 727222015 }, { 727222528, 727223551 }, { 727223808, 727224575 }, { 727224832, 727227647 }, { 727227904, 727228671 }, { 727228928, 727231999 }, { 727232256, 727233535 }, { 727233792, 727235583 }, { 727235840, 727236607 }, { 727236864, 727240191 }, { 727240704, 727241215 }, { 727241472, 727244287 }, { 727244544, 727246335 }, { 727246592, 727246847 }, { 727247104, 727250175 }, { 727250432, 727250943 }, { 727251200, 727449599 }, { 727580672, 727584511 }, { 727584768, 727587327 }, { 727587584, 727589119 }, { 727589376, 727591935 }, { 727592192, 727596031 }, { 727596288, 727597055 }, { 727597312, 727602431 }, { 727602688, 727608831 }, { 727609088, 727611647 }, { 727611904, 727613951 }, { 727614208, 727618047 }, { 727618304, 727619583 }, { 727619840, 727624191 }, { 727624448, 727625983 }, { 727626240, 727630847 }, { 727631104, 727635711 }, { 727635968, 727639551 }, { 727639808, 727644927 }, { 727645184, 727647231 }, { 727647488, 727652863 }, { 727653120, 727657727 }, { 727657984, 727661823 }, { 727662080, 727663615 }, { 727663872, 727665407 }, { 727665664, 727666687 }, { 727666944, 727669503 }, { 727669760, 727671039 }, { 727671296, 727674367 }, { 727674624, 727675647 }, { 727675904, 727677183 }, { 727677440, 727680511 }, { 727680768, 727683071 }, { 727683328, 727685119 }, { 727685376, 727689215 }, { 727689472, 727690495 }, { 727690752, 727692799 }, { 727693056, 727693311 }, { 727693568, 727695103 }, { 727695360, 727696383 }, { 727696640, 727700735 }, { 727700992, 727706879 }, { 727707136, 727710463 }, { 727710720, 729808895 }, { 730021888, 730024703 }, { 730024960, 730025215 }, { 730025472, 730062847 }, { 730093568, 730093823 }, { 730333184, 731382783 }, { 731383296, 731384575 }, { 731391488, 731391999 }, { 731392256, 731393023 }, { 731395584, 731395839 }, { 731396096, 731396351 }, { 731396608, 731397375 }, { 731398400, 731398655 }, { 731401216, 731402239 }, { 731404288, 731404799 }, { 731406336, 731430911 }, { 731445504, 731447295 }, { 731460096, 731467775 }, { 731475456, 731480063 }, { 731488256, 731512831 }, { 731523584, 731523839 }, { 731577344, 731578367 }, { 731610624, 731611135 }, { 731627520, 731643903 }, { 731700224, 731700735 }, { 731707648, 731709439 }, { 731718656, 731719167 }, { 731726848, 731729407 }, { 731742208, 731758591 }, { 731807744, 731817983 }, { 731844608, 734396415 }, { 736103424, 736104447 }, { 736106496, 736107519 }, { 736111616, 736112639 }, { 736113664, 736115711 }, { 736117760, 736119807 }, { 736120832, 736121855 }, { 736125952, 736126975 }, { 736137216, 736138239 }, { 736141312, 736142335 }, { 736145408, 736146431 }, { 736147456, 736148479 }, { 736151552, 736156671 }, { 736161792, 736162815 }, { 736185344, 736186367 }, { 736187392, 736188415 }, { 736196608, 736197631 }, { 736210176, 736210431 }, { 736211968, 736212991 }, { 736219136, 736220159 }, { 736221184, 736229375 }, { 736230400, 736231423 }, { 736239616, 736263167 }, { 736264192, 736286719 }, { 736291840, 736300031 }, { 736305152, 736324607 }, { 736331776, 736334847 }, { 736335872, 736344063 }, { 736345088, 736354303 }, { 736356352, 736357375 }, { 736360448, 736380927 }, { 736381952, 736382975 }, { 736388096, 736389119 }, { 736392192, 736394239 }, { 736396288, 736398335 }, { 736400384, 736402431 }, { 736410624, 736411647 }, { 736414720, 736415743 }, { 736423936, 736424959 }, { 736438272, 736439295 }, { 736440320, 736441343 }, { 736442368, 736443391 }, { 736452608, 736453631 }, { 736458752, 736459775 }, { 736462848, 736465919 }, { 736471040, 736479231 }, { 736483328, 736485375 }, { 736487424, 736489471 }, { 736498688, 736499711 }, { 736501760, 736502783 }, { 736510976, 736513023 }, { 736525312, 736526335 }, { 736528384, 736529407 }, { 736530432, 736531455 }, { 736549888, 736559103 }, { 736567296, 736571391 }, { 736579584, 736587775 }, { 736593920, 736606207 }, { 736886784, 737002495 }, { 737003520, 737096703 }, { 737113088, 737115135 }, { 737127424, 737129471 }, { 737148928, 737149951 }, { 737163264, 737165311 }, { 737166336, 737169407 }, { 737170432, 737171455 }, { 737180672, 737184767 }, { 737185792, 737186815 }, { 737188864, 737206271 }, { 737210368, 737220607 }, { 737226752, 737227775 }, { 737233920, 737239039 }, { 737243136, 737244159 }, { 737257472, 737262591 }, { 737267712, 737276927 }, { 737277952, 737278975 }, { 737282048, 737288191 }, { 737292288, 737293311 }, { 737293568, 737294079 }, { 737294336, 737297407 }, { 737298432, 737305599 }, { 737316864, 737324031 }, { 737326080, 737327103 }, { 737328128, 737331199 }, { 737332224, 737333247 }, { 737335296, 737337343 }, { 737344512, 737345535 }, { 737346560, 737350655 }, { 737368064, 737369087 }, { 737378304, 737379327 }, { 737380352, 737381375 }, { 737382400, 737384447 }, { 737385472, 737386495 }, { 737391616, 737392639 }, { 737403904, 737405951 }, { 737408000, 737409023 }, { 737542144, 737567743 }, { 737570816, 737571071 }, { 737596416, 737597439 }, { 737600512, 737601535 }, { 737608704, 737610751 }, { 737618944, 737620991 }, { 737625088, 737626111 }, { 737626112, 737627135 }, { 737627136, 737628159 }, { 737629184, 737634303 }, { 737635328, 737637375 }, { 737645568, 737647615 }, { 737652736, 737656831 }, { 737657856, 737675263 }, { 737678336, 737679359 }, { 737680384, 737681407 }, { 737685504, 737686527 }, { 737692672, 737712127 }, { 737718272, 737727487 }, { 737731584, 737733631 }, { 737735680, 737736703 }, { 737739776, 737741311 }, { 737769472, 737770495 }, { 737772544, 737774591 }, { 737775616, 737782783 }, { 737787904, 737788927 }, { 737799168, 737800191 }, { 737805312, 737806335 }, { 737807360, 737810431 }, { 737811456, 737814527 }, { 737822720, 737823743 }, { 737828864, 737830911 }, { 737831936, 737833983 }, { 737834496, 737835007 }, { 737837056, 737838079 }, { 737841152, 737843199 }, { 737845248, 737846271 }, { 737847296, 737848319 }, { 737849344, 737850367 }, { 737855488, 737856511 }, { 737858560, 737861631 }, { 737864704, 737865727 }, { 737866752, 737867775 }, { 737870848, 737871871 }, { 737879040, 737880063 }, { 737895424, 737896447 }, { 737918976, 737919999 }, { 737929216, 737931263 }, { 737932288, 737933311 }, { 737947648, 737948671 }, { 737949696, 737950719 }, { 737992704, 737993727 }, { 738066432, 738069503 }, { 738072576, 738073599 }, { 738075648, 738076671 }, { 738077696, 738078719 }, { 738079744, 738080767 }, { 738084864, 738085887 }, { 738087936, 738091007 }, { 738092032, 738094079 }, { 738095104, 738097151 }, { 738099200, 738100223 }, { 738101248, 738107391 }, { 738109440, 738111487 }, { 738112512, 738118655 }, { 738119680, 738120703 }, { 738122752, 738128895 }, { 738129920, 738135039 }, { 738136064, 738137087 }, { 738144256, 738145279 }, { 738148352, 738152447 }, { 738153472, 738154495 }, { 738156544, 738157567 }, { 738168832, 738169855 }, { 738174976, 738175999 }, { 738177024, 738178047 }, { 738179072, 738180095 }, { 738181120, 738182143 }, { 738183168, 738187263 }, { 738189312, 738192383 }, { 738194432, 738195455 }, { 740234752, 740235007 }, { 748634112, 748634879 }, { 748635136, 748636167 }, { 749862912, 749862943 }, { 749881856, 749881863 }, { 749920256, 749920263 }, { 755507456, 755507711 }, { 755521536, 755521791 }, { 755522048, 755522559 }, { 755526656, 755527679 }, { 755530752, 755531775 }, { 755535872, 755536895 }, { 755538944, 755539967 }, { 755544064, 755544319 }, { 755552256, 755553023 }, { 755557376, 755558399 }, { 755562496, 755563519 }, { 755569664, 755570175 }, { 755570688, 755571711 }, { 755574784, 755575807 }, { 755583232, 755583999 }, { 755587072, 755588095 }, { 755600384, 755601407 }, { 755606528, 755607551 }, { 755613696, 755614719 }, { 755618816, 755620863 }, { 755643392, 755644415 }, { 755646464, 755647487 }, { 755650560, 755651583 }, { 755657728, 755658751 }, { 755665920, 755666943 }, { 755678464, 755678719 }, { 755691520, 755694591 }, { 755696640, 755697663 }, { 755700736, 755701759 }, { 755702016, 755702783 }, { 755715072, 755715839 }, { 755719424, 755720191 }, { 755724288, 755725311 }, { 755727360, 755728383 }, { 755745792, 755746047 }, { 755749888, 755750911 }, { 755762176, 755763199 }, { 755765248, 755766271 }, { 755769344, 755769855 }, { 755777536, 755778559 }, { 755779584, 755780607 }, { 755792896, 755793919 }, { 755819520, 755820543 }, { 755821568, 755822591 }, { 755896320, 755898367 }, { 755948544, 755949567 }, { 755954688, 755955711 }, { 755976192, 755977215 }, { 755986432, 755987455 }, { 755997696, 755998719 }, { 756014080, 756014591 }, { 756018176, 756018943 }, { 756022272, 756023295 }, { 757177856, 757178111 }, { 757312256, 757312511 }, { 757645312, 757661695 }, { 758737920, 758738431 }, { 758750384, 758750463 }, { 758751904, 758751919 }, { 758763008, 758763263 }, { 758766352, 758766583 }, { 758770528, 758770623 }, { 759013632, 759013887 }, { 759238656, 759242751 }, { 759324672, 759325695 }, { 759343104, 759344127 }, { 759371776, 759372799 }, { 759373824, 759374591 }, { 759379968, 759380991 }, { 759414784, 759415807 }, { 759424512, 759424767 }, { 759426048, 759427071 }, { 759699280, 759699455 }, { 759700832, 759700991 }, { 760228864, 760229887 }, { 760233984, 760236031 }, { 760248320, 760249343 }, { 760269824, 760271871 }, { 760273920, 760274175 }, { 760276224, 760276991 }, { 760279040, 760280063 }, { 760302592, 760303615 }, { 760317952, 760318975 }, { 760325120, 760326143 }, { 760334336, 760335359 }, { 760356352, 760356607 }, { 760387584, 760388095 }, { 760403968, 760404991 }, { 760406016, 760407039 }, { 760418304, 760419327 }, { 760437760, 760438783 }, { 760471552, 760472575 }, { 760480000, 760480767 }, { 760482816, 760483839 }, { 760495104, 760496127 }, { 760497152, 760498175 }, { 760501248, 760502271 }, { 760512512, 760513535 }, { 760518656, 760519679 }, { 760524800, 760525567 }, { 760537088, 760538111 }, { 760551424, 760552447 }, { 760561664, 760563711 }, { 760581120, 760582143 }, { 760597504, 760598527 }, { 760599552, 760600575 }, { 760610816, 760611839 }, { 760620544, 760621055 }, { 760622080, 760622335 }, { 760654592, 760654847 }, { 760656896, 760657919 }, { 760659200, 760659455 }, { 760702976, 760703487 }, { 760708608, 760708863 }, { 760712192, 760714239 }, { 760731648, 760732671 }, { 760738816, 760739839 }, { 760740864, 760741375 }, { 760741632, 760741887 }, { 760755200, 760756223 }, { 760767744, 760767999 }, { 760782336, 760782591 }, { 760795136, 760796159 }, { 760806400, 760807423 }, { 760811520, 760812543 }, { 760813056, 760813311 }, { 760813568, 760814591 }, { 760820736, 760821759 }, { 760822784, 760823807 }, { 760824064, 760826879 }, { 760855552, 760855807 }, { 760864768, 760866559 }, { 760870144, 760870399 }, { 760881152, 760882175 }, { 760884224, 760884479 }, { 760884736, 760886271 }, { 760888320, 760889343 }, { 760923136, 760923391 }, { 760928256, 760929279 }, { 760935424, 760936447 }, { 760940544, 760940799 }, { 760941056, 760941567 }, { 760951808, 760952831 }, { 760955392, 760955647 }, { 760979456, 760980479 }, { 760999680, 761000959 }, { 761021952, 761022207 }, { 761048064, 761050111 }, { 761057536, 761057791 }, { 761072640, 761073663 }, { 761074688, 761074943 }, { 761075200, 761075455 }, { 761090048, 761090303 }, { 761103360, 761104383 }, { 761109504, 761110527 }, { 761120768, 761121535 }, { 761123840, 761124863 }, { 761140224, 761141247 }, { 761154560, 761155583 }, { 761161728, 761162751 }, { 761164800, 761166847 }, { 761170944, 761171967 }, { 761193472, 761194495 }, { 761207808, 761208831 }, { 761214976, 761215999 }, { 761235456, 761236479 }, { 761238528, 761239551 }, { 761252352, 761252863 }, { 762348544, 762349567 }, { 762362880, 762363903 }, { 762368000, 762372095 }, { 762373120, 762376191 }, { 762383360, 762388479 }, { 762390528, 762391551 }, { 762393600, 762395647 }, { 762398720, 762399743 }, { 762411008, 762411519 }, { 762411776, 762412031 }, { 762417152, 762419199 }, { 762423296, 762424319 }, { 762425344, 762426367 }, { 762427392, 762428415 }, { 762429441, 762430463 }, { 762431488, 762437631 }, { 762441728, 762442751 }, { 762444800, 762446847 }, { 762454016, 762455039 }, { 762456064, 762457087 }, { 762459136, 762460159 }, { 762470400, 762471423 }, { 762480640, 762481663 }, { 762496000, 762498047 }, { 762504192, 762505215 }, { 762510336, 762511359 }, { 762522624, 762523647 }, { 762536960, 762537983 }, { 762542080, 762543103 }, { 762545152, 762546175 }, { 762548224, 762549247 }, { 762551296, 762552319 }, { 762553344, 762554367 }, { 762562560, 762563583 }, { 762565632, 762566655 }, { 762569728, 762570751 }, { 762571776, 762572799 }, { 762573824, 762575871 }, { 762580992, 762582015 }, { 762583040, 762584063 }, { 762585088, 762587135 }, { 762590208, 762591231 }, { 762601472, 762603519 }, { 762612736, 762613759 }, { 762615808, 762616831 }, { 762630144, 762631167 }, { 762644480, 762645503 }, { 762647552, 762648575 }, { 762659840, 762660863 }, { 762674176, 762675199 }, { 762706944, 762707967 }, { 762786816, 762787327 }, { 762788864, 762792959 }, { 762800128, 762801151 }, { 762803200, 762804223 }, { 762832896, 762833919 }, { 762864640, 762865663 }, { 762874880, 762875903 }, { 762881024, 762882047 }, { 762900480, 762901503 }, { 762917888, 762918911 }, { 762920960, 762924031 }, { 762928128, 762930175 }, { 762948608, 762950655 }, { 762966016, 762981375 }, { 762985472, 763000831 }, { 763011072, 763026431 }, { 763042816, 763045887 }, { 763046912, 763059199 }, { 763066368, 763067391 }, { 763068416, 763071487 }, { 763073536, 763076607 }, { 763077632, 763083775 }, { 763087872, 763088895 }, { 763089920, 763090943 }, { 763092992, 763102207 }, { 763106304, 763107327 }, { 763108352, 763111423 }, { 763112448, 763113471 }, { 763118592, 763119615 }, { 763120640, 763122687 }, { 763126784, 763127807 }, { 763132928, 763133951 }, { 763145216, 763147263 }, { 763154432, 763155455 }, { 763164672, 763165695 }, { 763169792, 763170303 }, { 763170560, 763171839 }, { 763172864, 763174911 }, { 763177984, 763179007 }, { 763180032, 763182079 }, { 763186176, 763194367 }, { 763201536, 763202559 }, { 763244544, 763246591 }, { 763257856, 763258879 }, { 763259904, 763263999 }, { 763286528, 763287551 }, { 763288576, 763289599 }, { 763299840, 763301887 }, { 763322368, 763323391 }, { 763330560, 763331583 }, { 763334656, 763336703 }, { 763337728, 763338751 }, { 763353088, 763354111 }, { 763395328, 763395583 }, { 763396096, 763397119 }, { 763408384, 763409407 }, { 763410432, 763411455 }, { 763415552, 763415807 }, { 763416064, 763416575 }, { 763421696, 763422719 }, { 763429120, 763430911 }, { 763449088, 763449343 }, { 763464704, 763465727 }, { 763467776, 763468799 }, { 763479296, 763479551 }, { 763480064, 763482111 }, { 763489280, 763490303 }, { 763496448, 763497471 }, { 763504640, 763505663 }, { 763511808, 763512831 }, { 763523328, 763523839 }, { 763531264, 763532287 }, { 763532800, 763533311 }, { 763538432, 763539455 }, { 763542528, 763543551 }, { 763563008, 763564031 }, { 763570176, 763570943 }, { 763571200, 763573247 }, { 763574272, 763575295 }, { 763577344, 763578367 }, { 763584512, 763585535 }, { 763614464, 763614719 }, { 763629568, 763631615 }, { 763635200, 763635455 }, { 763638272, 763638527 }, { 763658240, 763658751 }, { 763664128, 763664383 }, { 763673344, 763673599 }, { 763677696, 763678463 }, { 763689984, 763691007 }, { 763695104, 763696127 }, { 763698944, 763700223 }, { 763715584, 763716607 }, { 763728896, 763729919 }, { 763746560, 763747071 }, { 763748352, 763749375 }, { 763751168, 763751423 }, { 763753472, 763753727 }, { 763760384, 763760639 }, { 763762688, 763764735 }, { 763769856, 763770879 }, { 763771904, 763773951 }, { 763780096, 763781119 }, { 763788288, 763789311 }, { 763796480, 763797503 }, { 763802624, 763803647 }, { 763821056, 763821567 }, { 763821824, 763822079 }, { 763825152, 763826175 }, { 763829248, 763830783 }, { 763842560, 763843583 }, { 763845632, 763846655 }, { 763855360, 763855615 }, { 763855872, 763856895 }, { 763864064, 763864319 }, { 763867392, 763867647 }, { 763876352, 763877375 }, { 763880960, 763881215 }, { 763881472, 763881983 }, { 763892736, 763893759 }, { 763905024, 763905279 }, { 763913216, 763914239 }, { 763924480, 763925503 }, { 763933696, 763934719 }, { 763939840, 763940351 }, { 763940608, 763941887 }, { 763950080, 763951103 }, { 763951360, 763952127 }, { 763963392, 763963647 }, { 763964160, 763964415 }, { 763966464, 763966975 }, { 763974912, 763975167 }, { 763979776, 763980799 }, { 763981824, 763982847 }, { 763992064, 763992831 }, { 764001280, 764002303 }, { 764017664, 764018687 }, { 764020480, 764020735 }, { 764037376, 764038143 }, { 764045056, 764045311 }, { 764055552, 764055807 }, { 764056064, 764056575 }, { 764058624, 764059135 }, { 764059392, 764060671 }, { 764073216, 764073983 }, { 764078080, 764079103 }, { 764088320, 764089343 }, { 764090368, 764091903 }, { 764092160, 764092415 }, { 764094464, 764094719 }, { 764094976, 764095487 }, { 764097536, 764098047 }, { 764098304, 764098559 }, { 764103680, 764104703 }, { 764111872, 764112895 }, { 764115968, 764116991 }, { 764118016, 764119039 }, { 764121088, 764122111 }, { 764123136, 764124159 }, { 764127232, 764128255 }, { 764129280, 764130303 }, { 764131328, 764132351 }, { 764144640, 764145663 }, { 764153856, 764154879 }, { 764155904, 764156927 }, { 764163072, 764164095 }, { 764165120, 764166399 }, { 764168192, 764171263 }, { 764173312, 764174335 }, { 764192256, 764192511 }, { 764192768, 764193791 }, { 764194048, 764194303 }, { 764194560, 764194815 }, { 764234752, 764235775 }, { 764236800, 764237823 }, { 764238848, 764239615 }, { 764240896, 764241919 }, { 764262400, 764262655 }, { 764262912, 764263423 }, { 764265728, 764266495 }, { 764268544, 764269567 }, { 764289024, 764290303 }, { 764290816, 764291071 }, { 764299264, 764300287 }, { 764312064, 764312319 }, { 764334080, 764334847 }, { 764336128, 764336639 }, { 764343808, 764344063 }, { 764345344, 764346367 }, { 764351488, 764352511 }, { 764367872, 764368895 }, { 764369920, 764370943 }, { 764381184, 764382207 }, { 764382720, 764382975 }, { 764385280, 764386303 }, { 764388864, 764389375 }, { 764398080, 764398335 }, { 764406784, 764407807 }, { 764408832, 764409855 }, { 764412160, 764412927 }, { 764419584, 764420095 }, { 764421120, 764421887 }, { 764422656, 764424191 }, { 764425216, 764426239 }, { 764428288, 764429311 }, { 764454912, 764455935 }, { 764456960, 764457983 }, { 764468224, 764469247 }, { 764471296, 764472319 }, { 764477696, 764477951 }, { 764478208, 764478463 }, { 764478720, 764478975 }, { 764490752, 764491007 }, { 764491264, 764491519 }, { 764493824, 764494847 }, { 764499968, 764500479 }, { 764500736, 764500991 }, { 764507136, 764508159 }, { 764519168, 764519423 }, { 764520448, 764521471 }, { 764525568, 764526591 }, { 764549120, 764549631 }, { 764549888, 764550143 }, { 764553216, 764554239 }, { 764559360, 764560383 }, { 764581888, 764582911 }, { 764584960, 764586495 }, { 764586752, 764587007 }, { 764601344, 764602367 }, { 764608512, 764609023 }, { 764611584, 764612607 }, { 764628992, 764630015 }, { 764639232, 764640255 }, { 764645376, 764646399 }, { 764649984, 764650495 }, { 764651520, 764652543 }, { 764653568, 764654591 }, { 764657664, 764658687 }, { 764659712, 764660223 }, { 764673024, 764673279 }, { 764706560, 764706815 }, { 764735488, 764736255 }, { 764736512, 764737535 }, { 764749824, 764750847 }, { 764772608, 764773119 }, { 764773376, 764773631 }, { 764774144, 764774399 }, { 764802048, 764803071 }, { 764807168, 764808191 }, { 764811264, 764812287 }, { 764820480, 764820991 }, { 764821504, 764821759 }, { 764834048, 764834815 }, { 764853248, 764854271 }, { 764857344, 764858367 }, { 764865536, 764866559 }, { 764877824, 764878335 }, { 764883968, 764884991 }, { 764886016, 764886527 }, { 764888064, 764889087 }, { 764895488, 764896255 }, { 764898304, 764899327 }, { 764905472, 764906495 }, { 764907520, 764908287 }, { 764929024, 764930559 }, { 764957952, 764958463 }, { 764965376, 764966399 }, { 764966656, 764967935 }, { 764979200, 764980223 }, { 764990464, 764990719 }, { 764990976, 764991487 }, { 764992512, 764993791 }, { 764994048, 764994303 }, { 765004800, 765005823 }, { 765008896, 765009919 }, { 765012992, 765014015 }, { 765015040, 765015295 }, { 765015808, 765016063 }, { 765017088, 765019135 }, { 765020160, 765021183 }, { 765049856, 765050879 }, { 765051904, 765052927 }, { 765059072, 765059839 }, { 765060864, 765061119 }, { 765067264, 765067519 }, { 765076416, 765076479 }, { 765086208, 765086719 }, { 765108224, 765108735 }, { 765108992, 765109247 }, { 765114368, 765115391 }, { 765133824, 765134847 }, { 765146112, 765147135 }, { 765156352, 765157375 }, { 765159424, 765160447 }, { 765169664, 765170687 }, { 765185024, 765186047 }, { 765193216, 765194239 }, { 765198336, 765199359 }, { 765203456, 765205503 }, { 765227520, 765228031 }, { 765228800, 765229055 }, { 765236224, 765237247 }, { 765252608, 765253631 }, { 765298688, 765298943 }, { 765299712, 765299967 }, { 765300480, 765300735 }, { 765318144, 765319167 }, { 765340928, 765341183 }, { 765341440, 765341695 }, { 765377536, 765378559 }, { 765388800, 765389823 }, { 765394944, 765395967 }, { 765399040, 765400063 }, { 765416448, 765416703 }, { 765417216, 765417471 }, { 765421568, 765422591 }, { 765429760, 765430783 }, { 765446144, 765447167 }, { 765448192, 765448703 }, { 765448960, 765449215 }, { 765458432, 765459455 }, { 766950656, 766950911 }, { 767534080, 767535103 }, { 768110080, 768110335 }, { 771229696, 771230719 }, { 771248128, 771249151 }, { 771250176, 771251199 }, { 771252224, 771256319 }, { 771260416, 771262463 }, { 771279872, 771295231 }, { 771296256, 771303423 }, { 771321856, 771322879 }, { 771339264, 771340287 }, { 771341312, 771348479 }, { 771361792, 771363839 }, { 771365888, 771369983 }, { 771378176, 771384319 }, { 771385344, 771398655 }, { 771400704, 771401727 }, { 771404800, 771408895 }, { 771424256, 771425279 }, { 771426304, 771427327 }, { 771428352, 771430399 }, { 771437568, 771438591 }, { 771445760, 771450879 }, { 771454976, 771457023 }, { 771459072, 771459327 }, { 771459584, 771482623 }, { 771489792, 771503103 }, { 771511296, 771535871 }, { 771538944, 771550207 }, { 771555328, 771577855 }, { 771578880, 771587071 }, { 771589120, 771617791 }, { 771620864, 771629055 }, { 771631104, 771632127 }, { 771633152, 771680255 }, { 771681280, 771683327 }, { 771684352, 771685375 }, { 771686400, 771718143 }, { 771720960, 771721215 }, { 771721216, 771750911 }, { 771751936, 771817471 }, { 771949568, 771952639 }, { 771953664, 771956735 }, { 771960832, 771966975 }, { 771968000, 771968255 }, { 771970048, 771977215 }, { 771977728, 771987455 }, { 771988480, 771990527 }, { 771991552, 772001791 }, { 772003840, 772005887 }, { 772006912, 772009983 }, { 772011008, 772014079 }, { 772276224, 772277247 }, { 772278784, 772282623 }, { 772282880, 772283135 }, { 772283648, 772284159 }, { 772284416, 772284927 }, { 772285440, 772285695 }, { 772285952, 772300799 }, { 772302848, 772303871 }, { 772304384, 772304895 }, { 772308992, 772314367 }, { 772314880, 772315135 }, { 772315392, 772317183 }, { 772325376, 772325887 }, { 772329472, 772337407 }, { 772337664, 772339967 }, { 772340224, 772340735 }, { 772341248, 772341759 }, { 772802560, 772803583 }, { 772803840, 772804095 }, { 772806656, 772808703 }, { 772808960, 772810239 }, { 772816896, 772818943 }, { 772825088, 772827135 }, { 772845568, 772847615 }, { 772857856, 772859903 }, { 772876288, 772880383 }, { 772892672, 772892927 }, { 772917248, 772919295 }, { 772929536, 772929791 }, { 772930048, 772930815 }, { 772931072, 772931327 }, { 772982784, 772984831 }, { 773014528, 773015551 }, { 773025792, 773027839 }, { 773044224, 773046271 }, { 773079040, 773083135 }, { 773107712, 773111807 }, { 773144576, 773148671 }, { 773189632, 773192191 }, { 773192704, 773193727 }, { 773206016, 773210111 }, { 773255168, 773259263 }, { 773296128, 773300223 }, { 773304320, 773308415 }, { 773591040, 773593087 }, { 773609472, 773611519 }, { 773619712, 773621759 }, { 773644288, 773646335 }, { 773654528, 773656575 }, { 773670912, 773672959 }, { 773681152, 773683199 }, { 773691392, 773695487 }, { 773701632, 773703679 }, { 773705728, 773707775 }, { 773711872, 773713919 }, { 773726208, 773728255 }, { 773728512, 773729023 }, { 773729536, 773729791 }, { 773756928, 773758975 }, { 773783552, 773785599 }, { 773789696, 773791743 }, { 773800704, 773800959 }, { 773822464, 773824511 }, { 773865472, 773873663 }, { 774012928, 774017535 }, { 774017792, 774021119 }, { 774103040, 774119423 }, { 774209536, 774217727 }, { 774242304, 774258687 }, { 774266880, 774275071 }, { 774307840, 774324223 }, { 774365184, 774373375 }, { 774455296, 774471679 }, { 774504448, 774520831 }, { 774537216, 774553599 }, { 774619136, 774651903 }, { 774701056, 774717439 }, { 774750208, 774782975 }, { 774799360, 774815743 }, { 774832128, 774848511 }, { 774881280, 774963199 }, { 775061504, 775094271 }, { 775192576, 775225343 }, { 775749632, 775847935 }, { 775913472, 775946239 }, { 776470528, 776601599 }, { 779026432, 779091967 }, { 780795904, 780861439 }, { 781320192, 781451263 }, { 781463552, 781467647 }, { 781475840, 781479935 }, { 781484032, 781488127 }, { 781496320, 781516799 }, { 781524992, 781529087 }, { 781533184, 781537279 }, { 781542144, 781542399 }, { 781542656, 781542911 }, { 781544960, 781545215 }, { 781549568, 781553663 }, { 781558784, 781559807 }, { 781560832, 781561087 }, { 781561344, 781561599 }, { 781574144, 781578239 }, { 781615104, 781631487 }, { 781639680, 781651967 }, { 781654016, 781656063 }, { 781660160, 781662207 }, { 781664256, 781666303 }, { 781670400, 781672447 }, { 781674496, 781676543 }, { 781684736, 781688831 }, { 781690880, 781692927 }, { 781709312, 781711359 }, { 782106624, 782254079 }, { 782270464, 782303743 }, { 782304256, 782305535 }, { 782305792, 782306303 }, { 782306816, 782309887 }, { 782310400, 782311167 }, { 782311424, 782313471 }, { 782313728, 782313983 }, { 782314240, 782314495 }, { 782315520, 782317567 }, { 782336000, 782352383 }, { 782467072, 782483455 }, { 782548992, 782581759 }, { 782647296, 782663679 }, { 782680064, 782696447 }, { 782712832, 782729215 }, { 783024128, 783040511 }, { 783048704, 783056895 }, { 783065088, 783081471 }, { 783089664, 783106047 }, { 783134720, 783138815 }, { 783142912, 783147007 }, { 783157248, 783159295 }, { 783165440, 783169535 }, { 783175680, 783179775 }, { 783181824, 783185919 }, { 783204352, 783206399 }, { 783210496, 783212543 }, { 783218688, 783220735 }, { 783223808, 783224063 }, { 783226880, 783230975 }, { 783245312, 783247359 }, { 783251456, 783253503 }, { 783254528, 783254783 }, { 783269888, 783278079 }, { 783548416, 783679487 }, { 783685632, 783687679 }, { 783712256, 783714303 }, { 783745024, 783747071 }, { 783765504, 783767551 }, { 783777792, 783779839 }, { 783785984, 783788031 }, { 783790080, 783792127 }, { 784007168, 784039935 }, { 784072704, 784105471 }, { 784302080, 784334847 }, { 786579456, 786581503 }, { 786587648, 786589695 }, { 786594304, 786594559 }, { 786604032, 786606079 }, { 786620416, 786622463 }, { 786624512, 786626559 }, { 786634752, 786636799 }, { 786669568, 786670847 }, { 786671104, 786671615 }, { 786681856, 786683903 }, { 786694144, 786698239 }, { 786710528, 786714623 }, { 786718720, 786726911 }, { 786776064, 786780159 }, { 786784256, 786788351 }, { 786792448, 786796543 }, { 786804736, 786808831 }, { 786812928, 786817023 }, { 786933760, 786935807 }, { 786944000, 786946047 }, { 786956544, 786961407 }, { 786964480, 786976767 }, { 786980864, 786984959 }, { 786988032, 786989055 }, { 786997248, 786999295 }, { 787007488, 787009535 }, { 787011584, 787013631 }, { 787017728, 787019775 }, { 787070976, 787087359 }, { 787162368, 787162623 }, { 787165184, 787167231 }, { 787169280, 787171327 }, { 787172864, 787173375 }, { 787193856, 787195903 }, { 787200000, 787202047 }, { 787208192, 787210239 }, { 787216384, 787218431 }, { 787251200, 787267583 }, { 787283968, 787300351 }, { 787546112, 787578879 }, { 787611648, 787644415 }, { 787679232, 787681279 }, { 787692544, 787693567 }, { 787713280, 787713535 }, { 787713792, 787714047 }, { 787718400, 787724031 }, { 787724288, 787724799 }, { 787725056, 787725311 }, { 787728640, 787728895 }, { 787729664, 787730175 }, { 787730432, 787730943 }, { 787731456, 787731711 }, { 787732992, 787733247 }, { 787733504, 787733759 }, { 787735040, 787735551 }, { 787740928, 787741183 }, { 787741440, 787741695 }, { 787741696, 787742719 }, { 787841024, 787843071 }, { 787851264, 787853311 }, { 788011008, 788011519 }, { 788012544, 788013055 }, { 788040640, 788040703 }, { 788070400, 788078591 }, { 788144128, 788160511 }, { 788168704, 788176895 }, { 788217856, 788226047 }, { 788295680, 788299775 }, { 788307968, 788312063 }, { 788328448, 788332543 }, { 788365312, 788365567 }, { 788366336, 788366591 }, { 788369152, 788369407 }, { 788402176, 788406271 }, { 788418560, 788420607 }, { 788421632, 788422655 }, { 788425984, 788426495 }, { 788439040, 788441087 }, { 788453376, 788455423 }, { 788459520, 788461567 }, { 788488192, 788490239 }, { 788498432, 788500479 }, { 791951360, 791951615 }, { 793473280, 793473791 }, { 793475072, 793475327 }, { 794361856, 794378239 }, { 794554112, 794554367 }, { 794557440, 794557695 }, { 794558464, 796917759 }, { 804267776, 804268031 }, { 804275712, 804275967 }, { 804519936, 804520191 }, { 804651520, 804652031 }, { 804685568, 804685823 }, { 822140928, 822149119 }, { 822345728, 822607871 }, { 825491456, 825753599 }, { 826277888, 828375039 }, { 829423616, 830210047 }, { 830472192, 830472447 }, { 830472704, 830473215 }, { 831258624, 831389695 }, { 832045056, 832307199 }, { 835715072, 835977215 }, { 836501504, 836763647 }, { 837287936, 837550079 }, { 837746688, 837763071 }, { 837795840, 837812223 }, { 838262784, 838270975 }, { 839025248, 839025407 }, { 839025664, 839025919 }, { 839368708, 839368711 }, { 840708611, 840708863 }, { 840711214, 840711405 }, { 842566132, 842566143 }, { 860816640, 860816895 }, { 870229760, 870230015 }, { 872022016, 872087551 }, { 872345600, 872345855 }, { 872380956, 872381183 }, { 872408592, 872408831 }, { 877658112, 877920255 }, { 880934912, 881065983 }, { 908462424, 908462591 }, { 908546560, 908546815 }, { 920518656, 920528895 }, { 920530176, 920530431 }, { 920530944, 920532991 }, { 920533248, 920533519 }, { 920533760, 920541183 }, { 920551424, 920649727 }, { 961937408, 961945599 }, { 962002944, 962035711 }, { 962355200, 962359295 }, { 968627200, 968627455 }, { 973996032, 974782463 }, { 975044608, 977272831 }, { 977397760, 977399807 }, { 977403904, 977534975 }, { 977567744, 977577983 }, { 977592320, 977600511 }, { 978452480, 978485247 }, { 978518016, 978583551 }, { 978796544, 978812927 }, { 979599360, 979763199 }, { 980680704, 980942847 }, { 981467136, 981991423 }, { 982515712, 982581247 }, { 983171072, 983302143 }, { 985661440, 987758591 }, { 988807168, 989855743 }, { 991952896, 995329023 }, { 995330048, 995340287 }, { 995344384, 995360767 }, { 996868096, 997195775 }, { 999560078, 999560078 }, { 999751680, 999784447 }, { 999821312, 999825407 }, { 999825920, 999826175 }, { 999826432, 999827455 }, { 999833600, 999837695 }, { 999845888, 999847935 }, { 999883776, 999884799 }, { 999890944, 999891967 }, { 999898112, 999902207 }, { 999906304, 999907327 }, { 999912448, 999913471 }, { 999917568, 999918591 }, { 999921664, 999922687 }, { 999924736, 999932927 }, { 1000013824, 1000079359 }, { 1001127936, 1001390079 }, { 1002373120, 1002405887 }, { 1002438656, 1008730111 }, { 1010237440, 1010302975 }, { 1010761728, 1010827263 }, { 1017118720, 1019215871 }, { 1019346944, 1019478015 }, { 1019740160, 1020641091 }, { 1020641280, 1021313023 }, { 1021837312, 1021968383 }, { 1022033920, 1022099455 }, { 1022722048, 1022754815 }, { 1022820352, 1022885887 }, { 1023148032, 1023213567 }, { 1023246336, 1023279103 }, { 1023344640, 1023410175 }, { 1023692800, 1023696895 }, { 1023717376, 1023721471 }, { 1023975424, 1023979519 }, { 1024329304, 1024329471 }, { 1024332672, 1024332799 }, { 1024340992, 1024341247 }, { 1024342272, 1024343295 }, { 1024381952, 1024385023 }, { 1024389120, 1024391167 }, { 1025245184, 1025277951 }, { 1025343488, 1025372159 }, { 1026392064, 1026408447 }, { 1026416640, 1026420735 }, { 1026523136, 1026539519 }, { 1026555904, 1027080191 }, { 1029160960, 1029177343 }, { 1031798784, 1035993087 }, { 1038614528, 1039007743 }, { 1039138816, 1039400959 }, { 1040387328, 1040387583 }, { 1040392704, 1040392959 }, { 1040396288, 1040396543 }, { 1040398848, 1040399103 }, { 1040400128, 1040400383 }, { 1040547840, 1040580607 }, { 1040994304, 1040994559 }, { 1041244160, 1041252351 }, { 1041260544, 1041268735 }, { 1041858848, 1041859071 }, { 1042300928, 1042304511 }, { 1042304768, 1042309119 }, { 1042350080, 1042415615 }, { 1044185088, 1044193279 }, { 1044332544, 1044348927 }, { 1044381696, 1044389887 }, { 1044404744, 1044404991 }, { 1044405896, 1044406015 }, { 1044665600, 1044665855 }, { 1044676608, 1044684799 }, { 1044709376, 1044717567 }, { 1045161570, 1045161727 }, { 1045163274, 1045163519 }, { 1045168128, 1045190655 }, { 1045191680, 1045193727 }, { 1045194752, 1045197055 }, { 1045197312, 1045205503 }, { 1045206016, 1045207295 }, { 1045207552, 1045231615 }, { 1045231872, 1045232127 }, { 1045232640, 1045232895 }, { 1045233152, 1045233663 }, { 1045307392, 1045315583 }, { 1045319680, 1045323775 }, { 1045716992, 1045725183 }, { 1046069248, 1046073343 }, { 1046074368, 1046085631 }, { 1047068672, 1047085055 }, { 1047101440, 1047102751 }, { 1047102976, 1047105119 }, { 1047105280, 1047107095 }, { 1047107328, 1047109631 }, { 1047151104, 1047151359 }, { 1047151872, 1047152127 }, { 1047153664, 1047153919 }, { 1047156224, 1047156479 }, { 1047158784, 1047166975 }, { 1047330816, 1047339007 }, { 1047371776, 1047379967 }, { 1047552000, 1047560191 }, { 1047601152, 1047625727 }, { 1047726336, 1047726591 }, { 1047770368, 1047770622 }, { 1047871488, 1047887871 }, { 1047920640, 1047986175 }, { 1048195072, 1048197119 }, { 1048205312, 1048209407 }, { 1048215552, 1048217599 }, { 1048217856, 1048218367 }, { 1048218624, 1048221695 }, { 1048227840, 1048230143 }, { 1048231936, 1048233983 }, { 1048236032, 1048238079 }, { 1048244224, 1048246271 }, { 1048600576, 1048602111 }, { 1048602624, 1048603135 }, { 1048603392, 1048603647 }, { 1048608256, 1048608511 }, { 1048916992, 1048918015 }, { 1048918528, 1048918783 }, { 1048919040, 1048920063 }, { 1048944640, 1048952831 }, { 1049419776, 1049422911 }, { 1049423104, 1049424383 }, { 1049424640, 1049424983 }, { 1049425152, 1049427967 }, { 1049444352, 1049446431 }, { 1049446656, 1049448391 }, { 1049448448, 1049460735 }, { 1049886720, 1049894911 }, { 1049919488, 1049927679 }, { 1049944064, 1049952255 }, { 1050157056, 1050173439 }, { 1050198016, 1050206207 }, { 1050664016, 1050664191 }, { 1051000832, 1051017215 }, { 1051254784, 1051262975 }, { 1051557888, 1051566079 }, { 1051721728, 1051729919 }, { 1051795456, 1051803647 }, { 1052057600, 1052065791 }, { 1052116992, 1052119039 }, { 1052121088, 1052123135 }, { 1052127232, 1052129279 }, { 1052133376, 1052135423 }, { 1052137472, 1052139519 }, { 1052147712, 1052151807 }, { 1052154880, 1052155903 }, { 1052164096, 1052168191 }, { 1052180480, 1052213247 }, { 1052778496, 1052786687 }, { 1052805120, 1052806143 }, { 1052827648, 1052835839 }, { 1053564928, 1053565183 }, { 1053565440, 1053565695 }, { 1053565952, 1053566207 }, { 1053566464, 1053566719 }, { 1053567232, 1053567487 }, { 1053570048, 1053570303 }, { 1053663232, 1053671423 }, { 1054146560, 1054179327 }, { 1054453760, 1054457855 }, { 1054613504, 1054621695 }, { 1054936752, 1054936831 }, { 1055326208, 1055334399 }, { 1055367168, 1055375359 }, { 1055466240, 1055466495 }, { 1055467264, 1055467519 }, { 1055468032, 1055470591 }, { 1055471616, 1055471871 }, { 1055472640, 1055472895 }, { 1055522816, 1055588351 }, { 1056251904, 1056260095 }, { 1056538624, 1056546815 }, { 1063289952, 1063290111 }, { 1066553096, 1066553343 }, { 1066828208, 1066828287 }, { 1067617792, 1067618047 }, { 1071193152, 1071193311 }, { 1071309104, 1071309231 }, { 1076191744, 1076191999 }, { 1076875564, 1076875775 }, { 1078946352, 1078946431 }, { 1082822656, 1082822759 }, { 1087518490, 1087518719 }, { 1089878784, 1089879039 }, { 1105566720, 1105567231 }, { 1111938640, 1111938815 }, { 1113217536, 1113218259 }, { 1113218262, 1113218559 }, { 1113218816, 1113219327 }, { 1113222144, 1113222655 }, { 1114045312, 1114045439 }, { 1114046208, 1114046463 }, { 1117826112, 1117826175 }, { 1123801088, 1123801343 }, { 1125112704, 1125112831 }, { 1137152256, 1137152511 }, { 1137983848, 1137983999 }, { 1138252800, 1138253823 }, { 1145333192, 1145333247 }, { 1146028032, 1146044415 }, { 1152083456, 1152083713 }, { 1158726147, 1158726399 }, { 1163222272, 1163222527 }, { 1169062144, 1169062399 }, { 1169101488, 1169101551 }, { 1170443712, 1170443759 }, { 1172750336, 1172766719 }, { 1172799488, 1172815871 }, { 1173012480, 1173028863 }, { 1173061632, 1173078015 }, { 1179953480, 1179953487 }, { 1199816704, 1199849471 }, { 1200111616, 1200127999 }, { 1200160768, 1200177151 }, { 1208517504, 1208517567 }, { 1208519168, 1208519183 }, { 1208524288, 1208524543 }, { 1208525312, 1208525335 }, { 1208526336, 1208526447 }, { 1208526936, 1208527103 }, { 1208529426, 1208529594 }, { 1208529962, 1208530126 }, { 1208531974, 1208532111 }, { 1209271454, 1209271463 }, { 1209271884, 1209271887 }, { 1209276584, 1209276663 }, { 1209279584, 1209279743 }, { 1209280184, 1209280255 }, { 1209281320, 1209281535 }, { 1209282688, 1209282815 }, { 1209863168, 1209863423 }, { 1217192128, 1217192191 }, { 1218703360, 1218703871 }, { 1218705408, 1218706431 }, { 1247160576, 1247160831 }, { 1247485240, 1247485439 }, { 1249322496, 1249322751 }, { 1249709568, 1249709823 }, { 1249747712, 1249747967 }, { 1266617824, 1266617855 }, { 1287611136, 1287611391 }, { 1294073856, 1294204927 }, { 1294303232, 1294335999 }, { 1294401536, 1294434303 }, { 1294467072, 1294499839 }, { 1294532608, 1294598143 }, { 1294696448, 1294729215 }, { 1294827520, 1294860287 }, { 1295122432, 1295253503 }, { 1296203776, 1296236543 }, { 1296585472, 1296585727 }, { 1296585984, 1296586495 }, { 1296594944, 1296596991 }, { 1296599040, 1296601087 }, { 1296625664, 1296629759 }, { 1296635904, 1296637951 }, { 1296642048, 1296644095 }, { 1296646144, 1296647935 }, { 1296652288, 1296654335 }, { 1296664576, 1296666623 }, { 1296689152, 1296691199 }, { 1296697344, 1296699391 }, { 1296701440, 1296703487 }, { 1296713728, 1296715775 }, { 1296740352, 1296740863 }, { 1296741120, 1296744447 }, { 1296760832, 1296764927 }, { 1296793600, 1296795647 }, { 1296799744, 1296801791 }, { 1296803840, 1296805887 }, { 1297055744, 1297072127 }, { 1297155328, 1297155583 }, { 1297219584, 1297285375 }, { 1297285632, 1297286143 }, { 1297287168, 1297288191 }, { 1297289216, 1297290239 }, { 1297298432, 1297299455 }, { 1297303552, 1297304575 }, { 1297305600, 1297306879 }, { 1297308672, 1297309695 }, { 1297315328, 1297315583 }, { 1297323008, 1297323775 }, { 1297337344, 1297338367 }, { 1297563648, 1297565695 }, { 1297567744, 1297569791 }, { 1297571840, 1297573887 }, { 1297575936, 1297577983 }, { 1297579008, 1297579263 }, { 1297590272, 1297592319 }, { 1297598464, 1297602559 }, { 1297612800, 1297614079 }, { 1297614288, 1297615103 }, { 1297615360, 1297618943 }, { 1297619200, 1297624575 }, { 1297625344, 1297625727 }, { 1297626112, 1297627263 }, { 1297627456, 1297629183 }, { 1297825792, 1297835519 }, { 1297836032, 1297842175 }, { 1297858560, 1297860607 }, { 1297866752, 1297868799 }, { 1297965056, 1297973247 }, { 1298006016, 1298006783 }, { 1298017024, 1298017279 }, { 1298030592, 1298038783 }, { 1298046976, 1298063359 }, { 1298073600, 1298075647 }, { 1298076672, 1298077695 }, { 1298094080, 1298096127 }, { 1298104320, 1298106367 }, { 1298122752, 1298124799 }, { 1298759680, 1298776063 }, { 1298792448, 1298825215 }, { 1298841600, 1298857983 }, { 1298939904, 1298956287 }, { 1298972672, 1298989055 }, { 1299005696, 1299005951 }, { 1299010816, 1299011071 }, { 1299011328, 1299011583 }, { 1299724288, 1299725311 }, { 1299779072, 1299779327 }, { 1299783680, 1299791871 }, { 1299955712, 1299972095 }, { 1306271744, 1306279935 }, { 1306296320, 1306312703 }, { 1306316032, 1306316287 }, { 1306316800, 1306317823 }, { 1306318848, 1306320895 }, { 1306361856, 1306370047 }, { 1306378240, 1306386431 }, { 1306402816, 1306411007 }, { 1306419200, 1306427391 }, { 1306476544, 1306492927 }, { 1307049984, 1307066367 }, { 1307082752, 1307092991 }, { 1307097088, 1307099135 }, { 1307115520, 1307123711 }, { 1307156480, 1307172863 }, { 1307181056, 1307189247 }, { 1307230208, 1307238399 }, { 1307295744, 1307303935 }, { 1307320320, 1307336703 }, { 1307344896, 1307353087 }, { 1307369472, 1307377663 }, { 1307435520, 1307435775 }, { 1307436800, 1307437055 }, { 1307467776, 1307469823 }, { 1307475968, 1307484159 }, { 1307500544, 1307508735 }, { 1307557888, 1307574271 }, { 1307611136, 1307619327 }, { 1307643904, 1307652095 }, { 1307676672, 1307680767 }, { 1307701248, 1307709439 }, { 1307729920, 1307734015 }, { 1307770880, 1307774975 }, { 1307791360, 1307792383 }, { 1307795456, 1307803647 }, { 1307832320, 1307836415 }, { 1307840512, 1307844607 }, { 1307852800, 1307856895 }, { 1307877376, 1307881471 }, { 1307889664, 1307893759 }, { 1307930624, 1307934719 }, { 1307942912, 1307947007 }, { 1307951104, 1307959295 }, { 1307992064, 1307996159 }, { 1308004352, 1308006399 }, { 1308007424, 1308008447 }, { 1308024832, 1308028927 }, { 1308030464, 1308030719 }, { 1308030976, 1308033023 }, { 1308041216, 1308041471 }, { 1308041728, 1308041983 }, { 1308042240, 1308042495 }, { 1308042752, 1308044031 }, { 1308044288, 1308045055 }, { 1308045312, 1308045567 }, { 1308045824, 1308046591 }, { 1308046848, 1308047103 }, { 1308047360, 1308048127 }, { 1308048384, 1308048639 }, { 1308048896, 1308049407 }, { 1308065792, 1308069887 }, { 1308073984, 1308078079 }, { 1308080128, 1308082175 }, { 1308086272, 1308088319 }, { 1308092416, 1308096511 }, { 1310195712, 1310197759 }, { 1310201856, 1310203903 }, { 1310205952, 1310207999 }, { 1310210048, 1310212095 }, { 1310219264, 1310220287 }, { 1310221312, 1310222335 }, { 1310234624, 1310236671 }, { 1310240768, 1310242815 }, { 1310251008, 1310255103 }, { 1310277632, 1310310399 }, { 1310523392, 1310556159 }, { 1310638080, 1310656511 }, { 1310658560, 1310660607 }, { 1310672896, 1310674943 }, { 1310679040, 1310681087 }, { 1310695424, 1310695935 }, { 1310708224, 1310708479 }, { 1310709760, 1310711807 }, { 1310715904, 1310717951 }, { 1310982144, 1311113215 }, { 1311250432, 1311252479 }, { 1311264768, 1311266815 }, { 1311273984, 1311275007 }, { 1311276688, 1311276799 }, { 1311291392, 1311293439 }, { 1311299584, 1311301631 }, { 1311318016, 1311320063 }, { 1311332352, 1311337215 }, { 1311337472, 1311337727 }, { 1311337984, 1311338495 }, { 1311354880, 1311356927 }, { 1311358976, 1311361023 }, { 1313931264, 1313996799 }, { 1314193408, 1314258943 }, { 1315569664, 1315700735 }, { 1315717120, 1315725311 }, { 1315749888, 1315753983 }, { 1315770832, 1315770855 }, { 1315771496, 1315771647 }, { 1315773536, 1315773687 }, { 1315774128, 1315774207 }, { 1315774464, 1315778559 }, { 1315794944, 1315803135 }, { 1315844096, 1315848191 }, { 1315868672, 1315872767 }, { 1315893248, 1315897343 }, { 1315917824, 1315918847 }, { 1315920896, 1315921919 }, { 1315934208, 1315938303 }, { 1315958784, 1315962879 }, { 1317306368, 1317339135 }, { 1317584896, 1317585919 }, { 1317588992, 1317599231 }, { 1317627904, 1317629951 }, { 1317699584, 1317715967 }, { 1317748736, 1317765119 }, { 1317781504, 1317814271 }, { 1317818368, 1317818623 }, { 1317847040, 1317854975 }, { 1317855232, 1317860351 }, { 1317861376, 1317862399 }, { 1317862656, 1317863423 }, { 1317985280, 1317986303 }, { 1317988352, 1317990399 }, { 1318649856, 1318658047 }, { 1318682624, 1318686463 }, { 1318686720, 1318690815 }, { 1318821888, 1318838271 }, { 1318903808, 1318911999 }, { 1318969344, 1318977535 }, { 1319026688, 1319034879 }, { 1319100416, 1319108607 }, { 1331824640, 1331826687 }, { 1331845120, 1331847167 }, { 1331857408, 1331859455 }, { 1331869696, 1331870719 }, { 1331873792, 1331877887 }, { 1331886080, 1331888127 }, { 1331892224, 1331894271 }, { 1331900416, 1331902463 }, { 1331914752, 1331916799 }, { 1331943424, 1331945471 }, { 1331949568, 1331951615 }, { 1332215808, 1332216063 }, { 1332216320, 1332346879 }, { 1332613376, 1332613631 }, { 1332625408, 1332629503 }, { 1332657152, 1332658175 }, { 1332666880, 1332667135 }, { 1332670464, 1332740095 }, { 1333264384, 1333297151 }, { 1333428224, 1333460991 }, { 1333657600, 1333690367 }, { 1334075392, 1334083583 }, { 1334132736, 1334141951 }, { 1334142976, 1334143999 }, { 1334145024, 1334147071 }, { 1334148864, 1334161407 }, { 1334161920, 1334162175 }, { 1334162432, 1334163455 }, { 1334181888, 1334190079 }, { 1334198272, 1334206463 }, { 1334231040, 1334239231 }, { 1334263808, 1334271999 }, { 1334304768, 1334312959 }, { 1334345728, 1334378495 }, { 1334411264, 1334412543 }, { 1334412800, 1334422015 }, { 1334422528, 1334423551 }, { 1334424576, 1334444031 }, { 1334542336, 1334575103 }, { 1334579200, 1334583295 }, { 1334591488, 1334595583 }, { 1334599680, 1334603775 }, { 1334636544, 1334640639 }, { 1334652928, 1334661119 }, { 1334693888, 1334697983 }, { 1334710272, 1334714367 }, { 1334726656, 1334729991 }, { 1334730580, 1334734847 }, { 1334747136, 1334751231 }, { 1334771712, 1334775807 }, { 1334776576, 1334776831 }, { 1334777856, 1334779903 }, { 1334788096, 1334792191 }, { 1334829056, 1334833151 }, { 1336147968, 1336279039 }, { 1336547328, 1336549375 }, { 1336576000, 1336578047 }, { 1336580096, 1336584191 }, { 1336608768, 1336610815 }, { 1336635392, 1336637439 }, { 1336649728, 1336651775 }, { 1336659968, 1336662015 }, { 1336672256, 1336705023 }, { 1336754176, 1336770559 }, { 1336806400, 1336807423 }, { 1336811520, 1336827903 }, { 1336850432, 1336852479 }, { 1336868864, 1336885247 }, { 1346375680, 1346379775 }, { 1346396160, 1346398343 }, { 1346398464, 1346398975 }, { 1346399232, 1346400255 }, { 1346412544, 1346416639 }, { 1346441216, 1346445311 }, { 1346519040, 1346520831 }, { 1346521088, 1346523391 }, { 1346523904, 1346524415 }, { 1346524672, 1346524927 }, { 1346525184, 1346527231 }, { 1346539520, 1346543615 }, { 1346578432, 1346579455 }, { 1346580480, 1346584575 }, { 1346621440, 1346625535 }, { 1346629632, 1346637823 }, { 1346650112, 1346654207 }, { 1346671616, 1346671871 }, { 1346672128, 1346672383 }, { 1346673664, 1346673919 }, { 1346695168, 1346699263 }, { 1346736128, 1346740223 }, { 1346744320, 1346748415 }, { 1346789376, 1346793471 }, { 1346822144, 1346826239 }, { 1346870272, 1346870527 }, { 1346871296, 1346879487 }, { 1346883584, 1346887679 }, { 1346891776, 1346895871 }, { 1346899968, 1346900991 }, { 1346902016, 1346904063 }, { 1346924544, 1346928639 }, { 1346949120, 1346957311 }, { 1346965504, 1346969599 }, { 1346977792, 1346985983 }, { 1347002368, 1347006463 }, { 1347010560, 1347014655 }, { 1347112960, 1347117055 }, { 1347125248, 1347129343 }, { 1347167232, 1347168255 }, { 1347168256, 1347169279 }, { 1347169792, 1347170047 }, { 1347173632, 1347173887 }, { 1347174144, 1347174399 }, { 1347182592, 1347186687 }, { 1347190784, 1347194879 }, { 1347203072, 1347207167 }, { 1347215360, 1347223551 }, { 1347264512, 1347268607 }, { 1347313664, 1347321855 }, { 1347338240, 1347342335 }, { 1347350528, 1347354623 }, { 1347371008, 1347375103 }, { 1347399680, 1347403775 }, { 1347416064, 1347420159 }, { 1347444736, 1347452927 }, { 1347469312, 1347473407 }, { 1347538944, 1347543039 }, { 1347559424, 1347567615 }, { 1347571712, 1347575807 }, { 1347592192, 1347600383 }, { 1347665920, 1347670015 }, { 1347674112, 1347682303 }, { 1347710976, 1347715071 }, { 1347784704, 1347788799 }, { 1347792896, 1347796991 }, { 1347809280, 1347813375 }, { 1347903488, 1347907583 }, { 1347915776, 1347919871 }, { 1347928064, 1347932159 }, { 1347956736, 1347960831 }, { 1348009984, 1348014079 }, { 1348042752, 1348050943 }, { 1348059136, 1348063231 }, { 1348091904, 1348095999 }, { 1348104192, 1348108287 }, { 1348120576, 1348124671 }, { 1348136960, 1348141055 }, { 1348145152, 1348149247 }, { 1348190208, 1348194303 }, { 1348194560, 1348195839 }, { 1348206592, 1348218879 }, { 1348231168, 1348235263 }, { 1348247552, 1348251647 }, { 1348259584, 1348263935 }, { 1348284416, 1348288511 }, { 1348296704, 1348300799 }, { 1348317184, 1348321279 }, { 1348359168, 1348360191 }, { 1348409088, 1348409343 }, { 1348411392, 1348415487 }, { 1349763072, 1349771263 }, { 1357339648, 1357339903 }, { 1357371904, 1357372159 }, { 1357512704, 1357545471 }, { 1357709312, 1357742079 }, { 1357876864, 1357876991 }, { 1357891840, 1357892095 }, { 1357914112, 1357922303 }, { 1357931520, 1357931775 }, { 1357932032, 1357932287 }, { 1357934080, 1357934335 }, { 1357935104, 1357935359 }, { 1357959168, 1357963263 }, { 1357967360, 1357971455 }, { 1358049280, 1358065663 }, { 1358102528, 1358106623 }, { 1358118912, 1358123007 }, { 1358135296, 1358139391 }, { 1358176256, 1358180351 }, { 1358225408, 1358229503 }, { 1358262272, 1358263591 }, { 1358263808, 1358266367 }, { 1358295040, 1358299135 }, { 1358303232, 1358306303 }, { 1358315520, 1358323711 }, { 1358352384, 1358356479 }, { 1358360576, 1358364671 }, { 1358372864, 1358376959 }, { 1358389248, 1358397439 }, { 1358409728, 1358413823 }, { 1358442496, 1358446591 }, { 1358450688, 1358454783 }, { 1358467072, 1358471167 }, { 1358528768, 1358529023 }, { 1358529280, 1358529535 }, { 1358530304, 1358530815 }, { 1358532608, 1358534655 }, { 1358540800, 1358548991 }, { 1358577664, 1358585855 }, { 1358602240, 1358610431 }, { 1358614528, 1358622719 }, { 1358639104, 1358643199 }, { 1358655488, 1358667775 }, { 1358684160, 1358688255 }, { 1358696448, 1358700543 }, { 1358725120, 1358733311 }, { 1358757888, 1358766079 }, { 1358815232, 1358819327 }, { 1358827520, 1358831615 }, { 1358835712, 1358839807 }, { 1358848000, 1358856191 }, { 1358893056, 1358897151 }, { 1358909440, 1358913535 }, { 1358921728, 1358929919 }, { 1358934016, 1358938111 }, { 1359052800, 1359101951 }, { 1359183872, 1359200255 }, { 1359265792, 1359282175 }, { 1359298560, 1359314943 }, { 1359544320, 1359577087 }, { 1359806464, 1359839231 }, { 1360023552, 1360027647 }, { 1360039168, 1360039935 }, { 1360056320, 1360057343 }, { 1360068608, 1360072703 }, { 1360103424, 1360103679 }, { 1360105472, 1360109567 }, { 1360162816, 1360175103 }, { 1360216064, 1360224255 }, { 1360232448, 1360236543 }, { 1360266568, 1360266639 }, { 1360289792, 1360293887 }, { 1360306176, 1360310271 }, { 1360314368, 1360318463 }, { 1360396288, 1360400383 }, { 1360407552, 1360407807 }, { 1360408064, 1360408319 }, { 1360408576, 1360412671 }, { 1360445440, 1360451583 }, { 1360453184, 1360453375 }, { 1360461824, 1360465919 }, { 1360486400, 1360494591 }, { 1360498688, 1360515071 }, { 1360547840, 1360551935 }, { 1360556032, 1360564223 }, { 1360572416, 1360576511 }, { 1360592896, 1360596991 }, { 1360605184, 1360610303 }, { 1360610816, 1360611071 }, { 1360612352, 1360613375 }, { 1360678912, 1360683007 }, { 1360691200, 1360698367 }, { 1360698624, 1360698879 }, { 1360703488, 1360707583 }, { 1360736256, 1360740351 }, { 1360760832, 1360764927 }, { 1360785408, 1360788255 }, { 1360788480, 1360790527 }, { 1360792832, 1360793087 }, { 1360830464, 1360838655 }, { 1360842752, 1360846847 }, { 1360851968, 1360852991 }, { 1360883712, 1360891903 }, { 1360932864, 1360936959 }, { 1360949248, 1360953343 }, { 1360965632, 1360977919 }, { 1363410944, 1363411967 }, { 1363415040, 1363419135 }, { 1363421184, 1363425791 }, { 1363451904, 1363460095 }, { 1363542016, 1363557375 }, { 1363558400, 1363608063 }, { 1363640320, 1363656703 }, { 1363665920, 1363673087 }, { 1364742144, 1364746239 }, { 1364750336, 1364754431 }, { 1364774912, 1364779007 }, { 1364803584, 1364809727 }, { 1364815872, 1364819967 }, { 1364832256, 1364836351 }, { 1364852736, 1364856831 }, { 1364898816, 1364899839 }, { 1364905984, 1364910079 }, { 1364926464, 1364934655 }, { 1364966656, 1364966911 }, { 1365118976, 1365127167 }, { 1365147648, 1365155839 }, { 1365184512, 1365192703 }, { 1365213184, 1365217279 }, { 1365233664, 1365237759 }, { 1369509888, 1369518079 }, { 1369521920, 1369522175 }, { 1369530880, 1369531391 }, { 1369534976, 1369535231 }, { 1369535488, 1369538559 }, { 1369559040, 1369563135 }, { 1369571328, 1369587711 }, { 1369595904, 1369604095 }, { 1369640960, 1369655295 }, { 1369657344, 1369659391 }, { 1369661440, 1369665535 }, { 1369669632, 1369675775 }, { 1369677824, 1369686015 }, { 1369694208, 1369702399 }, { 1370298368, 1370298623 }, { 1370488832, 1370563967 }, { 1370564096, 1370619903 }, { 1371734016, 1371799551 }, { 1372061696, 1372069887 }, { 1372082176, 1372086271 }, { 1372090368, 1372094463 }, { 1372102144, 1372102655 }, { 1372114944, 1372119039 }, { 1372123136, 1372127231 }, { 1372131328, 1372135423 }, { 1372143616, 1372147711 }, { 1372188672, 1372192767 }, { 1372782592, 1372791807 }, { 1372792064, 1372805111 }, { 1372805120, 1372815359 }, { 1373503488, 1373569023 }, { 1382072320, 1382088703 }, { 1382138368, 1382138879 }, { 1382139392, 1382139647 }, { 1382140160, 1382140671 }, { 1382141696, 1382141951 }, { 1383071744, 1383088127 }, { 1383116800, 1383120895 }, { 1383202816, 1383211007 }, { 1383227392, 1383243775 }, { 1383260160, 1383268351 }, { 1383324928, 1383325695 }, { 1383333888, 1383350271 }, { 1383415808, 1383419903 }, { 1383420928, 1383423999 }, { 1383440384, 1383448575 }, { 1383497728, 1383499039 }, { 1383499264, 1383500799 }, { 1383501056, 1383502335 }, { 1383502848, 1383503615 }, { 1383503872, 1383505919 }, { 1383563264, 1383571455 }, { 1384742912, 1384759295 }, { 1384775680, 1384792063 }, { 1384923136, 1384939519 }, { 1384955904, 1384972287 }, { 1385070592, 1385081479 }, { 1385081600, 1385086975 }, { 1385185280, 1385193471 }, { 1385308160, 1385316351 }, { 1385381888, 1385398271 }, { 1385431040, 1385431551 }, { 1385432064, 1385439231 }, { 1385529344, 1385537535 }, { 1385545728, 1385553919 }, { 1385652224, 1385660415 }, { 1385676800, 1385684991 }, { 1385955328, 1386086399 }, { 1386348544, 1386414079 }, { 1387462656, 1387528191 }, { 1388412928, 1388421119 }, { 1388486656, 1388494847 }, { 1388503040, 1388519423 }, { 1388593152, 1388601343 }, { 1388609536, 1388617727 }, { 1388711168, 1388711423 }, { 1388748800, 1388756991 }, { 1388797952, 1388806143 }, { 1388838912, 1388871679 }, { 1389002752, 1389017087 }, { 1389017600, 1389035519 }, { 1389133824, 1389166591 }, { 1389379584, 1389395967 }, { 1389445120, 1389461503 }, { 1396973568, 1396981759 }, { 1397030912, 1397039103 }, { 1397047296, 1397063679 }, { 1397071872, 1397096447 }, { 1398865920, 1398867967 }, { 1398892544, 1398894591 }, { 1398895360, 1398895615 }, { 1399226368, 1399259135 }, { 1401427968, 1401430015 }, { 1401450496, 1401452543 }, { 1401478656, 1401478911 }, { 1401481216, 1401485311 }, { 1401499648, 1401501695 }, { 1401542656, 1401544703 }, { 1401566208, 1401566463 }, { 1401568000, 1401568255 }, { 1401651200, 1401667583 }, { 1401817088, 1401819135 }, { 1401856000, 1401858047 }, { 1401888768, 1401890815 }, { 1401892864, 1401894911 }, { 1401896960, 1401897983 }, { 1401919488, 1401921535 }, { 1401929728, 1401933823 }, { 1402093568, 1402109951 }, { 1402273792, 1402277631 }, { 1402277888, 1402290175 }, { 1402322944, 1402339327 }, { 1402397696, 1402398719 }, { 1402404864, 1402408959 }, { 1403412480, 1403420671 }, { 1403445248, 1403461631 }, { 1403469824, 1403486207 }, { 1403633664, 1403650047 }, { 1403731968, 1403748351 }, { 1403769856, 1403770879 }, { 1403774976, 1403775999 }, { 1403777024, 1403778047 }, { 1403781120, 1403796479 }, { 1403961344, 1403977727 }, { 1406730240, 1406746623 }, { 1406779392, 1406787583 }, { 1406861312, 1406869503 }, { 1406894080, 1406902271 }, { 1406918656, 1406926847 }, { 1406935040, 1406951423 }, { 1406967808, 1406975999 }, { 1406984192, 1407000575 }, { 1407041536, 1407049727 }, { 1407057920, 1407059471 }, { 1407059968, 1407066111 }, { 1407074304, 1407089663 }, { 1407107072, 1407115263 }, { 1407520256, 1407520511 }, { 1407523072, 1407523327 }, { 1407549440, 1407582207 }, { 1407844352, 1407909887 }, { 1408040960, 1408106495 }, { 1408172032, 1408237567 }, { 1408393216, 1408397311 }, { 1408401408, 1408434175 }, { 1408450560, 1408454655 }, { 1408663552, 1408696319 }, { 1410367488, 1410375679 }, { 1410400256, 1410408447 }, { 1410457600, 1410465791 }, { 1410490368, 1410498559 }, { 1410573696, 1410573823 }, { 1410678784, 1410686975 }, { 1410703360, 1410703615 }, { 1410703872, 1410705407 }, { 1410719744, 1410727935 }, { 1410760704, 1410766591 }, { 1410766848, 1410768895 }, { 1410777088, 1410785279 }, { 1410801664, 1410809855 }, { 1411776512, 1411777535 }, { 1411821568, 1411825663 }, { 1411874816, 1411876863 }, { 1411903488, 1411907583 }, { 1412038656, 1412071423 }, { 1412399104, 1412400127 }, { 1412400640, 1412405759 }, { 1412406272, 1412408831 }, { 1412409344, 1412412159 }, { 1412412672, 1412413439 }, { 1412413952, 1412415487 }, { 1412644864, 1412661247 }, { 1412677632, 1412685823 }, { 1412710400, 1412726783 }, { 1412808704, 1412825087 }, { 1412826112, 1412827135 }, { 1412829184, 1412830207 }, { 1412832256, 1412833279 }, { 1412834304, 1412834559 }, { 1412834816, 1412835327 }, { 1412836352, 1412837375 }, { 1412838400, 1412838911 }, { 1412839168, 1412839423 }, { 1412840192, 1412840447 }, { 1412874240, 1412890623 }, { 1422491648, 1422508031 }, { 1422520320, 1422524415 }, { 1422655488, 1422721023 }, { 1424648192, 1424649215 }, { 1424818176, 1424850943 }, { 1425145856, 1425147903 }, { 1425160192, 1425162239 }, { 1425195008, 1425211391 }, { 1425276928, 1425293311 }, { 1425436160, 1425436415 }, { 1425818624, 1425818879 }, { 1425819136, 1425819647 }, { 1425819904, 1425820671 }, { 1425833984, 1425841151 }, { 1425842176, 1425850367 }, { 1425883136, 1425899519 }, { 1425981440, 1425997823 }, { 1426634752, 1426635775 }, { 1426898944, 1426915327 }, { 1427062784, 1427095551 }, { 1427439616, 1427505151 }, { 1427728044, 1427728127 }, { 1427742976, 1427743231 }, { 1427749632, 1427749887 }, { 1427761408, 1427761663 }, { 1427800064, 1427832831 }, { 1427898368, 1427910655 }, { 1427913728, 1427914751 }, { 1427947520, 1427963903 }, { 1428078592, 1428094975 }, { 1428104192, 1428105215 }, { 1428123648, 1428126975 }, { 1428127232, 1428127743 }, { 1428140032, 1428142079 }, { 1431871488, 1431879679 }, { 1431920640, 1431928831 }, { 1431986176, 1431994367 }, { 1432051712, 1432056831 }, { 1432057344, 1432058623 }, { 1432058880, 1432059903 }, { 1432076288, 1432084479 }, { 1432092672, 1432100863 }, { 1432122368, 1432123135 }, { 1432166400, 1432174591 }, { 1432190976, 1432199167 }, { 1432223744, 1432240127 }, { 1432322048, 1432338431 }, { 1433411584, 1433419775 }, { 1433427968, 1433436159 }, { 1433477120, 1433485311 }, { 1433501696, 1433509887 }, { 1433518080, 1433526271 }, { 1433534464, 1433535695 }, { 1433535744, 1433542655 }, { 1433550848, 1433559039 }, { 1433575424, 1433583615 }, { 1433640960, 1433649151 }, { 1433651200, 1433652223 }, { 1433657344, 1433665535 }, { 1433690112, 1433698303 }, { 1433747456, 1433755647 }, { 1433790464, 1433791487 }, { 1433831424, 1433833471 }, { 1433841664, 1433843711 }, { 1433853952, 1433855999 }, { 1433880576, 1433882623 }, { 1433899008, 1433901055 }, { 1434687664, 1434687743 }, { 1435238400, 1435500543 }, { 1436430336, 1436432383 }, { 1436440576, 1436442623 }, { 1436465152, 1436465407 }, { 1436465664, 1436466943 }, { 1436479488, 1436481535 }, { 1436491776, 1436495871 }, { 1436513280, 1436513535 }, { 1436540928, 1436542975 }, { 1437335552, 1437597695 }, { 1438123776, 1438124031 }, { 1438572544, 1438572799 }, { 1438646272, 1438658559 }, { 1438659072, 1438662655 }, { 1438679040, 1438695423 }, { 1438728192, 1438731263 }, { 1438732288, 1438736383 }, { 1439055872, 1439072255 }, { 1439301632, 1439305727 }, { 1439323136, 1439323391 }, { 1439323904, 1439324159 }, { 1439334400, 1439338495 }, { 1439343616, 1439344639 }, { 1439346688, 1439350783 }, { 1439358976, 1439367167 }, { 1439494144, 1439494399 }, { 1439710976, 1439711231 }, { 1439716352, 1439716607 }, { 1439748096, 1439748351 }, { 1439751168, 1439752191 }, { 1439760384, 1439761151 }, { 1439762432, 1439763455 }, { 1439777792, 1439778815 }, { 1439787008, 1439788031 }, { 1439797248, 1439798271 }, { 1439814656, 1439815679 }, { 1441292288, 1441300479 }, { 1441349632, 1441357823 }, { 1441366016, 1441374207 }, { 1441398784, 1441415167 }, { 1441423360, 1441425919 }, { 1441427200, 1441431551 }, { 1441472512, 1441480703 }, { 1441484800, 1441485823 }, { 1441505280, 1441521663 }, { 1441529856, 1441538047 }, { 1441570816, 1441579007 }, { 1441603584, 1441611775 }, { 1441734656, 1441734911 }, { 1441735424, 1441735679 }, { 1441737216, 1441737727 }, { 1442381824, 1442447359 }, { 1442822144, 1442824191 }, { 1446904832, 1446905855 }, { 1446906880, 1446908927 }, { 1446916096, 1446917119 }, { 1446920192, 1446936575 }, { 1449525248, 1449590783 }, { 1449779968, 1449780223 }, { 1449813504, 1449813759 }, { 1450033152, 1450041343 }, { 1450049536, 1450057727 }, { 1450074112, 1450082303 }, { 1450090496, 1450102528 }, { 1450102784, 1450106879 }, { 1450115072, 1450123263 }, { 1464598528, 1464602623 }, { 1466400768, 1466433535 }, { 1467285504, 1467301887 }, { 1467318272, 1467334655 }, { 1467400192, 1467416575 }, { 1467473920, 1467482111 }, { 1467524864, 1467525119 }, { 1467533824, 1467534079 }, { 1474330624, 1474396159 }, { 1474461696, 1474494463 }, { 1474560000, 1474592767 }, { 1474658304, 1474685695 }, { 1474685952, 1474691071 }, { 1475086336, 1475092479 }, { 1475094528, 1475096575 }, { 1475104768, 1475106815 }, { 1475131392, 1475133439 }, { 1475160064, 1475162111 }, { 1475178496, 1475180543 }, { 1475184640, 1475186687 }, { 1475239936, 1475241983 }, { 1475274752, 1475276799 }, { 1475280896, 1475282943 }, { 1475287040, 1475291135 }, { 1475307520, 1475309567 }, { 1475317760, 1475319807 }, { 1475346432, 1475362815 }, { 1475379200, 1475395583 }, { 1475461120, 1475477503 }, { 1475493888, 1475510271 }, { 1475608576, 1475624959 }, { 1475706880, 1475726527 }, { 1475726592, 1475727231 }, { 1475730432, 1475730687 }, { 1475732480, 1475732991 }, { 1475734272, 1475734415 }, { 1475735808, 1475736063 }, { 1475736320, 1475736831 }, { 1475738112, 1475739647 }, { 1475838976, 1475839999 }, { 1475841024, 1475841791 }, { 1475842048, 1475843071 }, { 1475845120, 1475846143 }, { 1475928064, 1475949119 }, { 1475949312, 1475952639 }, { 1475985408, 1476009983 }, { 1476050944, 1476061439 }, { 1476061568, 1476062975 }, { 1476063232, 1476064255 }, { 1476064768, 1476067327 }, { 1476083712, 1476083967 }, { 1476084480, 1476085247 }, { 1476085760, 1476086271 }, { 1476086528, 1476087039 }, { 1476087296, 1476100095 }, { 1476108288, 1476116479 }, { 1476198400, 1476206591 }, { 1476247552, 1476255743 }, { 1476296704, 1476304895 }, { 1476316672, 1476317183 }, { 1476329472, 1476337663 }, { 1476386816, 1476395007 }, { 1481646080, 1481654271 }, { 1481711616, 1481719807 }, { 1481752576, 1481760767 }, { 1481785344, 1481793535 }, { 1481809920, 1481818111 }, { 1481883648, 1481891839 }, { 1481949184, 1481957375 }, { 1482006528, 1482022911 }, { 1482047488, 1482055679 }, { 1482080256, 1482088447 }, { 1482113024, 1482121215 }, { 1485242368, 1485246463 }, { 1485254656, 1485258751 }, { 1485262848, 1485266943 }, { 1485271040, 1485275135 }, { 1486061568, 1486094335 }, { 1486292992, 1486293247 }, { 1486313472, 1486315519 }, { 1486317568, 1486321663 }, { 1486338048, 1486340095 }, { 1486342144, 1486344191 }, { 1486354432, 1486356479 }, { 1489534976, 1489567743 }, { 1489600512, 1489633279 }, { 1489764352, 1489774591 }, { 1489776640, 1489797119 }, { 1489862656, 1489928191 }, { 1490157568, 1490166783 }, { 1490167808, 1490173951 }, { 1490337792, 1490354175 }, { 1490427904, 1490428927 }, { 1490478592, 1490479103 }, { 1490480128, 1490481151 }, { 1490518016, 1490534399 }, { 1490696192, 1490698495 }, { 1490699264, 1490701311 }, { 1490711040, 1490711295 }, { 1490736128, 1490738175 }, { 1490743296, 1490745343 }, { 1490745600, 1490745855 }, { 1490746112, 1490746367 }, { 1490883584, 1490884607 }, { 1490902528, 1490903039 }, { 1490912256, 1490912767 }, { 1494228992, 1494237183 }, { 1494245376, 1494253567 }, { 1494294528, 1494302719 }, { 1494384640, 1494392831 }, { 1494425856, 1494426111 }, { 1494458368, 1494474751 }, { 1494482944, 1494495231 }, { 1494496256, 1494499327 }, { 1494507520, 1494523903 }, { 1494581248, 1494589439 }, { 1494614016, 1494615295 }, { 1494615552, 1494616063 }, { 1494618112, 1494622207 }, { 1494626816, 1494627071 }, { 1494627328, 1494630399 }, { 1494646784, 1494663167 }, { 1494669312, 1494671359 }, { 1494675456, 1494695935 }, { 1494704128, 1494736895 }, { 1495048192, 1495050239 }, { 1495056384, 1495058431 }, { 1495070720, 1495072767 }, { 1495207936, 1495209983 }, { 1495212032, 1495214079 }, { 1495224320, 1495228415 }, { 1495230464, 1495234559 }, { 1495250944, 1495252991 }, { 1495260160, 1495261183 }, { 1496017152, 1496017663 }, { 1496106496, 1496106751 }, { 1500004352, 1500014079 }, { 1500014336, 1500015359 }, { 1500015616, 1500018943 }, { 1500019712, 1500020735 }, { 1500086272, 1500094463 }, { 1500162048, 1500164095 }, { 1500168192, 1500170239 }, { 1500170752, 1500171007 }, { 1500182528, 1500184575 }, { 1500187136, 1500187903 }, { 1500192768, 1500194815 }, { 1500205056, 1500207103 }, { 1500213248, 1500217343 }, { 1500217856, 1500218111 }, { 1500219392, 1500221439 }, { 1500233728, 1500237823 }, { 1500266496, 1500282879 }, { 1500315648, 1500332031 }, { 1500348416, 1500413951 }, { 1500479488, 1500495871 }, { 1500512256, 1500643327 }, { 1502707712, 1502715903 }, { 1502920704, 1502937087 }, { 1503100928, 1503117311 }, { 1503854592, 1503887359 }, { 1504247808, 1504313343 }, { 1504641024, 1504706559 }, { 1504837632, 1504968703 }, { 1505230848, 1505239039 }, { 1505288192, 1505296383 }, { 1505312768, 1505315839 }, { 1505316864, 1505318911 }, { 1505319424, 1505320959 }, { 1505419264, 1505427455 }, { 1505517568, 1505525759 }, { 1505533952, 1505542143 }, { 1505550336, 1505566719 }, { 1505583104, 1505607679 }, { 1505681408, 1505689599 }, { 1505747200, 1505747455 }, { 1505747712, 1505747967 }, { 1505748480, 1505748991 }, { 1505749248, 1505749503 }, { 1505749760, 1505755135 }, { 1506324480, 1506326527 }, { 1506541568, 1506574335 }, { 1506746368, 1506748927 }, { 1506754560, 1506758655 }, { 1506760704, 1506764799 }, { 1506793472, 1506795519 }, { 1506805760, 1506817023 }, { 1506820096, 1506835199 }, { 1506835456, 1506836479 }, { 1506838528, 1506838783 }, { 1506839040, 1506840063 }, { 1506840320, 1506849791 }, { 1506850816, 1506859519 }, { 1506860032, 1506865151 }, { 1507524608, 1507525631 }, { 1507659776, 1507663871 }, { 1507667968, 1507672063 }, { 1507704832, 1507708927 }, { 1507713024, 1507717119 }, { 1507753984, 1507775487 }, { 1507776512, 1507786751 }, { 1507787008, 1507787263 }, { 1507787776, 1507789567 }, { 1507789824, 1507790335 }, { 1507790848, 1507791359 }, { 1507791872, 1507792383 }, { 1507792896, 1507805439 }, { 1507806208, 1507809279 }, { 1507810560, 1507810815 }, { 1507811328, 1507815423 }, { 1507817472, 1507819519 }, { 1508392960, 1508442111 }, { 1508605952, 1508622335 }, { 1508704256, 1508720639 }, { 1508868096, 1508884479 }, { 1509442816, 1509443071 }, { 1509453824, 1509457919 }, { 1509470208, 1509478399 }, { 1509482496, 1509483263 }, { 1509483520, 1509486591 }, { 1509494784, 1509498879 }, { 1509502976, 1509503231 }, { 1509503488, 1509503743 }, { 1509504000, 1509505023 }, { 1509519360, 1509526015 }, { 1509527552, 1509535743 }, { 1509548032, 1509564415 }, { 1509593088, 1509601279 }, { 1509609472, 1509617663 }, { 1509638144, 1509642239 }, { 1509646336, 1509650431 }, { 1509658624, 1509666815 }, { 1509703680, 1509720063 }, { 1509752832, 1509769215 }, { 1509801984, 1509818367 }, { 1509867520, 1509883903 }, { 1509900288, 1509916671 }, { 1519779840, 1519910911 }, { 1520041984, 1520074751 }, { 1520140288, 1520173055 }, { 1520205824, 1520214527 }, { 1520215040, 1520215551 }, { 1520215808, 1520222719 }, { 1520222976, 1520271359 }, { 1522270208, 1522401279 }, { 1531707392, 1531969535 }, { 1532633088, 1532635135 }, { 1532675584, 1532676095 }, { 1532678400, 1532680191 }, { 1532681216, 1532681727 }, { 1533429760, 1533431807 }, { 1533450240, 1533452287 }, { 1533462528, 1533464575 }, { 1533466624, 1533468671 }, { 1533493248, 1533497343 }, { 1533504768, 1533505535 }, { 1533526016, 1533532159 }, { 1533534208, 1533536255 }, { 1533541376, 1533541631 }, { 1533541888, 1533542143 }, { 1533640704, 1533657087 }, { 1533657600, 1533659135 }, { 1533667328, 1533669375 }, { 1533702144, 1533704191 }, { 1533724672, 1533726719 }, { 1533727104, 1533727743 }, { 1533732864, 1533734911 }, { 1533739008, 1533757439 }, { 1533759488, 1533761535 }, { 1533763584, 1533768703 }, { 1533768960, 1533769727 }, { 1533771264, 1533771519 }, { 1533804544, 1533805567 }, { 1533810688, 1533812991 }, { 1533813248, 1533813759 }, { 1533815040, 1533818879 }, { 1533819904, 1533820927 }, { 1533847552, 1533849599 }, { 1533886464, 1533894655 }, { 1533902848, 1533911039 }, { 1533921280, 1533923327 }, { 1533927424, 1533929471 }, { 1534722048, 1534787583 }, { 1534791680, 1534795775 }, { 1534808064, 1534812159 }, { 1535382528, 1535383551 }, { 1535401984, 1535405055 }, { 1535429632, 1535429887 }, { 1535432704, 1535433727 }, { 1535435264, 1535435519 }, { 1535435776, 1535436799 }, { 1535442944, 1535451135 }, { 1535610880, 1535614975 }, { 1535627264, 1535631359 }, { 1536051200, 1536057343 }, { 1536067328, 1536067583 }, { 1536068096, 1536068351 }, { 1536068864, 1536069119 }, { 1536069632, 1536073727 }, { 1536098304, 1536114687 }, { 1536131072, 1536143359 }, { 1536196608, 1536212991 }, { 1536294912, 1536311295 }, { 1536360448, 1536376831 }, { 1536507904, 1536524287 }, { 1536543232, 1536543487 }, { 1536550912, 1536551167 }, { 1536553472, 1536553983 }, { 1536556800, 1536557055 }, { 1536630784, 1536634879 }, { 1536667648, 1536675839 }, { 1538844160, 1538847231 }, { 1538847744, 1538848255 }, { 1538848512, 1538850815 }, { 1538859008, 1538875391 }, { 1538908160, 1538916351 }, { 1538940928, 1538949119 }, { 1539088384, 1539096575 }, { 1539097600, 1539098623 }, { 1539101696, 1539102719 }, { 1539103744, 1539104767 }, { 1539105792, 1539106815 }, { 1539107840, 1539110399 }, { 1539125248, 1539127295 }, { 1539133440, 1539135487 }, { 1539141632, 1539143679 }, { 1539153920, 1539155967 }, { 1539172352, 1539176447 }, { 1539194880, 1539201023 }, { 1539207168, 1539211263 }, { 1539217472, 1539217663 }, { 1539218432, 1539218687 }, { 1539218944, 1539219199 }, { 1539223552, 1539225599 }, { 1539237888, 1539239935 }, { 1539290112, 1539290623 }, { 1539291136, 1539291391 }, { 1539291648, 1539292159 }, { 1539292416, 1539293183 }, { 1539301376, 1539309567 }, { 1539314688, 1539315711 }, { 1539324928, 1539325951 }, { 1539326976, 1539329023 }, { 1539330048, 1539330559 }, { 1539330816, 1539331071 }, { 1539333120, 1539335167 }, { 1539347456, 1539348479 }, { 1539352576, 1539354623 }, { 1539357696, 1539358719 }, { 1539372032, 1539373055 }, { 1539384320, 1539385343 }, { 1539397632, 1539398143 }, { 1539403264, 1539403775 }, { 1539410944, 1539411967 }, { 1539412992, 1539414015 }, { 1539418112, 1539419135 }, { 1539420160, 1539422207 }, { 1539429376, 1539434495 }, { 1539435520, 1539437567 }, { 1539441152, 1539441663 }, { 1539443200, 1539443455 }, { 1539443712, 1539444223 }, { 1539444736, 1539445247 }, { 1539455488, 1539455999 }, { 1539457024, 1539457535 }, { 1539469312, 1539469823 }, { 1539471360, 1539471871 }, { 1539478784, 1539479039 }, { 1539481600, 1539482367 }, { 1539482624, 1539483135 }, { 1539484672, 1539485695 }, { 1539487744, 1539488255 }, { 1539489280, 1539489791 }, { 1539493376, 1539493887 }, { 1539494912, 1539495423 }, { 1539498496, 1539499007 }, { 1539501568, 1539502079 }, { 1539503104, 1539504127 }, { 1539505152, 1539505663 }, { 1539510272, 1539510783 }, { 1539511296, 1539511807 }, { 1539513856, 1539514367 }, { 1539521536, 1539522047 }, { 1539531776, 1539532287 }, { 1539535360, 1539535871 }, { 1539537920, 1539540479 }, { 1539540992, 1539541503 }, { 1539544064, 1539544575 }, { 1539549696, 1539550207 }, { 1539551744, 1539552255 }, { 1539558400, 1539558911 }, { 1539559936, 1539560447 }, { 1539570944, 1539571199 }, { 1539572736, 1539573759 }, { 1539579904, 1539580927 }, { 1539590144, 1539591167 }, { 1539593216, 1539594239 }, { 1539606528, 1539607295 }, { 1539610624, 1539611647 }, { 1539632128, 1539633151 }, { 1539634176, 1539638271 }, { 1539639296, 1539640319 }, { 1539642368, 1539643391 }, { 1539650560, 1539651583 }, { 1539651840, 1539652095 }, { 1539653632, 1539654655 }, { 1539656704, 1539657727 }, { 1539661824, 1539662847 }, { 1539663872, 1539664895 }, { 1539665920, 1539666943 }, { 1539668992, 1539670015 }, { 1539671040, 1539672063 }, { 1539677440, 1539679231 }, { 1539681280, 1539684351 }, { 1539685376, 1539687423 }, { 1539689472, 1539690495 }, { 1539691520, 1539692543 }, { 1539706368, 1539706623 }, { 1539711232, 1539711487 }, { 1539712512, 1539713023 }, { 1539714560, 1539714815 }, { 1539716608, 1539716863 }, { 1539720192, 1539720703 }, { 1539720960, 1539721215 }, { 1539721984, 1539722239 }, { 1539724544, 1539724799 }, { 1539727872, 1539728127 }, { 1539729408, 1539729663 }, { 1539735296, 1539735551 }, { 1539736064, 1539736319 }, { 1539740928, 1539741183 }, { 1539741952, 1539742207 }, { 1539742464, 1539742719 }, { 1539747584, 1539747839 }, { 1539749888, 1539750143 }, { 1539756032, 1539756287 }, { 1539756544, 1539757567 }, { 1539757824, 1539758079 }, { 1539758592, 1539758847 }, { 1539759104, 1539759615 }, { 1539760384, 1539760639 }, { 1539761920, 1539762175 }, { 1539769344, 1539769599 }, { 1539770880, 1539771135 }, { 1539772416, 1539772671 }, { 1539774976, 1539775231 }, { 1539777024, 1539777279 }, { 1539780096, 1539780351 }, { 1539782144, 1539782399 }, { 1539784192, 1539784447 }, { 1539785472, 1539785727 }, { 1539788800, 1539789055 }, { 1539796992, 1539797247 }, { 1539797504, 1539798015 }, { 1539804928, 1539805183 }, { 1539806464, 1539806719 }, { 1539807488, 1539807743 }, { 1539808256, 1539808511 }, { 1539812096, 1539812351 }, { 1539812864, 1539813119 }, { 1539813888, 1539814143 }, { 1539816704, 1539816959 }, { 1539818496, 1539819007 }, { 1539819264, 1539819519 }, { 1539820800, 1539821055 }, { 1539825664, 1539825919 }, { 1539826944, 1539827199 }, { 1539827712, 1539827967 }, { 1539830784, 1539831039 }, { 1539832576, 1539832831 }, { 1539841024, 1539842047 }, { 1539845120, 1539846143 }, { 1539849728, 1539850239 }, { 1539855616, 1539856383 }, { 1539868672, 1539869695 }, { 1539871232, 1539871487 }, { 1539872000, 1539872511 }, { 1539875840, 1539876863 }, { 1539889152, 1539890175 }, { 1539891200, 1539893247 }, { 1539899392, 1539900415 }, { 1539901440, 1539902463 }, { 1539905536, 1539905791 }, { 1539906048, 1539906559 }, { 1539909632, 1539910655 }, { 1539911680, 1539913727 }, { 1539917824, 1539918847 }, { 1539920896, 1539921663 }, { 1539928064, 1539930111 }, { 1539946496, 1539947519 }, { 1539951616, 1539953663 }, { 1539957760, 1539958783 }, { 1539959808, 1539960831 }, { 1539962880, 1539964927 }, { 1539965952, 1539966463 }, { 1539968000, 1539972095 }, { 1539974144, 1539975167 }, { 1539976192, 1539977215 }, { 1539979264, 1539980287 }, { 1539982336, 1539983359 }, { 1539984384, 1539985407 }, { 1539986432, 1539987455 }, { 1539988480, 1539990527 }, { 1540000768, 1540001791 }, { 1540002816, 1540003839 }, { 1540006912, 1540007935 }, { 1540011008, 1540013055 }, { 1540015104, 1540016127 }, { 1540017152, 1540018175 }, { 1540020224, 1540022271 }, { 1540024320, 1540024575 }, { 1540024832, 1540025343 }, { 1540027392, 1540028415 }, { 1540029440, 1540031487 }, { 1540032512, 1540033535 }, { 1540039680, 1540040703 }, { 1540041728, 1540042751 }, { 1540046848, 1540047871 }, { 1540050944, 1540052991 }, { 1540057344, 1540057599 }, { 1540062208, 1540063231 }, { 1540069376, 1540070399 }, { 1540073472, 1540074495 }, { 1540075520, 1540077567 }, { 1540078592, 1540081663 }, { 1540083712, 1540084735 }, { 1540087808, 1540088575 }, { 1540089856, 1540092927 }, { 1540094976, 1540095999 }, { 1540100096, 1540103167 }, { 1540110336, 1540111359 }, { 1540113408, 1540114943 }, { 1540115200, 1540115455 }, { 1540120576, 1540124671 }, { 1540128768, 1540129791 }, { 1540130816, 1540131839 }, { 1540132864, 1540134911 }, { 1540137984, 1540139007 }, { 1540141056, 1540142335 }, { 1540142592, 1540144127 }, { 1540147200, 1540148223 }, { 1540154368, 1540156415 }, { 1540157440, 1540158463 }, { 1540160512, 1540162559 }, { 1540163584, 1540164607 }, { 1540167680, 1540168703 }, { 1540172800, 1540173823 }, { 1540174848, 1540175871 }, { 1540183040, 1540184063 }, { 1540192256, 1540193279 }, { 1540194304, 1540195327 }, { 1540198400, 1540199423 }, { 1540201728, 1540201983 }, { 1540202496, 1540205567 }, { 1540206592, 1540208639 }, { 1540209664, 1540210687 }, { 1540212736, 1540213759 }, { 1540214784, 1540215807 }, { 1540216832, 1540217855 }, { 1540218880, 1540219903 }, { 1540221952, 1540223999 }, { 1540226048, 1540227071 }, { 1540230144, 1540232191 }, { 1540232704, 1540233215 }, { 1540240896, 1540242431 }, { 1540242944, 1540243455 }, { 1540243968, 1540244735 }, { 1540245504, 1540246015 }, { 1540249600, 1540250111 }, { 1540250624, 1540251135 }, { 1540252672, 1540253183 }, { 1540256768, 1540257279 }, { 1540257792, 1540258303 }, { 1540259328, 1540259839 }, { 1540260352, 1540260863 }, { 1540264448, 1540265471 }, { 1540277248, 1540277759 }, { 1540281344, 1540281855 }, { 1540282368, 1540282879 }, { 1540283392, 1540284415 }, { 1540288512, 1540289535 }, { 1540290560, 1540291071 }, { 1540292096, 1540292607 }, { 1540293632, 1540294655 }, { 1540294912, 1540295167 }, { 1540298752, 1540299263 }, { 1540300288, 1540300799 }, { 1540302848, 1540303871 }, { 1540307456, 1540307967 }, { 1540311552, 1540313087 }, { 1540313600, 1540315135 }, { 1540317184, 1540318207 }, { 1540319744, 1540320767 }, { 1540321792, 1540322303 }, { 1540326400, 1540326911 }, { 1540327424, 1540327935 }, { 1540328448, 1540329471 }, { 1540329984, 1540330495 }, { 1540334848, 1540335103 }, { 1540336128, 1540336639 }, { 1540338688, 1540339199 }, { 1540353536, 1540354047 }, { 1540355584, 1540356351 }, { 1540357120, 1540357631 }, { 1540363264, 1540363519 }, { 1540364032, 1540364287 }, { 1540365568, 1540365823 }, { 1540366592, 1540366847 }, { 1540367104, 1540367359 }, { 1540368128, 1540368383 }, { 1540368896, 1540369407 }, { 1540379648, 1540379903 }, { 1540388608, 1540388863 }, { 1540389120, 1540389375 }, { 1540390400, 1540390655 }, { 1540391936, 1540392191 }, { 1540392448, 1540392703 }, { 1540396288, 1540396543 }, { 1540399360, 1540399615 }, { 1540400640, 1540400895 }, { 1540401920, 1540402175 }, { 1540404992, 1540405247 }, { 1540405504, 1540405759 }, { 1540406016, 1540406271 }, { 1540410624, 1540410879 }, { 1540411904, 1540412159 }, { 1540413440, 1540413695 }, { 1540417536, 1540417791 }, { 1540419072, 1540419327 }, { 1540421632, 1540422143 }, { 1540422912, 1540423423 }, { 1540425984, 1540426239 }, { 1540428032, 1540428287 }, { 1540437504, 1540437759 }, { 1540438784, 1540439039 }, { 1540440320, 1540440575 }, { 1540440832, 1540441087 }, { 1540441344, 1540441855 }, { 1540442112, 1540442367 }, { 1540443136, 1540443391 }, { 1540444160, 1540444415 }, { 1540445440, 1540445695 }, { 1540446976, 1540447231 }, { 1540447744, 1540447999 }, { 1540454144, 1540454399 }, { 1540454912, 1540455167 }, { 1540455424, 1540455679 }, { 1540456192, 1540457215 }, { 1540461312, 1540461823 }, { 1540479488, 1540479743 }, { 1540483328, 1540483583 }, { 1540489216, 1540491263 }, { 1540495360, 1540496383 }, { 1540500480, 1540501503 }, { 1540502528, 1540503551 }, { 1540510720, 1540511743 }, { 1540512768, 1540514815 }, { 1540515840, 1540516863 }, { 1540517888, 1540518911 }, { 1540519936, 1540520959 }, { 1540523008, 1540524031 }, { 1540527104, 1540528383 }, { 1540529152, 1540531199 }, { 1540532224, 1540533247 }, { 1540534272, 1540535295 }, { 1540536320, 1540537343 }, { 1540538368, 1540542463 }, { 1540544512, 1540545535 }, { 1540547584, 1540548607 }, { 1540553728, 1540554751 }, { 1540555264, 1540555519 }, { 1540556032, 1540556799 }, { 1540558848, 1540560895 }, { 1540561408, 1540562943 }, { 1540563968, 1540564991 }, { 1540566016, 1540567039 }, { 1540568064, 1540571135 }, { 1540574208, 1540576255 }, { 1540578304, 1540579327 }, { 1540581376, 1540582399 }, { 1540586496, 1540588543 }, { 1540590592, 1540593663 }, { 1540600832, 1540602879 }, { 1540603904, 1540604927 }, { 1540608000, 1540609023 }, { 1540610048, 1540611071 }, { 1540613120, 1540614143 }, { 1540615168, 1540616191 }, { 1540622080, 1540622335 }, { 1540632320, 1540632575 }, { 1540632832, 1540633599 }, { 1540634880, 1540635135 }, { 1540635648, 1540635903 }, { 1540636672, 1540637183 }, { 1540637696, 1540637951 }, { 1540641024, 1540641279 }, { 1540642816, 1540643071 }, { 1540645120, 1540645375 }, { 1540646656, 1540646911 }, { 1540650496, 1540650751 }, { 1540654336, 1540654591 }, { 1540655360, 1540655615 }, { 1540657664, 1540657919 }, { 1540658944, 1540659199 }, { 1540660736, 1540660991 }, { 1540664064, 1540664319 }, { 1540666112, 1540666367 }, { 1540670720, 1540671231 }, { 1540671744, 1540671999 }, { 1540675840, 1540676351 }, { 1540676608, 1540676863 }, { 1540678144, 1540678399 }, { 1540681472, 1540681727 }, { 1540687104, 1540687359 }, { 1540689408, 1540689663 }, { 1540691712, 1540691967 }, { 1540694784, 1540695039 }, { 1540695808, 1540696063 }, { 1540697088, 1540697343 }, { 1540698624, 1540699135 }, { 1540702976, 1540703231 }, { 1540708096, 1540708351 }, { 1540712448, 1540712703 }, { 1540713728, 1540713983 }, { 1540714752, 1540715263 }, { 1540715776, 1540716031 }, { 1540719104, 1540719359 }, { 1540721152, 1540721663 }, { 1540721920, 1540722431 }, { 1540722688, 1540722943 }, { 1540725504, 1540725759 }, { 1540726272, 1540726527 }, { 1540727552, 1540727807 }, { 1540728320, 1540728575 }, { 1540728832, 1540729343 }, { 1540732928, 1540733183 }, { 1540736000, 1540736255 }, { 1540747264, 1540747519 }, { 1540748032, 1540748543 }, { 1540749568, 1540749823 }, { 1540761600, 1540762111 }, { 1540765696, 1540766719 }, { 1540768768, 1540769791 }, { 1540770816, 1540771839 }, { 1540775936, 1540776959 }, { 1540781312, 1540783103 }, { 1540783616, 1540783871 }, { 1540787200, 1540789247 }, { 1540795392, 1540795647 }, { 1540796160, 1540796415 }, { 1540798464, 1540799487 }, { 1540801536, 1540802559 }, { 1540803584, 1540804607 }, { 1540805632, 1540806655 }, { 1540807680, 1540809727 }, { 1540812800, 1540813823 }, { 1540820992, 1540823039 }, { 1540824064, 1540825087 }, { 1540826112, 1540828159 }, { 1540832256, 1540833279 }, { 1540836352, 1540837375 }, { 1540838400, 1540840447 }, { 1540844544, 1540846591 }, { 1540847616, 1540848639 }, { 1540849664, 1540850687 }, { 1540852736, 1540853759 }, { 1540856064, 1540856319 }, { 1540859904, 1540861951 }, { 1540865024, 1540872191 }, { 1540873216, 1540875263 }, { 1540876288, 1540877311 }, { 1540879360, 1540882431 }, { 1540883200, 1540883455 }, { 1540894208, 1540894463 }, { 1540894720, 1540895487 }, { 1540896000, 1540896255 }, { 1540897536, 1540897791 }, { 1540899328, 1540899583 }, { 1540899840, 1540900351 }, { 1540900864, 1540901119 }, { 1540903168, 1540903423 }, { 1540907008, 1540907263 }, { 1540911616, 1540911871 }, { 1540913408, 1540913663 }, { 1540913920, 1540914175 }, { 1540914688, 1540914943 }, { 1540915456, 1540915967 }, { 1540920064, 1540920319 }, { 1540924416, 1540924671 }, { 1540925184, 1540925439 }, { 1540927232, 1540927487 }, { 1540930304, 1540930559 }, { 1540933120, 1540933375 }, { 1540934912, 1540935167 }, { 1540935680, 1540935935 }, { 1540936448, 1540936959 }, { 1540937984, 1540938239 }, { 1540943872, 1540944127 }, { 1540948480, 1540948991 }, { 1540950016, 1540951039 }, { 1540952064, 1540952575 }, { 1540953088, 1540953599 }, { 1540956672, 1540957183 }, { 1540958720, 1540959231 }, { 1540959744, 1540960255 }, { 1540960768, 1540961279 }, { 1540963840, 1540964351 }, { 1540965888, 1540966399 }, { 1540966912, 1540967423 }, { 1540967680, 1540967935 }, { 1540968448, 1540968959 }, { 1540974080, 1540974591 }, { 1540975616, 1540976639 }, { 1540979968, 1540980223 }, { 1540980992, 1540981247 }, { 1540982784, 1540983295 }, { 1540984576, 1540984831 }, { 1540987904, 1540988159 }, { 1540988672, 1540988927 }, { 1540989696, 1540989951 }, { 1540993536, 1540993791 }, { 1540994048, 1540994303 }, { 1540995072, 1540995327 }, { 1540996608, 1540996863 }, { 1540997632, 1540997887 }, { 1540998144, 1540998399 }, { 1540999680, 1540999935 }, { 1541002240, 1541002495 }, { 1541004288, 1541004543 }, { 1541006080, 1541006335 }, { 1541007616, 1541007871 }, { 1541015552, 1541016575 }, { 1541019648, 1541021695 }, { 1541023744, 1541024767 }, { 1541035008, 1541036031 }, { 1541037056, 1541038079 }, { 1541039104, 1541040127 }, { 1541041152, 1541044223 }, { 1541044736, 1541045247 }, { 1541046272, 1541051391 }, { 1541069824, 1541070847 }, { 1541071872, 1541072895 }, { 1541075968, 1541078015 }, { 1541080064, 1541081087 }, { 1541082112, 1541083135 }, { 1541084928, 1541086207 }, { 1541088256, 1541089279 }, { 1541091328, 1541092351 }, { 1541093376, 1541094399 }, { 1541095424, 1541096447 }, { 1541097472, 1541098495 }, { 1541101568, 1541102591 }, { 1541103616, 1541105663 }, { 1541110784, 1541111807 }, { 1541113856, 1541114879 }, { 1541116928, 1541117951 }, { 1541118976, 1541122047 }, { 1541124096, 1541125631 }, { 1541125888, 1541126143 }, { 1541127168, 1541129215 }, { 1541130240, 1541132287 }, { 1541136384, 1541139455 }, { 1541142528, 1541143551 }, { 1541144832, 1541145087 }, { 1541145856, 1541146111 }, { 1541147392, 1541147903 }, { 1541148672, 1541148927 }, { 1541152512, 1541152767 }, { 1541153024, 1541153279 }, { 1541154304, 1541154559 }, { 1541156352, 1541156607 }, { 1541159168, 1541159423 }, { 1541162240, 1541162495 }, { 1541164032, 1541164287 }, { 1541165056, 1541165567 }, { 1541166848, 1541167103 }, { 1541168128, 1541168639 }, { 1541172480, 1541172735 }, { 1541173248, 1541173503 }, { 1541175296, 1541175551 }, { 1541178624, 1541178879 }, { 1541179136, 1541179391 }, { 1541179648, 1541179903 }, { 1541181696, 1541182207 }, { 1541183488, 1541183743 }, { 1541184256, 1541184511 }, { 1541186304, 1541186559 }, { 1541187072, 1541187327 }, { 1541187840, 1541188351 }, { 1541190912, 1541191167 }, { 1541192704, 1541192959 }, { 1541195264, 1541195519 }, { 1541197312, 1541197567 }, { 1541198592, 1541198847 }, { 1541199616, 1541199871 }, { 1541200384, 1541201151 }, { 1541203200, 1541203455 }, { 1541204224, 1541204479 }, { 1541210112, 1541210623 }, { 1541214208, 1541215231 }, { 1541216256, 1541216767 }, { 1541217280, 1541218303 }, { 1541218816, 1541221375 }, { 1541222400, 1541222911 }, { 1541223424, 1541223935 }, { 1541224448, 1541224959 }, { 1541225472, 1541225983 }, { 1541227520, 1541227775 }, { 1541228032, 1541228543 }, { 1541233152, 1541233663 }, { 1541235200, 1541235455 }, { 1541236224, 1541236735 }, { 1541237760, 1541238271 }, { 1541245952, 1541246463 }, { 1541250048, 1541250559 }, { 1541251584, 1541252607 }, { 1541254656, 1541255679 }, { 1541256192, 1541256703 }, { 1541258240, 1541258751 }, { 1541259776, 1541260287 }, { 1541260800, 1541261823 }, { 1541272064, 1541272575 }, { 1541273088, 1541274111 }, { 1541282816, 1541283839 }, { 1541287936, 1541288959 }, { 1541306368, 1541307391 }, { 1541308416, 1541309439 }, { 1541315584, 1541316607 }, { 1541317632, 1541318655 }, { 1541328896, 1541329919 }, { 1541330944, 1541331967 }, { 1541334016, 1541335039 }, { 1541336320, 1541336575 }, { 1541337088, 1541338111 }, { 1541341440, 1541341695 }, { 1541345024, 1541345279 }, { 1541345792, 1541346047 }, { 1541347584, 1541347839 }, { 1541348352, 1541348607 }, { 1541349376, 1541349631 }, { 1541349888, 1541350143 }, { 1541350656, 1541350911 }, { 1541352448, 1541352703 }, { 1541353472, 1541353727 }, { 1541357312, 1541357567 }, { 1541358336, 1541358591 }, { 1541359104, 1541359359 }, { 1541360384, 1541360639 }, { 1541363968, 1541364479 }, { 1541364992, 1541365247 }, { 1541366272, 1541366527 }, { 1541367552, 1541367807 }, { 1541368064, 1541368319 }, { 1541368832, 1541369343 }, { 1541371392, 1541371647 }, { 1541371904, 1541372159 }, { 1541373952, 1541374207 }, { 1541376256, 1541376767 }, { 1541378048, 1541378303 }, { 1541380352, 1541380607 }, { 1541384704, 1541384959 }, { 1541386240, 1541386495 }, { 1541386752, 1541387007 }, { 1541387520, 1541387775 }, { 1541389312, 1541389567 }, { 1541390848, 1541391103 }, { 1541392128, 1541392383 }, { 1541396736, 1541396991 }, { 1541398528, 1541398783 }, { 1541399040, 1541399295 }, { 1541402368, 1541402623 }, { 1541403136, 1541403391 }, { 1541403648, 1541403903 }, { 1541404160, 1541404415 }, { 1541405440, 1541405951 }, { 1541406208, 1541406463 }, { 1541410304, 1541410815 }, { 1541411328, 1541411839 }, { 1541412352, 1541412863 }, { 1541414400, 1541415935 }, { 1541420032, 1541420543 }, { 1541422592, 1541423103 }, { 1541426176, 1541426687 }, { 1541427200, 1541428223 }, { 1541431808, 1541432319 }, { 1541432832, 1541433343 }, { 1541433856, 1541434367 }, { 1541438464, 1541439487 }, { 1541440000, 1541441023 }, { 1541441536, 1541442815 }, { 1541446144, 1541446655 }, { 1541447168, 1541447679 }, { 1541449216, 1541450239 }, { 1541453312, 1541453823 }, { 1541456384, 1541456895 }, { 1541458944, 1541460479 }, { 1541462528, 1541463039 }, { 1541465344, 1541465599 }, { 1541466112, 1541467135 }, { 1541477376, 1541478911 }, { 1541479168, 1541479423 }, { 1541482496, 1541483519 }, { 1541490688, 1541492735 }, { 1541497856, 1541498879 }, { 1541500928, 1541501951 }, { 1541504000, 1541504255 }, { 1541504512, 1541506047 }, { 1541510144, 1541512191 }, { 1541521408, 1541522431 }, { 1541525504, 1541528575 }, { 1541530624, 1541531647 }, { 1541532672, 1541533695 }, { 1541536768, 1541537791 }, { 1541540352, 1541541375 }, { 1541545472, 1541545983 }, { 1541550080, 1541550591 }, { 1541553152, 1541555199 }, { 1541556480, 1541556735 }, { 1541558272, 1541559295 }, { 1541561344, 1541562367 }, { 1541564416, 1541565439 }, { 1541567488, 1541567743 }, { 1541568512, 1541569535 }, { 1541570560, 1541573157 }, { 1541573632, 1541574655 }, { 1541575680, 1541577727 }, { 1541579008, 1541579263 }, { 1541579776, 1541580799 }, { 1541581568, 1541582847 }, { 1541583360, 1541583615 }, { 1541585152, 1541585663 }, { 1541585920, 1541586431 }, { 1541588992, 1541589247 }, { 1541590016, 1541590527 }, { 1541591040, 1541592063 }, { 1541594624, 1541595135 }, { 1541597696, 1541597951 }, { 1541601792, 1541602047 }, { 1541605376, 1541606911 }, { 1541607424, 1541608447 }, { 1541609216, 1541609471 }, { 1541610496, 1541611775 }, { 1541612032, 1541612543 }, { 1541614592, 1541615615 }, { 1541616128, 1541617407 }, { 1541620736, 1541620991 }, { 1541623552, 1541623807 }, { 1541626624, 1541627903 }, { 1541632000, 1541632511 }, { 1541638144, 1541638655 }, { 1541639168, 1541640191 }, { 1541641216, 1541641727 }, { 1541642240, 1541643263 }, { 1541644288, 1541645311 }, { 1541646336, 1541646847 }, { 1541647360, 1541648383 }, { 1541651456, 1541652479 }, { 1541653248, 1541653503 }, { 1541654016, 1541654271 }, { 1541657088, 1541657599 }, { 1541661696, 1541661951 }, { 1541665280, 1541666047 }, { 1541671424, 1541671679 }, { 1541675520, 1541676031 }, { 1541676544, 1541677055 }, { 1541679104, 1541679615 }, { 1541681152, 1541682175 }, { 1541682688, 1541683199 }, { 1541683456, 1541683711 }, { 1541684736, 1541686271 }, { 1541688320, 1541688831 }, { 1541693440, 1541694463 }, { 1541694976, 1541695487 }, { 1541698560, 1541699327 }, { 1541699584, 1541700095 }, { 1541700608, 1541700863 }, { 1541703424, 1541703679 }, { 1541706752, 1541707007 }, { 1541710080, 1541710335 }, { 1541714176, 1541716223 }, { 1541720064, 1541721087 }, { 1541721344, 1541721599 }, { 1541722112, 1541723135 }, { 1541725184, 1541727487 }, { 1541727744, 1541727999 }, { 1541729792, 1541730303 }, { 1541731840, 1541732351 }, { 1541732864, 1541733119 }, { 1541734912, 1541735167 }, { 1541736448, 1541737471 }, { 1541746688, 1541746943 }, { 1541747200, 1541747711 }, { 1541749504, 1541749759 }, { 1541753344, 1541753855 }, { 1541757440, 1541757951 }, { 1541758976, 1541760255 }, { 1541762048, 1541763583 }, { 1541764096, 1541765119 }, { 1541771776, 1541772031 }, { 1541773824, 1541774079 }, { 1541779456, 1541779967 }, { 1541782784, 1541783551 }, { 1541784576, 1541785855 }, { 1541786112, 1541786623 }, { 1541787648, 1541788159 }, { 1541788416, 1541788671 }, { 1541790976, 1541791231 }, { 1541794048, 1541794815 }, { 1541795072, 1541795327 }, { 1541802496, 1541803007 }, { 1541804544, 1541805567 }, { 1541805824, 1541806079 }, { 1541806592, 1541806847 }, { 1541809664, 1541810175 }, { 1541812736, 1541812991 }, { 1541813248, 1541814015 }, { 1541815296, 1541816319 }, { 1541816576, 1541816831 }, { 1541818368, 1541818623 }, { 1541821440, 1541821695 }, { 1541823232, 1541823487 }, { 1541824000, 1541824511 }, { 1541825536, 1541826047 }, { 1541827328, 1541827583 }, { 1541833984, 1541834239 }, { 1541834496, 1541835775 }, { 1541837312, 1541837567 }, { 1541838336, 1541839871 }, { 1541840384, 1541840639 }, { 1541846528, 1541848063 }, { 1541848576, 1541849087 }, { 1541850112, 1541850623 }, { 1541853184, 1541854207 }, { 1541854976, 1541855231 }, { 1541855744, 1541855999 }, { 1541857280, 1541857535 }, { 1541857792, 1541858815 }, { 1541864192, 1541864959 }, { 1541867520, 1541867775 }, { 1541869568, 1541870079 }, { 1541881856, 1541882367 }, { 1541889536, 1541890303 }, { 1541894144, 1541895167 }, { 1541898240, 1541900799 }, { 1541901568, 1541901823 }, { 1541902848, 1541903103 }, { 1541906688, 1541907455 }, { 1541910528, 1541911039 }, { 1541913088, 1541913599 }, { 1541913856, 1541914111 }, { 1541915648, 1541916671 }, { 1541920000, 1541920767 }, { 1541921280, 1541921791 }, { 1541922304, 1541922559 }, { 1541925120, 1541926911 }, { 1541927680, 1541927935 }, { 1541929984, 1541931007 }, { 1541932544, 1541935103 }, { 1541939712, 1541939967 }, { 1541940992, 1541941247 }, { 1541948928, 1541949183 }, { 1541951488, 1541951743 }, { 1541954560, 1541955583 }, { 1541958656, 1541959679 }, { 1541959936, 1541960191 }, { 1541960704, 1541962751 }, { 1541963264, 1541963519 }, { 1541964544, 1541965823 }, { 1541967872, 1541968895 }, { 1541972480, 1541972735 }, { 1541974016, 1541975551 }, { 1541979136, 1541979647 }, { 1541981184, 1541981695 }, { 1541982720, 1541984255 }, { 1541986304, 1541986815 }, { 1541988608, 1541988863 }, { 1541989888, 1541990399 }, { 1541993216, 1541994239 }, { 1541995520, 1541996031 }, { 1541997568, 1541997823 }, { 1542003712, 1542004735 }, { 1542006784, 1542008831 }, { 1542010624, 1542010879 }, { 1542012160, 1542013439 }, { 1542017536, 1542017791 }, { 1542019072, 1542019327 }, { 1542020096, 1542021119 }, { 1542030336, 1542031359 }, { 1542033408, 1542034943 }, { 1542038528, 1542041087 }, { 1542041344, 1542041599 }, { 1542044672, 1542045183 }, { 1542050816, 1542051327 }, { 1542051840, 1542053887 }, { 1542054400, 1542054655 }, { 1542055424, 1542055935 }, { 1542057472, 1542060031 }, { 1542064896, 1542065151 }, { 1542066176, 1542066431 }, { 1542075904, 1542076159 }, { 1542077440, 1542078975 }, { 1542079488, 1542080511 }, { 1542082560, 1542083583 }, { 1542086656, 1542087676 }, { 1542089728, 1542090751 }, { 1542091776, 1542092799 }, { 1542099200, 1542099455 }, { 1542099712, 1542099967 }, { 1542100992, 1542102015 }, { 1542104064, 1542105087 }, { 1542105600, 1542105855 }, { 1542106112, 1542107135 }, { 1542107392, 1542107903 }, { 1542108160, 1542109183 }, { 1542110208, 1542110463 }, { 1542113792, 1542114047 }, { 1542119424, 1542119935 }, { 1542127360, 1542127615 }, { 1542129408, 1542129663 }, { 1542130688, 1542131711 }, { 1542134272, 1542136319 }, { 1542136832, 1542137087 }, { 1542137344, 1542137599 }, { 1542138368, 1542138623 }, { 1542144512, 1542144767 }, { 1542146048, 1542147071 }, { 1542148096, 1542148607 }, { 1542149120, 1542152191 }, { 1542153472, 1542153727 }, { 1542153984, 1542154239 }, { 1542154752, 1542155007 }, { 1542156288, 1542156543 }, { 1542160128, 1542160383 }, { 1542164480, 1542165759 }, { 1542167552, 1542168319 }, { 1542170880, 1542171135 }, { 1542172416, 1542172671 }, { 1542173696, 1542174207 }, { 1542174720, 1542176767 }, { 1542179584, 1542179839 }, { 1542182144, 1542182399 }, { 1542183936, 1542184447 }, { 1542187264, 1542188031 }, { 1542189312, 1542189567 }, { 1542190080, 1542191103 }, { 1542193664, 1542194175 }, { 1542195712, 1542196479 }, { 1542196736, 1542197247 }, { 1542198784, 1542199551 }, { 1542200832, 1542201343 }, { 1542205440, 1542206463 }, { 1542208512, 1542209535 }, { 1542213376, 1542214143 }, { 1542216704, 1542217727 }, { 1542218752, 1542220031 }, { 1542220800, 1542222847 }, { 1542223872, 1542224383 }, { 1542224896, 1542225151 }, { 1542227456, 1542228223 }, { 1542228992, 1542230015 }, { 1542231040, 1542232063 }, { 1542235136, 1542236159 }, { 1542238208, 1542239743 }, { 1542240000, 1542240255 }, { 1542243328, 1542244607 }, { 1542245376, 1542245887 }, { 1542247680, 1542247935 }, { 1542253056, 1542253567 }, { 1542254080, 1542254335 }, { 1542256128, 1542256639 }, { 1542257664, 1542258175 }, { 1542263808, 1542264063 }, { 1542266880, 1542267135 }, { 1542268160, 1542268415 }, { 1542272256, 1542273023 }, { 1542278144, 1542278399 }, { 1542279680, 1542280191 }, { 1542282752, 1542283007 }, { 1542283520, 1542283775 }, { 1542295552, 1542296831 }, { 1542297088, 1542297343 }, { 1542300416, 1542300671 }, { 1542304256, 1542305791 }, { 1542306304, 1542307327 }, { 1542307840, 1542308095 }, { 1542309632, 1542310911 }, { 1542312192, 1542312447 }, { 1542313216, 1542313471 }, { 1542315008, 1542316031 }, { 1542317568, 1542317823 }, { 1542322432, 1542322687 }, { 1542323200, 1542323711 }, { 1542324736, 1542325247 }, { 1542326784, 1542327295 }, { 1542329344, 1542329855 }, { 1542330368, 1542331903 }, { 1542332928, 1542333439 }, { 1542335488, 1542337023 }, { 1542340608, 1542342143 }, { 1542344448, 1542345215 }, { 1542346240, 1542347775 }, { 1542348800, 1542349823 }, { 1542351872, 1542352895 }, { 1542353664, 1542353919 }, { 1542354944, 1542355711 }, { 1542356736, 1542357503 }, { 1542359040, 1542360319 }, { 1542364160, 1542365183 }, { 1542367232, 1542368255 }, { 1542370816, 1542371839 }, { 1542372352, 1542373375 }, { 1542375424, 1542376191 }, { 1542377984, 1542378495 }, { 1542381056, 1542381823 }, { 1542382336, 1542383615 }, { 1542386688, 1542387199 }, { 1542387712, 1542388223 }, { 1542388736, 1542389247 }, { 1542390784, 1542391295 }, { 1542393856, 1542394879 }, { 1542395392, 1542395647 }, { 1542396416, 1542396927 }, { 1542400000, 1542400767 }, { 1542401024, 1542401535 }, { 1542405120, 1542405375 }, { 1542405888, 1542406143 }, { 1542407168, 1542408191 }, { 1542411520, 1542411775 }, { 1542412288, 1542412799 }, { 1542413824, 1542414079 }, { 1542414848, 1542415359 }, { 1542415872, 1542416383 }, { 1542418432, 1542418687 }, { 1542420736, 1542420991 }, { 1542422016, 1542422527 }, { 1542423296, 1542424575 }, { 1542425600, 1542426623 }, { 1542430208, 1542430719 }, { 1542433792, 1542434047 }, { 1542434816, 1542435071 }, { 1542436864, 1542437119 }, { 1542438400, 1542438911 }, { 1542444800, 1542445055 }, { 1542447872, 1542448639 }, { 1542450944, 1542451199 }, { 1542459392, 1542459647 }, { 1542461696, 1542461951 }, { 1542463744, 1542463999 }, { 1542464512, 1542464767 }, { 1542465024, 1542465535 }, { 1542466816, 1542467071 }, { 1542474240, 1542474751 }, { 1542476800, 1542477823 }, { 1542478336, 1542478847 }, { 1542479616, 1542479871 }, { 1542481408, 1542481919 }, { 1542483456, 1542484991 }, { 1542485504, 1542488063 }, { 1542492160, 1542492415 }, { 1542494976, 1542495231 }, { 1542496768, 1542497023 }, { 1542498304, 1542499583 }, { 1542501120, 1542501375 }, { 1542507264, 1542507519 }, { 1542508544, 1542510079 }, { 1542511104, 1542511871 }, { 1542512128, 1542512383 }, { 1542512896, 1542513151 }, { 1542514688, 1542515199 }, { 1542517248, 1542517759 }, { 1542521856, 1542522111 }, { 1542523904, 1542524415 }, { 1542524928, 1542525951 }, { 1542526464, 1542526719 }, { 1542531840, 1542532095 }, { 1542532352, 1542533119 }, { 1542534656, 1542534911 }, { 1542535680, 1542536191 }, { 1542538240, 1542538751 }, { 1542542336, 1542542847 }, { 1542543360, 1542544383 }, { 1542553600, 1542561791 }, { 1542566912, 1542567935 }, { 1542594560, 1542597631 }, { 1542627584, 1542627839 }, { 1542628352, 1542630399 }, { 1542631424, 1542635519 }, { 1542640896, 1542641151 }, { 1542643968, 1542644735 }, { 1542646272, 1542646527 }, { 1542646784, 1542648319 }, { 1542651392, 1542651903 }, { 1542660096, 1542660607 }, { 1542660864, 1542662143 }, { 1542663168, 1542667775 }, { 1542668032, 1542668287 }, { 1542669312, 1542669567 }, { 1542672384, 1542672639 }, { 1542672896, 1542673663 }, { 1542673920, 1542674175 }, { 1542674432, 1542674687 }, { 1542674944, 1542675455 }, { 1542675712, 1542675967 }, { 1542676224, 1542681087 }, { 1542682624, 1542683135 }, { 1542683648, 1542684159 }, { 1542700032, 1542700543 }, { 1542709248, 1542717439 }, { 1542733824, 1542734847 }, { 1542735872, 1542742015 }, { 1542746112, 1542747135 }, { 1542758400, 1542763519 }, { 1542764288, 1542764543 }, { 1542776832, 1542777855 }, { 1542778880, 1542780159 }, { 1542781952, 1542782975 }, { 1542791168, 1542801407 }, { 1542815744, 1542823935 }, { 1542836736, 1542837247 }, { 1542841088, 1542841343 }, { 1542843648, 1542843903 }, { 1542848512, 1542849535 }, { 1542852608, 1542855167 }, { 1542856192, 1542856703 }, { 1542859008, 1542859263 }, { 1542877184, 1542881279 }, { 1542889472, 1542891519 }, { 1542904576, 1542904831 }, { 1542914048, 1542923263 }, { 1542931456, 1542932479 }, { 1542933760, 1542934527 }, { 1542938624, 1542950911 }, { 1542951936, 1542955007 }, { 1542962688, 1542962943 }, { 1542963200, 1542970623 }, { 1542970880, 1542971391 }, { 1542973440, 1542975487 }, { 1542977536, 1542978559 }, { 1542979072, 1542979583 }, { 1545863168, 1545895935 }, { 1545961472, 1545995775 }, { 1545996288, 1545998335 }, { 1545999360, 1545999871 }, { 1546002432, 1546002943 }, { 1546003456, 1546003967 }, { 1546004992, 1546006527 }, { 1546014720, 1546015743 }, { 1546016256, 1546018047 }, { 1546018560, 1546018815 }, { 1546027008, 1546028031 }, { 1546029056, 1546030079 }, { 1546033152, 1546033663 }, { 1546034176, 1546034431 }, { 1546042368, 1546047487 }, { 1546048512, 1546055679 }, { 1546055936, 1546059775 }, { 1546076160, 1546080255 }, { 1546084352, 1546088447 }, { 1546092544, 1546096639 }, { 1546113024, 1546121215 }, { 1546256384, 1546260479 }, { 1546262528, 1546264575 }, { 1546266880, 1546267647 }, { 1546278912, 1546280959 }, { 1546289152, 1546291199 }, { 1546297344, 1546299391 }, { 1546307584, 1546311679 }, { 1546321920, 1546323967 }, { 1546360832, 1546362879 }, { 1546364416, 1546364927 }, { 1546369024, 1546371071 }, { 1546747904, 1546764287 }, { 1546813440, 1546848255 }, { 1546852352, 1546858495 }, { 1546993664, 1547010047 }, { 1547034624, 1547036671 }, { 1547059200, 1547075583 }, { 1547108352, 1547124735 }, { 1547456512, 1547460607 }, { 1547505664, 1547509759 }, { 1547517952, 1547519999 }, { 1547579392, 1547583487 }, { 1547595776, 1547596799 }, { 1547603968, 1547608063 }, { 1547649024, 1547653119 }, { 1547657216, 1547661311 }, { 1547677696, 1547682815 }, { 1547683328, 1547683839 }, { 1547684096, 1547684863 }, { 1550057472, 1550188543 }, { 1551253504, 1551254527 }, { 1551255552, 1551256575 }, { 1551259136, 1551261695 }, { 1551265792, 1551266047 }, { 1551266816, 1551267839 }, { 1551268864, 1551269887 }, { 1551271168, 1551271423 }, { 1551271680, 1551271935 }, { 1551272960, 1551273983 }, { 1551280128, 1551281151 }, { 1551287296, 1551289343 }, { 1551335424, 1551335679 }, { 1551335936, 1551336447 }, { 1551343360, 1551343871 }, { 1551344128, 1551344383 }, { 1551350272, 1551350783 }, { 1551352064, 1551352831 }, { 1551353856, 1551354879 }, { 1551357952, 1551358975 }, { 1551361536, 1551361791 }, { 1551630336, 1551892479 }, { 1558119424, 1558120191 }, { 1558120448, 1558120959 }, { 1558121984, 1558122495 }, { 1558126592, 1558127871 }, { 1558128128, 1558128383 }, { 1558128896, 1558129151 }, { 1558129408, 1558129663 }, { 1558130432, 1558130687 }, { 1558130944, 1558131199 }, { 1558131968, 1558132223 }, { 1558133760, 1558134015 }, { 1558134784, 1558135295 }, { 1558135552, 1558135807 }, { 1558136832, 1558137087 }, { 1558138880, 1558139135 }, { 1558140672, 1558140927 }, { 1558141696, 1558141951 }, { 1558144512, 1558145023 }, { 1558145536, 1558145791 }, { 1558146048, 1558147071 }, { 1558147584, 1558148095 }, { 1558149632, 1558150143 }, { 1559265280, 1559269375 }, { 1559281664, 1559283711 }, { 1559283968, 1559284735 }, { 1559284992, 1559285247 }, { 1559285760, 1559287551 }, { 1559287808, 1559288063 }, { 1559288320, 1559289855 }, { 1559298048, 1559306239 }, { 1559322624, 1559330815 }, { 1559339008, 1559339743 }, { 1559339776, 1559340287 }, { 1559340544, 1559347199 }, { 1559355392, 1559379455 }, { 1559379968, 1559388159 }, { 1559405568, 1559406591 }, { 1559445504, 1559446527 }, { 1559446784, 1559447295 }, { 1559447552, 1559450111 }, { 1559450368, 1559451135 }, { 1559451904, 1559452159 }, { 1559452672, 1559452927 }, { 1559453696, 1559461887 }, { 1559470080, 1559478271 }, { 1559552000, 1559560191 }, { 1559568384, 1559576575 }, { 1559658496, 1559662591 }, { 1559663616, 1559665663 }, { 1559666688, 1559683071 }, { 1559789568, 1559823615 }, { 1559825408, 1559825919 }, { 1559826176, 1559826431 }, { 1560051712, 1560084479 }, { 1560119296, 1560123391 }, { 1560125440, 1560127487 }, { 1560129536, 1560133631 }, { 1560135680, 1560135935 }, { 1560136448, 1560136703 }, { 1560137216, 1560137727 }, { 1560139776, 1560140799 }, { 1560143872, 1560144127 }, { 1560144640, 1560144895 }, { 1560215808, 1560223743 }, { 1560225792, 1560228863 }, { 1560229120, 1560229887 }, { 1560230144, 1560231935 }, { 1560232192, 1560233471 }, { 1560233728, 1560236031 }, { 1560237312, 1560237567 }, { 1560238080, 1560281087 }, { 1565368320, 1565376511 }, { 1565523968, 1565655039 }, { 1566048256, 1566052351 }, { 1566054400, 1566055423 }, { 1566067712, 1566068735 }, { 1566081024, 1566085119 }, { 1566089216, 1566097407 }, { 1566101504, 1566105599 }, { 1566158848, 1566162943 }, { 1566187520, 1566191615 }, { 1566199808, 1566207999 }, { 1566232576, 1566248959 }, { 1566273536, 1566277631 }, { 1566285824, 1566289919 }, { 1566302208, 1566306303 }, { 1566318592, 1566320639 }, { 1566326784, 1566328831 }, { 1566330880, 1566334975 }, { 1566339072, 1566340095 }, { 1566345216, 1566347263 }, { 1566355456, 1566357503 }, { 1566359552, 1566363647 }, { 1566365696, 1566367743 }, { 1566398464, 1566400511 }, { 1566410752, 1566412799 }, { 1566419968, 1566420991 }, { 1566428928, 1566429183 }, { 1566478336, 1566482431 }, { 1566486528, 1566488575 }, { 1566500864, 1566502911 }, { 1566517248, 1566519295 }, { 1566531584, 1566533631 }, { 1566541824, 1566543871 }, { 1566545920, 1566552063 }, { 1566556160, 1566558207 }, { 1566834688, 1566900223 }, { 1567788544, 1567788799 }, { 1567825504, 1567825663 }, { 1568178176, 1568210943 }, { 1568374784, 1568440319 }, { 1570340864, 1570373631 }, { 1570574336, 1570576383 }, { 1570580480, 1570582527 }, { 1570584576, 1570585087 }, { 1570585344, 1570586111 }, { 1570597120, 1570597375 }, { 1570598400, 1570598911 }, { 1570600960, 1570603007 }, { 1570607104, 1570609151 }, { 1570611200, 1570615295 }, { 1570617856, 1570618111 }, { 1570621952, 1570623231 }, { 1570623488, 1570625535 }, { 1570629632, 1570635775 }, { 1570668544, 1570669307 }, { 1570669312, 1570674943 }, { 1570675200, 1570675799 }, { 1570675904, 1570676755 }, { 1570677248, 1570678399 }, { 1570678784, 1570679811 }, { 1570679998, 1570680319 }, { 1570680576, 1570684891 }, { 1570684928, 1570686975 }, { 1570693120, 1570695167 }, { 1570697216, 1570701311 }, { 1570756608, 1570757631 }, { 1570757888, 1570759167 }, { 1570759424, 1570764799 }, { 1571422720, 1571423231 }, { 1571423488, 1571424255 }, { 1571424512, 1571424767 }, { 1571425024, 1571425535 }, { 1571425792, 1571426047 }, { 1571428352, 1571428607 }, { 1571429120, 1571429375 }, { 1571430400, 1571430911 }, { 1571435008, 1571435775 }, { 1571441664, 1571441919 }, { 1571442432, 1571442687 }, { 1571443200, 1571443711 }, { 1571446272, 1571447039 }, { 1571447808, 1571448063 }, { 1571448576, 1571451391 }, { 1571452928, 1571453439 }, { 1571453696, 1571454975 }, { 1571457536, 1571458047 }, { 1571458304, 1571458815 }, { 1571466240, 1571467007 }, { 1571467264, 1571467775 }, { 1571468288, 1571469311 }, { 1571470080, 1571470335 }, { 1571470848, 1571471103 }, { 1571471360, 1571475455 }, { 1571478016, 1571478271 }, { 1571481600, 1571482623 }, { 1571484672, 1571486719 }, { 1571487232, 1571487487 }, { 1571488256, 1571488767 }, { 1571489536, 1571491839 }, { 1571495936, 1571496447 }, { 1571497984, 1571504127 }, { 1571508224, 1571514367 }, { 1571521536, 1571522815 }, { 1571523328, 1571524607 }, { 1571528112, 1571528191 }, { 1571529216, 1571529471 }, { 1571529728, 1571531263 }, { 1571532032, 1571532287 }, { 1571533056, 1571533311 }, { 1571533824, 1571535103 }, { 1571535360, 1571535871 }, { 1571536896, 1571539199 }, { 1571539968, 1571540735 }, { 1571540992, 1571541503 }, { 1571542272, 1571542527 }, { 1571543040, 1571544063 }, { 1571545856, 1571546879 }, { 1571548160, 1571548671 }, { 1571548928, 1571549183 }, { 1571550208, 1571550463 }, { 1571696640, 1571700735 }, { 1571702784, 1571704831 }, { 1571713024, 1571715071 }, { 1571717120, 1571719167 }, { 1571741696, 1571743743 }, { 1571745792, 1571747839 }, { 1571749888, 1571758079 }, { 1571880960, 1571897343 }, { 1571904512, 1571905023 }, { 1571907840, 1571908095 }, { 1571908352, 1571908607 }, { 1571913216, 1571913471 }, { 1571962880, 1571979263 }, { 1572028416, 1572028927 }, { 1572029184, 1572034559 }, { 1572035584, 1572036607 }, { 1572038656, 1572040703 }, { 1572042752, 1572043775 }, { 1572077568, 1572093951 }, { 1572112384, 1572114431 }, { 1572192256, 1572225023 }, { 1572277760, 1572278015 }, { 1572278784, 1572279039 }, { 1572290560, 1572306943 }, { 1572380672, 1572384767 }, { 1572409344, 1572413439 }, { 1572442112, 1572446207 }, { 1572447232, 1572447743 }, { 1572448000, 1572448255 }, { 1572449280, 1572458495 }, { 1572483072, 1572487167 }, { 1572495360, 1572499455 }, { 1572528128, 1572532223 }, { 1572554752, 1572556799 }, { 1572560896, 1572562943 }, { 1572567040, 1572569087 }, { 1572575232, 1572577279 }, { 1572581376, 1572585471 }, { 1572605952, 1572607999 }, { 1572612096, 1572614143 }, { 1572632576, 1572634623 }, { 1572640768, 1572641535 }, { 1572641792, 1572642815 }, { 1572648960, 1572651007 }, { 1572653056, 1572654591 }, { 1572654848, 1572657151 }, { 1572669440, 1572673535 }, { 1572677632, 1572681727 }, { 1572683520, 1572683775 }, { 1572685824, 1572689919 }, { 1572704256, 1572706303 }, { 1572718592, 1572720639 }, { 1572722688, 1572724735 }, { 1572730880, 1572732927 }, { 1572737024, 1572739071 }, { 1572759552, 1572761599 }, { 1572763648, 1572764159 }, { 1572764416, 1572764671 }, { 1572764928, 1572765183 }, { 1572777984, 1572780031 }, { 1572784128, 1572786175 }, { 1572790272, 1572792319 }, { 1572800512, 1572804607 }, { 1572812800, 1572814847 }, { 1572816896, 1572818943 }, { 1572825344, 1572825599 }, { 1572826624, 1572826879 }, { 1578132736, 1578133247 }, { 1578303488, 1578369023 }, { 1578663936, 1578762239 }, { 1578795008, 1578811391 }, { 1578819584, 1578827775 }, { 1578893312, 1578991615 }, { 1579122688, 1579155455 }, { 1579745280, 1579810815 }, { 1580007424, 1580015615 }, { 1580048384, 1580049407 }, { 1580049664, 1580049919 }, { 1580050176, 1580051455 }, { 1580051968, 1580052735 }, { 1580053248, 1580054015 }, { 1580054272, 1580055551 }, { 1580056064, 1580056319 }, { 1580056576, 1580064767 }, { 1580335104, 1580466175 }, { 1581776896, 1581793279 }, { 1581891584, 1581907967 }, { 1581932544, 1581936639 }, { 1581938688, 1581940735 }, { 1581948672, 1581948927 }, { 1581950976, 1581951231 }, { 1581952256, 1581952511 }, { 1581955840, 1581956095 }, { 1581956872, 1581957119 }, { 1581973504, 1581989887 }, { 1582006272, 1582022655 }, { 1582104576, 1582153727 }, { 1582219264, 1582252031 }, { 1583632384, 1583636479 }, { 1583656960, 1583665151 }, { 1583693824, 1583697919 }, { 1583702016, 1583706111 }, { 1583747072, 1583751167 }, { 1583765504, 1583766015 }, { 1583771648, 1583775743 }, { 1583788800, 1583789055 }, { 1583811584, 1583812095 }, { 1583829760, 1583832575 }, { 1583854336, 1583854591 }, { 1583855104, 1583855615 }, { 1583857152, 1583857407 }, { 1583865856, 1583869951 }, { 1585203968, 1585204223 }, { 1585204480, 1585204735 }, { 1585213952, 1585214207 }, { 1585227776, 1585231359 }, { 1585231616, 1585231871 }, { 1585233920, 1585238015 }, { 1585242112, 1585244159 }, { 1585246208, 1585248255 }, { 1585250304, 1585254399 }, { 1585260544, 1585264639 }, { 1585272832, 1585274879 }, { 1585275392, 1585275903 }, { 1585297408, 1585299455 }, { 1585311744, 1585313791 }, { 1585321984, 1585324031 }, { 1585338368, 1585340415 }, { 1585354752, 1585356799 }, { 1585367040, 1585367295 }, { 1585367552, 1585369087 }, { 1585397760, 1585399807 }, { 1585403904, 1585405951 }, { 1585416192, 1585422335 }, { 1585424384, 1585428479 }, { 1585432576, 1585434623 }, { 1585436672, 1585438719 }, { 1585442816, 1585446911 }, { 1586020352, 1586028543 }, { 1586036736, 1586055167 }, { 1586055936, 1586056191 }, { 1586056960, 1586060287 }, { 1586060544, 1586061055 }, { 1586085888, 1586110463 }, { 1586135040, 1586143231 }, { 1586192384, 1586200575 }, { 1586229248, 1586233343 }, { 1586266112, 1586274303 }, { 1586282496, 1586298879 }, { 1586307072, 1586315263 }, { 1586323456, 1586331647 }, { 1586339840, 1586348031 }, { 1586361344, 1586362367 }, { 1586363392, 1586372607 }, { 1586397184, 1586397439 }, { 1586399232, 1586401279 }, { 1586438144, 1586446335 }, { 1586462720, 1586464767 }, { 1586466816, 1586468863 }, { 1586470912, 1586472959 }, { 1586487296, 1586487551 }, { 1586488832, 1586489087 }, { 1586491392, 1586493439 }, { 1587153664, 1587153919 }, { 1587167232, 1587175423 }, { 1587198976, 1587199487 }, { 1587199744, 1587199999 }, { 1587307264, 1587307519 }, { 1587412992, 1587418111 }, { 1587437568, 1587445759 }, { 1587453952, 1587458047 }, { 1587461120, 1587468543 }, { 1587469312, 1587470079 }, { 1587478528, 1587511295 }, { 1588689664, 1588689919 }, { 1588854784, 1588985855 }, { 1589379072, 1589411839 }, { 1589510144, 1589542911 }, { 1589575680, 1589608447 }, { 1590034432, 1590036479 }, { 1590038528, 1590040575 }, { 1590042624, 1590044671 }, { 1590047232, 1590048767 }, { 1590061056, 1590063103 }, { 1590067200, 1590069247 }, { 1590083584, 1590085631 }, { 1590091264, 1590091775 }, { 1590093312, 1590093567 }, { 1590093824, 1590095871 }, { 1590099968, 1590102015 }, { 1590116352, 1590120447 }, { 1590126592, 1590128639 }, { 1590155264, 1590157311 }, { 1592029184, 1592031743 }, { 1592032000, 1592033279 }, { 1592041472, 1592045567 }, { 1592049664, 1592053759 }, { 1592061952, 1592066047 }, { 1592070144, 1592074239 }, { 1592090624, 1592091199 }, { 1592091392, 1592091711 }, { 1592091904, 1592092223 }, { 1592092672, 1592094719 }, { 1592123392, 1592135679 }, { 1592139776, 1592143871 }, { 1592160256, 1592168447 }, { 1592172544, 1592176639 }, { 1592193024, 1592197119 }, { 1592201216, 1592205311 }, { 1592225792, 1592242175 }, { 1592251392, 1592251647 }, { 1592253440, 1592254463 }, { 1592262656, 1592268799 }, { 1592270592, 1592270847 }, { 1592272896, 1592273407 }, { 1592274176, 1592274431 }, { 1592274944, 1592281087 }, { 1592285184, 1592287231 }, { 1592289280, 1592291327 }, { 1592295424, 1592299519 }, { 1592309760, 1592311807 }, { 1592313856, 1592315903 }, { 1592322048, 1592324863 }, { 1592328192, 1592393727 }, { 1592623104, 1592655871 }, { 1592803328, 1592819711 }, { 1592852480, 1592868863 }, { 1592885248, 1592886271 }, { 1592899584, 1592900607 }, { 1592901632, 1592934399 }, { 1592950784, 1592967167 }, { 1592983552, 1592999935 }, { 1593016320, 1593049087 }, { 1593147392, 1593163775 }, { 1593249792, 1593251839 }, { 1593260032, 1593262079 }, { 1593272320, 1593274367 }, { 1593276416, 1593278463 }, { 1593280768, 1593281023 }, { 1593281536, 1593281791 }, { 1593298944, 1593300991 }, { 1593307136, 1593311231 }, { 1593505792, 1593540607 }, { 1593638912, 1593671679 }, { 1593769984, 1593802751 }, { 1595408384, 1595998207 }, { 1596260352, 1596325887 }, { 1596850432, 1596851455 }, { 1596852224, 1596852735 }, { 1596853248, 1596854271 }, { 1596858880, 1596859391 }, { 1596859904, 1596861439 }, { 1596862464, 1596866559 }, { 1596869888, 1596870655 }, { 1596875008, 1596875775 }, { 1596877056, 1596877311 }, { 1596878080, 1596881919 }, { 1596882176, 1596882431 }, { 1596882688, 1596882943 }, { 1596887040, 1596887295 }, { 1596887552, 1596889599 }, { 1596890880, 1596891135 }, { 1596892160, 1596892671 }, { 1596895232, 1596897279 }, { 1596899328, 1596901375 }, { 1596924928, 1596925951 }, { 1596929280, 1596930047 }, { 1596931840, 1596932095 }, { 1596940288, 1596940799 }, { 1596941312, 1596941823 }, { 1596942080, 1596942335 }, { 1596945664, 1596946431 }, { 1596950784, 1596951039 }, { 1596951296, 1596951807 }, { 1596953088, 1596953599 }, { 1596954624, 1596954879 }, { 1596955392, 1596955903 }, { 1596956416, 1596956671 }, { 1596957952, 1596958207 }, { 1596959232, 1596959743 }, { 1596960256, 1596961023 }, { 1596961792, 1596963327 }, { 1596964096, 1596964607 }, { 1596966400, 1596966911 }, { 1596967168, 1596967935 }, { 1596975360, 1596976127 }, { 1596976640, 1596979199 }, { 1596980224, 1596980479 }, { 1596980736, 1596980991 }, { 1597243392, 1597505535 }, { 1598062592, 1598095359 }, { 1598193664, 1598226431 }, { 1598259200, 1598291967 }, { 1598324736, 1598357503 }, { 1598423040, 1598455807 }, { 1598488576, 1598685183 }, { 1598947328, 1599078399 }, { 1599094784, 1599111167 }, { 1599193088, 1599209471 }, { 1599258624, 1599324159 }, { 1599340544, 1599356927 }, { 1599373312, 1599406079 }, { 1599426560, 1599427327 }, { 1599427584, 1599428863 }, { 1599520768, 1599537151 }, { 1600400896, 1600401407 }, { 1600431104, 1600431615 }, { 1600485120, 1600485375 }, { 1600684032, 1600749567 }, { 1600782336, 1600880639 }, { 1600946176, 1600953343 }, { 1600953856, 1600958471 }, { 1600958720, 1600966399 }, { 1600966656, 1600970047 }, { 1600970240, 1600978687 }, { 1601044480, 1601077247 }, { 1602258944, 1602260991 }, { 1602265088, 1602267135 }, { 1602269184, 1602271231 }, { 1602281472, 1602283519 }, { 1602285568, 1602287615 }, { 1602304000, 1602306047 }, { 1602308096, 1602310143 }, { 1602312192, 1602314239 }, { 1602324480, 1602328575 }, { 1602330624, 1602336767 }, { 1602349056, 1602351103 }, { 1602387968, 1602390015 }, { 1602400256, 1602402303 }, { 1602405888, 1602406143 }, { 1602412544, 1602412799 }, { 1602413056, 1602413567 }, { 1602413824, 1602414591 }, { 1602420736, 1602424831 }, { 1602426880, 1602428927 }, { 1602439168, 1602441215 }, { 1602443264, 1602445311 }, { 1602457600, 1602459647 }, { 1602465792, 1602467839 }, { 1602473984, 1602476031 }, { 1602478080, 1602480127 }, { 1602813952, 1602846719 }, { 1602936832, 1603010559 }, { 1603014656, 1603018751 }, { 1603031040, 1603031807 }, { 1603032064, 1603035135 }, { 1603047424, 1603051519 }, { 1603076096, 1603080191 }, { 1603121152, 1603129343 }, { 1603133440, 1603137535 }, { 1603150080, 1603152127 }, { 1603152384, 1603153919 }, { 1603190784, 1603194879 }, { 1603207168, 1603215359 }, { 1603223828, 1603224063 }, { 1603235840, 1603239935 }, { 1603252224, 1603256319 }, { 1603260416, 1603264511 }, { 1603796992, 1603813375 }, { 1603895296, 1603928063 }, { 1603944448, 1603977215 }, { 1604075520, 1604091903 }, { 1604239360, 1604255743 }, { 1604288512, 1604304895 }, { 1604386816, 1604403199 }, { 1604407552, 1604408319 }, { 1604409344, 1604419583 }, { 1604422656, 1604433919 }, { 1604434944, 1604436991 }, { 1604438016, 1604444159 }, { 1604445184, 1604452351 }, { 1604517888, 1604555007 }, { 1604555264, 1604555775 }, { 1604556800, 1604558847 }, { 1604562944, 1604567039 }, { 1604571136, 1604583423 }, { 1604648960, 1604714495 }, { 1604780032, 1604818930 }, { 1604818944, 1604845567 }, { 1604935680, 1604952063 }, { 1605001216, 1605025791 }, { 1605042176, 1605050367 }, { 1605099520, 1605099775 }, { 1605100032, 1605100287 }, { 1605103616, 1605107711 }, { 1605115904, 1605124095 }, { 1605132288, 1605148671 }, { 1605206016, 1605214207 }, { 1605261312, 1605271551 }, { 1605287936, 1605296127 }, { 1605361664, 1605369855 }, { 1605566464, 1605599231 }, { 1605697536, 1605735423 }, { 1605736448, 1605736959 }, { 1605737216, 1605738495 }, { 1605739008, 1605740287 }, { 1605740544, 1605741823 }, { 1605742592, 1605745663 }, { 1605746688, 1605752831 }, { 1605754880, 1605756927 }, { 1605758976, 1605763071 }, { 1605771264, 1605782527 }, { 1605782784, 1605783039 }, { 1605783296, 1605787647 }, { 1605790720, 1605795839 }, { 1605830656, 1605840895 }, { 1605844992, 1605861375 }, { 1606156288, 1606418431 }, { 1607794688, 1607811071 }, { 1607827456, 1607860223 }, { 1607862272, 1607863295 }, { 1607874560, 1607876607 }, { 1607889920, 1607890943 }, { 1607925760, 1607926783 }, { 1607928832, 1607929855 }, { 1607943168, 1607944191 }, { 1607947264, 1607948287 }, { 1607950336, 1607952383 }, { 1607953408, 1607956479 }, { 1607957504, 1607958527 }, { 1607960576, 1607961599 }, { 1607963648, 1607965695 }, { 1607970816, 1607972863 }, { 1607979008, 1607980031 }, { 1607984128, 1607985151 }, { 1607986688, 1607988223 }, { 1607989248, 1607991295 }, { 1608253440, 1608384511 }, { 1611167200, 1611167231 }, { 1680532160, 1680532223 }, { 1680533568, 1680533759 }, { 1694498816, 1694499839 }, { 1694564352, 1694565375 }, { 1694673920, 1694674943 }, { 1694760960, 1695023103 }, { 1695547392, 1696595967 }, { 1696694272, 1696882687 }, { 1696890880, 1697386495 }, { 1697388544, 1697710079 }, { 1697742848, 1697775615 }, { 1697777664, 1697779711 }, { 1697789952, 1697790975 }, { 1697906688, 1697972223 }, { 1697997824, 1697998847 }, { 1698037760, 1698103295 }, { 1698160640, 1698162687 }, { 1698693120, 1699611647 }, { 1699618816, 1699627007 }, { 1699741696, 1700793343 }, { 1700794368, 1700798463 }, { 1700823040, 1700855807 }, { 1701011456, 1701019647 }, { 1701134336, 1701142527 }, { 1701143552, 1701143807 }, { 1701144064, 1701150719 }, { 1701199872, 1701208063 }, { 1701209088, 1701209855 }, { 1701210112, 1701216255 }, { 1701314560, 1701576703 }, { 1701724160, 1701736447 }, { 1701737472, 1701740543 }, { 1702363136, 1702821887 }, { 1702887424, 1702888447 }, { 1702889472, 1702903807 }, { 1702952960, 1703411711 }, { 1703936000, 1704984575 }, { 1707081728, 1707737087 }, { 1707835392, 1707845631 }, { 1707846656, 1707851775 }, { 1707868160, 1708130303 }, { 1709178880, 1709834239 }, { 1709850624, 1709852671 }, { 1709853696, 1709867007 }, { 1709965312, 1710882815 }, { 1710948352, 1710949375 }, { 1710950400, 1711210495 }, { 1719783424, 1719783679 }, { 1725844736, 1725845247 }, { 1728120832, 1728121855 }, { 1728123904, 1728125951 }, { 1728137216, 1728138239 }, { 1728141312, 1728142335 }, { 1728161792, 1728162815 }, { 1728211968, 1728212991 }, { 1728224256, 1728225279 }, { 1728226304, 1728227327 }, { 1728235520, 1728239615 }, { 1728271360, 1728286719 }, { 1728287744, 1728290815 }, { 1728329728, 1728330751 }, { 1728358400, 1728359423 }, { 1728362496, 1728363519 }, { 1728372736, 1728373759 }, { 1728390144, 1728391167 }, { 1728394240, 1728396287 }, { 1728419840, 1728420863 }, { 1728423936, 1728424959 }, { 1728430080, 1728431103 }, { 1728445440, 1728446463 }, { 1728465920, 1728466943 }, { 1728468224, 1728468479 }, { 1728474112, 1728475135 }, { 1728502784, 1728503807 }, { 1728504832, 1728505855 }, { 1728519424, 1728520191 }, { 1728547840, 1728548863 }, { 1728566272, 1728569343 }, { 1728577536, 1728580607 }, { 1728585728, 1728586751 }, { 1728590848, 1728591871 }, { 1728594944, 1728595967 }, { 1728605184, 1728606207 }, { 1728617472, 1728618495 }, { 1728628736, 1728630783 }, { 1728633856, 1728634879 }, { 1728645120, 1728646143 }, { 1728649216, 1728650239 }, { 1728670720, 1728671743 }, { 1728681984, 1728683007 }, { 1728706560, 1728709631 }, { 1728712704, 1728713727 }, { 1728730112, 1728731135 }, { 1728744448, 1728745471 }, { 1728778240, 1728779263 }, { 1728817152, 1728818175 }, { 1728820224, 1728821247 }, { 1728847872, 1728848895 }, { 1728857088, 1728858111 }, { 1728863232, 1728864255 }, { 1728874496, 1728875519 }, { 1728886784, 1728887807 }, { 1728899072, 1728900095 }, { 1728908288, 1728909311 }, { 1728923648, 1728923903 }, { 1728936960, 1728937983 }, { 1728942080, 1728943103 }, { 1728955392, 1728956415 }, { 1728967680, 1728968703 }, { 1728979200, 1728979967 }, { 1728992256, 1728993279 }, { 1728996352, 1728997375 }, { 1729004544, 1729006591 }, { 1729010688, 1729011711 }, { 1729032192, 1729033215 }, { 1729037312, 1729039359 }, { 1729040384, 1729041407 }, { 1729060864, 1729061887 }, { 1729087488, 1729088511 }, { 1729115136, 1729116159 }, { 1729122304, 1729125375 }, { 1729129472, 1729130495 }, { 1729133568, 1729134591 }, { 1729177600, 1729178623 }, { 1729183744, 1729184767 }, { 1729198080, 1729199103 }, { 1729202176, 1729203199 }, { 1729208320, 1729209343 }, { 1729219584, 1729220607 }, { 1729225728, 1729226751 }, { 1729282048, 1729283071 }, { 1729287168, 1729288191 }, { 1729290240, 1729291263 }, { 1729301504, 1729302527 }, { 1729308672, 1729310719 }, { 1729314816, 1729317887 }, { 1729357824, 1729358847 }, { 1729367040, 1729368063 }, { 1729372160, 1729373183 }, { 1729376000, 1729376255 }, { 1729381376, 1729382399 }, { 1729392640, 1729393663 }, { 1729396736, 1729397759 }, { 1729404928, 1729405951 }, { 1729427456, 1729428479 }, { 1729458176, 1729460223 }, { 1729464320, 1729466367 }, { 1729474560, 1729475583 }, { 1729490944, 1729491967 }, { 1729495040, 1729519615 }, { 1729520640, 1729527807 }, { 1729543168, 1729544191 }, { 1729553408, 1729554431 }, { 1729559552, 1729560575 }, { 1729562624, 1729563647 }, { 1729574912, 1729575935 }, { 1729601536, 1729603583 }, { 1729605632, 1729606655 }, { 1729618944, 1729619967 }, { 1729632256, 1729633279 }, { 1729655808, 1729656831 }, { 1729658880, 1729659903 }, { 1729662976, 1729663999 }, { 1729671168, 1729672191 }, { 1729673216, 1729674239 }, { 1729682432, 1729683455 }, { 1729684480, 1729685503 }, { 1729690624, 1729691647 }, { 1729696768, 1729702911 }, { 1729703936, 1729704959 }, { 1729708032, 1729710079 }, { 1729729536, 1729730559 }, { 1729731584, 1729732607 }, { 1729746944, 1729747967 }, { 1729757184, 1729758207 }, { 1729773568, 1729774591 }, { 1729776640, 1729777663 }, { 1729786880, 1729787903 }, { 1729790976, 1729791999 }, { 1729797120, 1729799167 }, { 1729815552, 1729816575 }, { 1729818624, 1729819647 }, { 1729823744, 1729824767 }, { 1729825792, 1729826815 }, { 1729828864, 1729829887 }, { 1729837056, 1729838079 }, { 1729847296, 1729848319 }, { 1729875968, 1729876991 }, { 1729884160, 1729885183 }, { 1729889280, 1729891327 }, { 1729935360, 1729936383 }, { 1729940480, 1729941503 }, { 1729942528, 1729943551 }, { 1729957888, 1729958911 }, { 1729986560, 1729989631 }, { 1730024448, 1730025471 }, { 1730043904, 1730044927 }, { 1730057216, 1730058239 }, { 1730077696, 1730078719 }, { 1730079232, 1730080767 }, { 1730084864, 1730085887 }, { 1730091776, 1730092031 }, { 1730097152, 1730103295 }, { 1730122752, 1730123775 }, { 1730125824, 1730126847 }, { 1730127872, 1730128895 }, { 1730136064, 1730137087 }, { 1730145280, 1730146303 }, { 1730150400, 1730360319 }, { 1730373632, 1730374655 }, { 1730376704, 1730377727 }, { 1730398208, 1730399231 }, { 1730403328, 1730404351 }, { 1730419712, 1730420735 }, { 1730421760, 1730422783 }, { 1730426880, 1730429951 }, { 1730430976, 1730431999 }, { 1730437120, 1730438143 }, { 1730441870, 1730441983 }, { 1730446336, 1730448383 }, { 1730453504, 1730456063 }, { 1730456576, 1730476031 }, { 1730481152, 1730483199 }, { 1730484224, 1730485247 }, { 1730489344, 1730490367 }, { 1730491392, 1730493439 }, { 1730496512, 1730497535 }, { 1730503680, 1730505727 }, { 1730512896, 1730521087 }, { 1730522112, 1730524159 }, { 1730526208, 1730527231 }, { 1730531328, 1730535423 }, { 1730542592, 1730544639 }, { 1730551808, 1730552831 }, { 1730553856, 1730555903 }, { 1730557952, 1730558975 }, { 1730563072, 1730564095 }, { 1730565120, 1730566143 }, { 1730567168, 1730569215 }, { 1730573312, 1730574335 }, { 1730577408, 1730578431 }, { 1730579456, 1730580479 }, { 1730599936, 1730604031 }, { 1730608128, 1730608639 }, { 1730625536, 1730626559 }, { 1730631680, 1730632703 }, { 1730634752, 1730637055 }, { 1730637568, 1730637823 }, { 1730650112, 1730658303 }, { 1730660352, 1730669567 }, { 1730677760, 1730686975 }, { 1730697216, 1730698239 }, { 1730701056, 1730701311 }, { 1730723840, 1730724863 }, { 1730728960, 1730729983 }, { 1730731008, 1730732031 }, { 1730733056, 1730741247 }, { 1730744320, 1730745343 }, { 1730753536, 1730754559 }, { 1730769920, 1730770943 }, { 1730771968, 1730772991 }, { 1730776064, 1730777087 }, { 1730778112, 1730780159 }, { 1730781184, 1730783231 }, { 1730787328, 1730788351 }, { 1730796544, 1730800639 }, { 1730807808, 1730808831 }, { 1730811904, 1730812927 }, { 1730813952, 1730814975 }, { 1730822144, 1730824191 }, { 1730825216, 1730826239 }, { 1730832384, 1730833407 }, { 1730865152, 1730866175 }, { 1730875392, 1730876415 }, { 1730895872, 1730898943 }, { 1730903040, 1730904063 }, { 1730905258, 1730905771 }, { 1730905856, 1730906111 }, { 1730918400, 1730919423 }, { 1730920448, 1730922495 }, { 1730924544, 1730925567 }, { 1730927616, 1730929663 }, { 1730932736, 1730933759 }, { 1730951680, 1730952191 }, { 1730957312, 1730958335 }, { 1730967552, 1730969599 }, { 1730970624, 1730970879 }, { 1730971136, 1730971647 }, { 1730973696, 1730974719 }, { 1730979840, 1730980863 }, { 1730981888, 1730990079 }, { 1730994176, 1730995199 }, { 1730997248, 1731018751 }, { 1731020800, 1731060735 }, { 1731065856, 1731066879 }, { 1731067904, 1731068927 }, { 1731070976, 1731103743 }, { 1731106816, 1731115007 }, { 1731130368, 1731132415 }, { 1731134464, 1731135487 }, { 1731138560, 1731139583 }, { 1731142656, 1731144703 }, { 1731145728, 1731146751 }, { 1731153920, 1731154943 }, { 1731158016, 1731159039 }, { 1731161088, 1731162111 }, { 1731163136, 1731165183 }, { 1731168256, 1731170303 }, { 1731187712, 1731188735 }, { 1731212288, 1731213311 }, { 1731222528, 1731223551 }, { 1731235840, 1731239935 }, { 1731250688, 1731251199 }, { 1731254272, 1731262463 }, { 1731267584, 1731268607 }, { 1731269632, 1731270655 }, { 1731282944, 1731284991 }, { 1731288064, 1731290111 }, { 1731292160, 1731293183 }, { 1731309568, 1731311615 }, { 1731314688, 1731315711 }, { 1731318784, 1731319807 }, { 1731339264, 1731340287 }, { 1731341312, 1731349503 }, { 1731357696, 1731362815 }, { 1731363840, 1731366911 }, { 1731374080, 1731382271 }, { 1731386368, 1731394559 }, { 1731471360, 1731472383 }, { 1731479552, 1731483647 }, { 1731485696, 1731488767 }, { 1731502080, 1731504127 }, { 1731505152, 1731507199 }, { 1731508224, 1731509247 }, { 1731511296, 1731512319 }, { 1731543040, 1731545087 }, { 1731550208, 1731551231 }, { 1731552256, 1731553279 }, { 1731558400, 1731564543 }, { 1731567616, 1731568639 }, { 1731572736, 1731573759 }, { 1731578880, 1731581951 }, { 1731587072, 1731588095 }, { 1731590144, 1731591167 }, { 1731594240, 1731595263 }, { 1731604480, 1731605503 }, { 1731633152, 1731635199 }, { 1731646464, 1731647487 }, { 1731653632, 1731654655 }, { 1731663872, 1731664895 }, { 1731678208, 1731679231 }, { 1731688448, 1731689471 }, { 1731696640, 1731697663 }, { 1731701760, 1731702783 }, { 1731709952, 1731711999 }, { 1731716096, 1731717119 }, { 1731718144, 1731720191 }, { 1731725312, 1731726335 }, { 1731727360, 1731729407 }, { 1731731456, 1731732479 }, { 1731737600, 1731739647 }, { 1731741696, 1731743743 }, { 1731748864, 1731750911 }, { 1731759104, 1731760127 }, { 1731762176, 1731763199 }, { 1731770368, 1731771391 }, { 1731774464, 1731775487 }, { 1731791872, 1731792895 }, { 1731802112, 1731804159 }, { 1731808256, 1731809279 }, { 1731823616, 1731824639 }, { 1731838976, 1731839999 }, { 1731860480, 1731861503 }, { 1731939328, 1731940351 }, { 1731945472, 1731946495 }, { 1731948544, 1731953663 }, { 1731957760, 1731958783 }, { 1731961856, 1731962879 }, { 1731975168, 1731976191 }, { 1731993600, 1731994623 }, { 1731996672, 1731997695 }, { 1732027392, 1732028415 }, { 1732043776, 1732044799 }, { 1732045824, 1732046847 }, { 1732066304, 1732067327 }, { 1732075776, 1732076031 }, { 1732077568, 1732078591 }, { 1732086784, 1732087807 }, { 1732089856, 1732092927 }, { 1732094976, 1732097023 }, { 1732099072, 1732100095 }, { 1732122624, 1732123647 }, { 1732134912, 1732140031 }, { 1732141056, 1732151295 }, { 1732157440, 1732166655 }, { 1732168704, 1732174847 }, { 1732190208, 1732205567 }, { 1732217856, 1732219903 }, { 1732220928, 1732221951 }, { 1732222976, 1732230143 }, { 1732231168, 1732236287 }, { 1732243456, 1732249599 }, { 1732253696, 1732280319 }, { 1732283392, 1732285439 }, { 1732286464, 1732318207 }, { 1732325376, 1732337663 }, { 1732338688, 1732342783 }, { 1732349952, 1732358143 }, { 1732386816, 1732387839 }, { 1732388864, 1732389887 }, { 1732402176, 1732403199 }, { 1732406272, 1732407295 }, { 1732425216, 1732425471 }, { 1732429824, 1732430847 }, { 1732440064, 1732447231 }, { 1732458496, 1732459519 }, { 1732469760, 1732483071 }, { 1732488192, 1732489215 }, { 1732493312, 1732494335 }, { 1732498432, 1732499455 }, { 1732532224, 1732533247 }, { 1732535296, 1732536319 }, { 1732542464, 1732543487 }, { 1732579328, 1732580351 }, { 1732604928, 1732605951 }, { 1732611072, 1732612095 }, { 1732642816, 1732643839 }, { 1732678656, 1732679679 }, { 1732687872, 1732688127 }, { 1732697088, 1732698367 }, { 1732698624, 1732698879 }, { 1732701184, 1732702207 }, { 1732705280, 1732707327 }, { 1732718592, 1732719615 }, { 1732723712, 1732725759 }, { 1732726784, 1732729855 }, { 1732731392, 1732731647 }, { 1732737024, 1732740095 }, { 1732756480, 1732758527 }, { 1732765696, 1732766719 }, { 1732774912, 1732786175 }, { 1732800512, 1732806655 }, { 1732808704, 1732809727 }, { 1732815872, 1732816895 }, { 1732817920, 1732818943 }, { 1732829184, 1732845567 }, { 1732849664, 1732850687 }, { 1732867072, 1732869119 }, { 1732870144, 1732875263 }, { 1732880384, 1732881407 }, { 1732882432, 1732883455 }, { 1732889600, 1732891647 }, { 1732899840, 1732901887 }, { 1732909056, 1732916223 }, { 1732917248, 1732919295 }, { 1732923392, 1732924415 }, { 1732934656, 1732935679 }, { 1732940800, 1732943871 }, { 1732955136, 1732956159 }, { 1732962304, 1732963327 }, { 1732990976, 1732993023 }, { 1732995072, 1732998143 }, { 1732999168, 1733000191 }, { 1733001216, 1733002239 }, { 1733005312, 1733006335 }, { 1733007360, 1733008383 }, { 1733049344, 1733053439 }, { 1733057536, 1733058559 }, { 1733089280, 1733092351 }, { 1733106688, 1733107711 }, { 1733112832, 1733114879 }, { 1733117952, 1733118975 }, { 1733122048, 1733124095 }, { 1733133312, 1733134335 }, { 1733137408, 1733138431 }, { 1733155840, 1733156863 }, { 1733179392, 1733183487 }, { 1733196800, 1733197823 }, { 1733209088, 1733211135 }, { 1733215232, 1733216255 }, { 1733223424, 1733224447 }, { 1733236736, 1733238783 }, { 1733239808, 1733242879 }, { 1733244672, 1733249023 }, { 1733251072, 1733253119 }, { 1733265408, 1733266431 }, { 1733278720, 1733285887 }, { 1733302790, 1733303039 }, { 1733307392, 1733308415 }, { 1733314560, 1733315583 }, { 1733341184, 1733344255 }, { 1733345280, 1733346303 }, { 1733347328, 1733348351 }, { 1733355520, 1733356543 }, { 1733362688, 1733364735 }, { 1733365760, 1733367807 }, { 1733372928, 1733374975 }, { 1733386240, 1733387263 }, { 1733392384, 1733393407 }, { 1733399552, 1733400575 }, { 1733403648, 1733404671 }, { 1733408512, 1733408767 }, { 1733412864, 1733413887 }, { 1733421056, 1733422079 }, { 1733440512, 1733441535 }, { 1733442560, 1733443583 }, { 1733444608, 1733445631 }, { 1733448704, 1733449727 }, { 1733453824, 1733454847 }, { 1733484544, 1733485567 }, { 1733487616, 1733488639 }, { 1733504000, 1733505023 }, { 1733506048, 1733507071 }, { 1733508096, 1733510143 }, { 1733511168, 1733512191 }, { 1733521408, 1733522431 }, { 1733523456, 1733523967 }, { 1733558272, 1733559295 }, { 1733561344, 1733566463 }, { 1733570560, 1733571583 }, { 1733574656, 1733575679 }, { 1733576704, 1733577727 }, { 1733581824, 1733582847 }, { 1733628928, 1733629439 }, { 1733635072, 1733639167 }, { 1733645312, 1733646335 }, { 1733658624, 1733659647 }, { 1733660672, 1733661695 }, { 1733665792, 1733669887 }, { 1733681152, 1733682175 }, { 1733696512, 1733698559 }, { 1733704704, 1733705727 }, { 1733706752, 1733707007 }, { 1733709824, 1733710847 }, { 1733711872, 1733712895 }, { 1733741568, 1733756927 }, { 1733760000, 1733761023 }, { 1733763072, 1733764095 }, { 1733773312, 1733774335 }, { 1733779456, 1733780479 }, { 1733788672, 1733789695 }, { 1733800960, 1733801983 }, { 1733812224, 1733813247 }, { 1733821440, 1733826559 }, { 1733828608, 1733830655 }, { 1733835776, 1733837823 }, { 1733838848, 1733839871 }, { 1733844992, 1733847039 }, { 1733862400, 1733863423 }, { 1733874688, 1733875711 }, { 1733893120, 1733894143 }, { 1733910528, 1733916671 }, { 1733923840, 1733924863 }, { 1733929984, 1733931007 }, { 1733933056, 1733945343 }, { 1733964800, 1733965823 }, { 1733975040, 1733976063 }, { 1733977088, 1733986303 }, { 1733990400, 1733991423 }, { 1733994496, 1733995519 }, { 1733995776, 1733996031 }, { 1733996544, 1733997567 }, { 1733999616, 1734001663 }, { 1734026240, 1734028287 }, { 1734044672, 1734045695 }, { 1734055936, 1734056959 }, { 1734062080, 1734063103 }, { 1734068224, 1734069247 }, { 1734070272, 1734072319 }, { 1734077440, 1734078463 }, { 1734081536, 1734086655 }, { 1734094848, 1734104063 }, { 1734104576, 1734104831 }, { 1734105088, 1734106111 }, { 1734110208, 1734111231 }, { 1734114304, 1734115583 }, { 1734116352, 1734117375 }, { 1734122496, 1734123519 }, { 1734124544, 1734132735 }, { 1734142976, 1734150143 }, { 1734155264, 1734156287 }, { 1734169600, 1734170623 }, { 1734179072, 1734179327 }, { 1734187008, 1734188031 }, { 1734194176, 1734195199 }, { 1734200320, 1734201343 }, { 1734216704, 1734217727 }, { 1734218752, 1734219775 }, { 1734220800, 1734221055 }, { 1734221312, 1734221567 }, { 1734221824, 1734225919 }, { 1734232064, 1734233087 }, { 1734236160, 1734237183 }, { 1734243328, 1734244351 }, { 1734254592, 1734255615 }, { 1734259712, 1734260735 }, { 1734264832, 1734265855 }, { 1734286592, 1734286847 }, { 1734287104, 1734287359 }, { 1734292480, 1734293503 }, { 1734295552, 1734297599 }, { 1734301696, 1734303743 }, { 1734308864, 1734309887 }, { 1734311936, 1734312959 }, { 1734313984, 1734317055 }, { 1734318080, 1734319103 }, { 1734334464, 1734337535 }, { 1734339584, 1734344703 }, { 1734346752, 1734347775 }, { 1734365184, 1734365951 }, { 1734376448, 1734377471 }, { 1734379520, 1734380799 }, { 1734383616, 1734401023 }, { 1734412288, 1734421503 }, { 1734424576, 1734429695 }, { 1734438912, 1734440959 }, { 1734443008, 1734443775 }, { 1734447104, 1734449151 }, { 1734458368, 1734460415 }, { 1734467584, 1734468863 }, { 1734482944, 1734483455 }, { 1734486016, 1734489087 }, { 1734490112, 1734491135 }, { 1734496256, 1734497279 }, { 1734498304, 1734502399 }, { 1734507520, 1734508543 }, { 1734510592, 1734513663 }, { 1734517760, 1734519807 }, { 1734521856, 1734522879 }, { 1734525952, 1734526975 }, { 1734531072, 1734536191 }, { 1734537216, 1734541311 }, { 1734551552, 1734552063 }, { 1734554880, 1734556671 }, { 1734556928, 1734557695 }, { 1734560768, 1734561023 }, { 1734561280, 1734561535 }, { 1734567936, 1734568959 }, { 1734571008, 1734573055 }, { 1734580224, 1734581247 }, { 1734597632, 1734598655 }, { 1734600704, 1734602751 }, { 1734606848, 1734607871 }, { 1734615040, 1734616063 }, { 1734617088, 1734618111 }, { 1734619136, 1734625279 }, { 1734629376, 1734630399 }, { 1734636544, 1734637567 }, { 1734642688, 1734642943 }, { 1734643712, 1734644735 }, { 1734667264, 1734669311 }, { 1734670336, 1734672383 }, { 1734673920, 1734676479 }, { 1734679808, 1734680319 }, { 1734687744, 1734688767 }, { 1734703104, 1734705151 }, { 1734709248, 1734711295 }, { 1734718464, 1734720511 }, { 1734757376, 1734759423 }, { 1734780928, 1734782975 }, { 1734784000, 1734790143 }, { 1734791168, 1734793215 }, { 1734806528, 1734808575 }, { 1734812672, 1734813695 }, { 1734820864, 1734822911 }, { 1734848512, 1734848767 }, { 1734849024, 1734849535 }, { 1734851584, 1734852607 }, { 1734854656, 1734856703 }, { 1734859776, 1734863871 }, { 1734865152, 1734865407 }, { 1734866944, 1734871039 }, { 1734878208, 1734880255 }, { 1734885376, 1734886399 }, { 1734907904, 1734908927 }, { 1734913024, 1734914047 }, { 1734917120, 1734918143 }, { 1734933504, 1734936575 }, { 1734937600, 1734939647 }, { 1734940416, 1734940671 }, { 1734949888, 1734950911 }, { 1734964224, 1734965247 }, { 1734980608, 1734982655 }, { 1734985728, 1734987775 }, { 1734990848, 1734991871 }, { 1735009280, 1735012351 }, { 1735015424, 1735016447 }, { 1735017472, 1735018495 }, { 1735024640, 1735025663 }, { 1735030784, 1735031807 }, { 1735032832, 1735034879 }, { 1735041024, 1735042047 }, { 1735048704, 1735049215 }, { 1735050240, 1735051263 }, { 1735051776, 1735052287 }, { 1735054336, 1735055359 }, { 1735064576, 1735066623 }, { 1735072768, 1735074815 }, { 1735076864, 1735077887 }, { 1735084032, 1735085055 }, { 1735093248, 1735094271 }, { 1735107584, 1735109631 }, { 1735113728, 1735115775 }, { 1735118848, 1735122943 }, { 1735144448, 1735145471 }, { 1735172096, 1735174143 }, { 1735178240, 1735178751 }, { 1735181312, 1735182335 }, { 1735184384, 1735186686 }, { 1735186688, 1735186943 }, { 1735188480, 1735189503 }, { 1735193600, 1735194623 }, { 1735195392, 1735195647 }, { 1735201792, 1735202815 }, { 1735208960, 1735209983 }, { 1735219200, 1735220223 }, { 1735223808, 1735224319 }, { 1735260160, 1735261183 }, { 1735270400, 1735271423 }, { 1735282688, 1735283199 }, { 1735285760, 1735286783 }, { 1735291904, 1735292927 }, { 1735294720, 1735295487 }, { 1735295744, 1735298047 }, { 1735301376, 1735301631 }, { 1735302144, 1735303167 }, { 1735310336, 1735311359 }, { 1735314432, 1735315455 }, { 1735344128, 1735345151 }, { 1735371776, 1735372799 }, { 1735374336, 1735374591 }, { 1735392256, 1735393279 }, { 1735400448, 1735401471 }, { 1735410688, 1735412735 }, { 1735415808, 1735417855 }, { 1735420928, 1735422975 }, { 1735429120, 1735430143 }, { 1735437312, 1735438335 }, { 1735440384, 1735441407 }, { 1735459840, 1735460863 }, { 1735482368, 1735483391 }, { 1735495680, 1735496703 }, { 1735515136, 1735516159 }, { 1735518208, 1735520255 }, { 1735525376, 1735526399 }, { 1735531520, 1735532543 }, { 1735541760, 1735543807 }, { 1735549952, 1735550975 }, { 1735562240, 1735563263 }, { 1735564288, 1735565311 }, { 1735565568, 1735566335 }, { 1735569408, 1735569599 }, { 1735578624, 1735579647 }, { 1735584768, 1735586815 }, { 1735593984, 1735594751 }, { 1735600128, 1735608319 }, { 1735613440, 1735614463 }, { 1735620608, 1735621631 }, { 1735627776, 1735628799 }, { 1735653376, 1735654399 }, { 1735665664, 1735666687 }, { 1735674880, 1735675903 }, { 1735678976, 1735679999 }, { 1735686144, 1735687167 }, { 1735688192, 1735689727 }, { 1735693312, 1735694079 }, { 1735702528, 1735703551 }, { 1735708160, 1735708671 }, { 1735711744, 1735714815 }, { 1735725056, 1735726079 }, { 1735743488, 1735744511 }, { 1735754752, 1735755775 }, { 1735769088, 1735770111 }, { 1735777280, 1735778303 }, { 1735791360, 1735791615 }, { 1735795712, 1735796735 }, { 1735799808, 1735805951 }, { 1735809024, 1735810047 }, { 1735830784, 1735831039 }, { 1735835648, 1735837695 }, { 1735838464, 1735838975 }, { 1735839232, 1735841279 }, { 1735843328, 1735843839 }, { 1735847936, 1735851263 }, { 1735851520, 1735853055 }, { 1735855104, 1735857151 }, { 1735859200, 1735860223 }, { 1735863296, 1735864319 }, { 1735881472, 1735881727 }, { 1735886080, 1735886335 }, { 1735891968, 1735892991 }, { 1735898112, 1735899135 }, { 1735903232, 1735904255 }, { 1735909376, 1735910399 }, { 1735930880, 1735931903 }, { 1735936000, 1735937023 }, { 1735940096, 1735941119 }, { 1735942144, 1735944191 }, { 1735953408, 1735954431 }, { 1735967744, 1735968767 }, { 1735974912, 1735975935 }, { 1735996416, 1735997439 }, { 1736006656, 1736007679 }, { 1736024064, 1736026111 }, { 1736047104, 1736047359 }, { 1736047616, 1736048639 }, { 1736060928, 1736061951 }, { 1736094464, 1736094719 }, { 1736097792, 1736098815 }, { 1736110080, 1736111103 }, { 1736115200, 1736116223 }, { 1736128512, 1736129535 }, { 1736136704, 1736138751 }, { 1736143872, 1736144895 }, { 1736159232, 1736160255 }, { 1736165376, 1736169471 }, { 1736185856, 1736186879 }, { 1736192000, 1736193023 }, { 1736196096, 1736197119 }, { 1736206336, 1736207359 }, { 1736233984, 1736236031 }, { 1736250368, 1736251391 }, { 1736256512, 1736257535 }, { 1736279040, 1736280063 }, { 1736287232, 1736288255 }, { 1736295424, 1736296447 }, { 1736305664, 1736306687 }, { 1736308736, 1736309759 }, { 1736310784, 1736311807 }, { 1736314880, 1736315903 }, { 1736322048, 1736323071 }, { 1736336384, 1736337407 }, { 1736342528, 1736345599 }, { 1736364544, 1736364799 }, { 1736372480, 1736372735 }, { 1736520960, 1736521727 }, { 1736606720, 1736607743 }, { 1736611840, 1736612095 }, { 1736613888, 1736614911 }, { 1736631296, 1736632319 }, { 1736643584, 1736644607 }, { 1736647680, 1736648703 }, { 1736677376, 1736678399 }, { 1736681472, 1736682495 }, { 1736695808, 1736697855 }, { 1736699904, 1736700927 }, { 1736719360, 1736725503 }, { 1736730624, 1736735743 }, { 1736744960, 1736747007 }, { 1736752128, 1736753151 }, { 1736757248, 1736759295 }, { 1736763904, 1736764415 }, { 1736772608, 1736773631 }, { 1736779776, 1736780799 }, { 1736802304, 1736803327 }, { 1736814592, 1736815615 }, { 1736828928, 1736829951 }, { 1736838144, 1736838399 }, { 1736885248, 1736886271 }, { 1736921088, 1736922111 }, { 1736932352, 1736933375 }, { 1736938496, 1736939519 }, { 1736940544, 1736943615 }, { 1736945664, 1736946687 }, { 1736947712, 1736948735 }, { 1736949760, 1736951807 }, { 1736961024, 1736962047 }, { 1736977152, 1736977407 }, { 1736998912, 1736999935 }, { 1737025536, 1737026559 }, { 1737046528, 1737047295 }, { 1737051136, 1737052159 }, { 1737066496, 1737067007 }, { 1737069824, 1737070079 }, { 1737077760, 1737078783 }, { 1737092096, 1737093119 }, { 1737097728, 1737098239 }, { 1737100288, 1737100799 }, { 1737131520, 1737132031 }, { 1737137152, 1737137663 }, { 1737150464, 1737150975 }, { 1737153536, 1737154047 }, { 1737160192, 1737161215 }, { 1737162752, 1737163263 }, { 1737168384, 1737168895 }, { 1737191680, 1737191935 }, { 1737196288, 1737196543 }, { 1737197056, 1737198079 }, { 1737206784, 1737207295 }, { 1737213952, 1737214463 }, { 1737214976, 1737215487 }, { 1737217024, 1737217535 }, { 1737231872, 1737232383 }, { 1737246208, 1737246719 }, { 1737260544, 1737261055 }, { 1737264128, 1737264639 }, { 1737265152, 1737265663 }, { 1737267200, 1737267711 }, { 1737277440, 1737278463 }, { 1737286656, 1737287167 }, { 1737296384, 1737296895 }, { 1737303040, 1737303551 }, { 1737308672, 1737309183 }, { 1737326592, 1737327103 }, { 1737341440, 1737341951 }, { 1737342464, 1737342975 }, { 1737355776, 1737356287 }, { 1737366528, 1737367039 }, { 1737374208, 1737374719 }, { 1737380352, 1737380863 }, { 1737383936, 1737384447 }, { 1737385472, 1737385983 }, { 1737390592, 1737391103 }, { 1737391616, 1737391871 }, { 1737392128, 1737392639 }, { 1737398784, 1737399807 }, { 1737403392, 1737403903 }, { 1737405440, 1737405951 }, { 1737406976, 1737407487 }, { 1737408000, 1737408511 }, { 1737415680, 1737416191 }, { 1737418240, 1737418495 }, { 1737419264, 1737419775 }, { 1737420288, 1737420799 }, { 1737428992, 1737430015 }, { 1737432832, 1737433087 }, { 1737443840, 1737444351 }, { 1737456640, 1737457151 }, { 1737458688, 1737459711 }, { 1737469440, 1737469951 }, { 1737483264, 1737483775 }, { 1737503744, 1737504255 }, { 1737507328, 1737507839 }, { 1737508352, 1737509375 }, { 1737518080, 1737518591 }, { 1737525248, 1737525759 }, { 1737528628, 1737528831 }, { 1737530880, 1737531391 }, { 1737552128, 1737552383 }, { 1737565696, 1737566207 }, { 1737566720, 1737567231 }, { 1737576448, 1737576959 }, { 1737577984, 1737578239 }, { 1737579520, 1737580543 }, { 1737581056, 1737581567 }, { 1737583360, 1737583615 }, { 1737587200, 1737587455 }, { 1737604096, 1737604607 }, { 1737623040, 1737623551 }, { 1737639936, 1737640447 }, { 1737653760, 1737654271 }, { 1737656832, 1737657343 }, { 1737659136, 1737659391 }, { 1737680384, 1737680895 }, { 1737681920, 1737682431 }, { 1737686016, 1737686527 }, { 1737690112, 1737690623 }, { 1737718784, 1737719295 }, { 1737730816, 1737731071 }, { 1737739776, 1737740287 }, { 1737797120, 1737797631 }, { 1737819648, 1737820159 }, { 1737822464, 1737822719 }, { 1737829376, 1737829887 }, { 1737839872, 1737840127 }, { 1737846272, 1737846783 }, { 1737851904, 1737852415 }, { 1737858048, 1737858559 }, { 1737864448, 1737864703 }, { 1737866752, 1737867263 }, { 1737871872, 1737872383 }, { 1737872896, 1737873407 }, { 1737874432, 1737874943 }, { 1737880064, 1737881599 }, { 1737889792, 1737890303 }, { 1737900544, 1737901055 }, { 1737902080, 1737902591 }, { 1737914880, 1737915391 }, { 1737915904, 1737917439 }, { 1737921024, 1737921535 }, { 1737925632, 1737926143 }, { 1737927680, 1737928191 }, { 1737929728, 1737930239 }, { 1737934848, 1737935359 }, { 1737937408, 1737937919 }, { 1737938944, 1737939455 }, { 1737946112, 1737946623 }, { 1737960448, 1737960703 }, { 1737985536, 1737986047 }, { 1737987072, 1737988095 }, { 1737989632, 1737990143 }, { 1737994752, 1737995263 }, { 1738004480, 1738004991 }, { 1738020864, 1738021375 }, { 1738021888, 1738022911 }, { 1738023712, 1738023935 }, { 1738029056, 1738029567 }, { 1738034176, 1738034687 }, { 1738045440, 1738046463 }, { 1738048512, 1738049023 }, { 1738053632, 1738054143 }, { 1738057728, 1738058751 }, { 1738062336, 1738062847 }, { 1738063360, 1738064383 }, { 1738065920, 1738066431 }, { 1738067968, 1738068735 }, { 1738072064, 1738072575 }, { 1738078720, 1738079231 }, { 1738081536, 1738081791 }, { 1738089472, 1738089983 }, { 1738105344, 1738106367 }, { 1738109440, 1738109951 }, { 1738111488, 1738111999 }, { 1738113024, 1738113535 }, { 1738114048, 1738114559 }, { 1738115584, 1738116095 }, { 1738117632, 1738118143 }, { 1738121216, 1738121727 }, { 1738150400, 1738150911 }, { 1738153472, 1738154495 }, { 1738156032, 1738156543 }, { 1738162688, 1738163199 }, { 1738187264, 1738188287 }, { 1738188800, 1738189311 }, { 1738214912, 1738215423 }, { 1738220032, 1738220543 }, { 1738223616, 1738224127 }, { 1738230784, 1738231295 }, { 1738239488, 1738239999 }, { 1738243584, 1738244095 }, { 1738266112, 1738266623 }, { 1738274816, 1738275327 }, { 1738284032, 1738284543 }, { 1738294272, 1738294783 }, { 1738296832, 1738297343 }, { 1738303488, 1738303999 }, { 1738317312, 1738317823 }, { 1738321408, 1738321919 }, { 1738324480, 1738324991 }, { 1738335232, 1738335743 }, { 1738350080, 1738350591 }, { 1738377728, 1738378239 }, { 1738386944, 1738387455 }, { 1738396672, 1738397183 }, { 1738402304, 1738402815 }, { 1738407424, 1738408447 }, { 1738409984, 1738410495 }, { 1738412032, 1738412543 }, { 1738459136, 1738459647 }, { 1738465280, 1738465791 }, { 1738493952, 1738494463 }, { 1738504704, 1738505727 }, { 1738507776, 1738508287 }, { 1738509824, 1738510335 }, { 1738547200, 1738548223 }, { 1738567680, 1738568703 }, { 1738601472, 1738601983 }, { 1738604032, 1738604543 }, { 1738608128, 1738608639 }, { 1738630656, 1738631167 }, { 1738639872, 1738640383 }, { 1738657792, 1738658303 }, { 1738660864, 1738661375 }, { 1738669568, 1738670079 }, { 1738672640, 1738673151 }, { 1738678272, 1738678783 }, { 1738679808, 1738680319 }, { 1738699776, 1738700287 }, { 1738742784, 1738743295 }, { 1738743808, 1738744319 }, { 1738747392, 1738747903 }, { 1738754560, 1738755071 }, { 1738781696, 1738782207 }, { 1738802176, 1738802687 }, { 1738809344, 1738809855 }, { 1738811392, 1738812415 }, { 1738817536, 1738818047 }, { 1738820608, 1738821119 }, { 1738846720, 1738847231 }, { 1738859008, 1738859519 }, { 1738877952, 1738878463 }, { 1738880000, 1738880511 }, { 1738887680, 1738888191 }, { 1738894848, 1738895359 }, { 1738937344, 1738937855 }, { 1738945024, 1738946559 }, { 1738953728, 1738954239 }, { 1738967552, 1738968063 }, { 1738994176, 1738994687 }, { 1738995200, 1738995711 }, { 1738997760, 1738998271 }, { 1739006976, 1739007487 }, { 1739088384, 1739088895 }, { 1739106816, 1739107327 }, { 1739141632, 1739142143 }, { 1739144704, 1739145215 }, { 1739156480, 1739156991 }, { 1739170304, 1739170815 }, { 1739180544, 1739181055 }, { 1739195392, 1739195903 }, { 1739228672, 1739229183 }, { 1739248128, 1739249151 }, { 1739268096, 1739268607 }, { 1739314688, 1739315199 }, { 1739333632, 1739334143 }, { 1739366400, 1739366911 }, { 1739374336, 1739374591 }, { 1739417088, 1739417599 }, { 1739437568, 1739438591 }, { 1739480576, 1739481087 }, { 1739551232, 1739551743 }, { 1739552256, 1739552767 }, { 1739600896, 1739601407 }, { 1739644416, 1739644927 }, { 1739650048, 1739650559 }, { 1739660288, 1739660799 }, { 1739671040, 1739671551 }, { 1739732992, 1739733503 }, { 1739780096, 1739780607 }, { 1739803648, 1739804671 }, { 1739907584, 1739908095 }, { 1739957248, 1739957759 }, { 1739975168, 1739975679 }, { 1740052992, 1740053503 }, { 1740063232, 1740063743 }, { 1740077568, 1740078591 }, { 1740123136, 1740124159 }, { 1740127232, 1740127743 }, { 1740636160, 1740644351 }, { 1740648448, 1740651519 }, { 1740657664, 1740665855 }, { 1740668928, 1740674047 }, { 1740678144, 1740679167 }, { 1740684288, 1740685311 }, { 1740689408, 1740692479 }, { 1740700672, 1740701695 }, { 1740711936, 1740713983 }, { 1740732416, 1740733439 }, { 1740737536, 1740738559 }, { 1740742656, 1740743679 }, { 1740749824, 1740751871 }, { 1740755968, 1740764159 }, { 1740771328, 1740772351 }, { 1740859392, 1740860415 }, { 1740861440, 1740862463 }, { 1740870656, 1740872703 }, { 1740873728, 1740874751 }, { 1740880640, 1740880895 }, { 1740910592, 1740910847 }, { 1740911104, 1740911615 }, { 1740914688, 1740915711 }, { 1740916736, 1740917759 }, { 1740920832, 1740923903 }, { 1740941312, 1740942335 }, { 1740950528, 1740951551 }, { 1741009920, 1741010943 }, { 1741022208, 1741023231 }, { 1741034496, 1741035519 }, { 1741044736, 1741046783 }, { 1741047808, 1741048831 }, { 1741061120, 1741062143 }, { 1741069312, 1741070335 }, { 1741075456, 1741076479 }, { 1741079552, 1741080575 }, { 1741084672, 1741092863 }, { 1741136896, 1741137919 }, { 1741145088, 1741146111 }, { 1741153280, 1741154303 }, { 1741158400, 1741160447 }, { 1741173760, 1741174783 }, { 1741176832, 1741178879 }, { 1741195264, 1741210623 }, { 1741216768, 1741232127 }, { 1741233152, 1741243391 }, { 1741245440, 1741257727 }, { 1741264896, 1741303807 }, { 1741305856, 1741329407 }, { 1741330432, 1741344767 }, { 1741345792, 1741346815 }, { 1741349888, 1741350911 }, { 1741351936, 1741366271 }, { 1741371392, 1741372415 }, { 1741381632, 1741390847 }, { 1741392896, 1741393919 }, { 1741399040, 1741401087 }, { 1741406208, 1741407231 }, { 1741408256, 1741409279 }, { 1741411328, 1741413375 }, { 1741428736, 1741429759 }, { 1741441024, 1741442047 }, { 1741445120, 1741446143 }, { 1741451264, 1741452287 }, { 1741457408, 1741462527 }, { 1741472768, 1741473791 }, { 1741476864, 1741477887 }, { 1741481984, 1741484031 }, { 1741489152, 1741490175 }, { 1741493248, 1741494271 }, { 1741498368, 1741500415 }, { 1741501440, 1741502463 }, { 1741515776, 1741516799 }, { 1741517824, 1741518847 }, { 1741519360, 1741519615 }, { 1741522944, 1741523967 }, { 1741529600, 1741529855 }, { 1741536256, 1741540351 }, { 1741548544, 1741549567 }, { 1741551616, 1741554687 }, { 1741564928, 1741565951 }, { 1741591552, 1741592575 }, { 1741631488, 1741632511 }, { 1741645824, 1741646847 }, { 1741666304, 1741674495 }, { 1741675520, 1741676543 }, { 1741677568, 1741679615 }, { 1741687808, 1741689855 }, { 1741691904, 1741692927 }, { 1741694976, 1741698047 }, { 1741778944, 1741779967 }, { 1741785088, 1741786111 }, { 1741801472, 1741802495 }, { 1741803520, 1741804543 }, { 1741805568, 1741806591 }, { 1741815808, 1741816831 }, { 1741820928, 1741821951 }, { 1741840384, 1741841407 }, { 1741855744, 1741864959 }, { 1741871104, 1741872127 }, { 1741892608, 1741893631 }, { 1741905920, 1741906943 }, { 1741921280, 1741922303 }, { 1741923328, 1741924351 }, { 1741937664, 1741939711 }, { 1741944832, 1741945855 }, { 1741946880, 1741950975 }, { 1741958144, 1741960191 }, { 1741968384, 1741969407 }, { 1741972480, 1741975551 }, { 1741984768, 1741985791 }, { 1741988864, 1741989887 }, { 1741997056, 1741999103 }, { 1742005248, 1742006271 }, { 1742011392, 1742012415 }, { 1742022656, 1742038015 }, { 1742046208, 1742061567 }, { 1742076928, 1742077951 }, { 1742090240, 1742091263 }, { 1742099456, 1742100479 }, { 1742132224, 1742133247 }, { 1742139392, 1742141439 }, { 1742150656, 1742153727 }, { 1742154752, 1742156799 }, { 1742169088, 1742172159 }, { 1742173184, 1742175231 }, { 1742179328, 1742180351 }, { 1742190592, 1742191615 }, { 1742210048, 1742221311 }, { 1742225408, 1742226431 }, { 1742236672, 1742237695 }, { 1742243840, 1742244863 }, { 1742247936, 1742248959 }, { 1742259200, 1742259455 }, { 1742266368, 1742268415 }, { 1742270464, 1742290943 }, { 1742317568, 1742318591 }, { 1742320640, 1742327807 }, { 1742342144, 1742346239 }, { 1742347264, 1742364671 }, { 1742387200, 1742388223 }, { 1742389248, 1742396415 }, { 1742411776, 1742415871 }, { 1742422016, 1742422527 }, { 1742427136, 1742432255 }, { 1742450688, 1742451711 }, { 1742452736, 1742453759 }, { 1742483456, 1742488575 }, { 1742494720, 1742499839 }, { 1742500864, 1742503935 }, { 1742512128, 1742523391 }, { 1742532608, 1742550015 }, { 1742559232, 1742560767 }, { 1742561024, 1742589951 }, { 1742602240, 1742607359 }, { 1742608384, 1742662655 }, { 1742663680, 1742665727 }, { 1742671872, 1742702591 }, { 1742703616, 1742714879 }, { 1742715904, 1742734335 }, { 1742743552, 1742745599 }, { 1742748672, 1742749695 }, { 1742753792, 1742754815 }, { 1742789632, 1742793727 }, { 1742868480, 1742869503 }, { 1742874624, 1742875647 }, { 1742878976, 1742880767 }, { 1742884864, 1742885887 }, { 1742898176, 1742899199 }, { 1742904320, 1742905343 }, { 1742910464, 1742911487 }, { 1742914560, 1742915583 }, { 1742942208, 1742943231 }, { 1742948352, 1742951423 }, { 1742955520, 1742956543 }, { 1742960640, 1742961663 }, { 1742963712, 1742965759 }, { 1742980096, 1742981119 }, { 1742982144, 1742983167 }, { 1742984192, 1742985215 }, { 1742988288, 1742989311 }, { 1742998528, 1742999551 }, { 1743017984, 1743019007 }, { 1743030272, 1743031295 }, { 1743036416, 1743037439 }, { 1743040512, 1743041535 }, { 1743047680, 1743049727 }, { 1743053824, 1743055871 }, { 1743066112, 1743067135 }, { 1743076352, 1743077375 }, { 1743095808, 1743097087 }, { 1743098880, 1743099903 }, { 1743105024, 1743106047 }, { 1743115264, 1743118335 }, { 1743119360, 1743120383 }, { 1743121408, 1743123455 }, { 1743126528, 1743127551 }, { 1743133696, 1743134719 }, { 1743137792, 1743138815 }, { 1743151104, 1743152127 }, { 1743176704, 1743179775 }, { 1743180800, 1743181823 }, { 1743186944, 1743187967 }, { 1743196160, 1743198207 }, { 1743208448, 1743210495 }, { 1743228928, 1743229951 }, { 1743238144, 1743240191 }, { 1743254528, 1743255551 }, { 1743258624, 1743259647 }, { 1743294464, 1743295487 }, { 1743305984, 1743306239 }, { 1743324160, 1743325183 }, { 1743334400, 1743335423 }, { 1743336448, 1743337471 }, { 1743349760, 1743350783 }, { 1743355904, 1743356927 }, { 1743357952, 1743358975 }, { 1743381504, 1743382527 }, { 1743388672, 1743388927 }, { 1743393792, 1743394815 }, { 1743403008, 1743404031 }, { 1743421440, 1743422463 }, { 1743432704, 1743433727 }, { 1743434752, 1743435775 }, { 1743451136, 1743452159 }, { 1743466496, 1743467519 }, { 1743468544, 1743470591 }, { 1743474688, 1743475711 }, { 1743475968, 1743476223 }, { 1743476480, 1743476735 }, { 1743488000, 1743491327 }, { 1743492096, 1743493119 }, { 1743501312, 1743502335 }, { 1743503360, 1743504383 }, { 1743505408, 1743506431 }, { 1743510528, 1743545343 }, { 1743550464, 1743551487 }, { 1743566848, 1743567871 }, { 1743576064, 1743577087 }, { 1743579136, 1743580159 }, { 1743581184, 1743589375 }, { 1743591424, 1743593471 }, { 1743602688, 1743603711 }, { 1743607808, 1743608831 }, { 1743624192, 1743625215 }, { 1743630336, 1743652863 }, { 1743655424, 1743666175 }, { 1743673344, 1743676415 }, { 1743684608, 1743685631 }, { 1743686656, 1743688703 }, { 1743691776, 1743698431 }, { 1743698944, 1743699967 }, { 1743700992, 1743702015 }, { 1743703040, 1743704063 }, { 1743715328, 1743717375 }, { 1743727616, 1743728639 }, { 1743733760, 1743734783 }, { 1743755264, 1743757311 }, { 1743761408, 1743764479 }, { 1743765504, 1743767551 }, { 1743768576, 1743770623 }, { 1743773696, 1743774719 }, { 1743778816, 1743779839 }, { 1743785984, 1743787007 }, { 1743791104, 1743792127 }, { 1743800320, 1743801343 }, { 1743803392, 1743804415 }, { 1743813632, 1743814655 }, { 1743822336, 1743822847 }, { 1743825920, 1743826943 }, { 1743830016, 1743831039 }, { 1743844352, 1743845375 }, { 1743850496, 1743851519 }, { 1743870976, 1743873023 }, { 1743888384, 1743889407 }, { 1743894528, 1743896575 }, { 1743903744, 1743904767 }, { 1743929344, 1743930367 }, { 1743945728, 1743946495 }, { 1743953920, 1743954943 }, { 1743955968, 1743959039 }, { 1743964160, 1743965183 }, { 1743967232, 1743968255 }, { 1743969280, 1743970303 }, { 1743974400, 1743975423 }, { 1744013312, 1744014335 }, { 1744043008, 1744044031 }, { 1744048128, 1744049151 }, { 1744058368, 1744058623 }, { 1744058880, 1744066559 }, { 1744086016, 1744087039 }, { 1744103424, 1744104447 }, { 1744108544, 1744109567 }, { 1744115456, 1744115711 }, { 1744122880, 1744123903 }, { 1744124928, 1744125951 }, { 1744130048, 1744131071 }, { 1744141312, 1744143359 }, { 1744177152, 1744179199 }, { 1744205824, 1744207871 }, { 1744208896, 1744209919 }, { 1744214016, 1744216063 }, { 1744283648, 1744286719 }, { 1744291840, 1744292863 }, { 1744294912, 1744295935 }, { 1744306176, 1744306687 }, { 1744322560, 1744323583 }, { 1744331776, 1744332799 }, { 1744337920, 1744338943 }, { 1744345088, 1744346111 }, { 1744349184, 1744350207 }, { 1744355328, 1744356351 }, { 1744360448, 1744361471 }, { 1744362496, 1744365567 }, { 1744373760, 1744375807 }, { 1744385024, 1744386047 }, { 1744398336, 1744398591 }, { 1744398848, 1744399359 }, { 1744404480, 1744405503 }, { 1744406528, 1744407551 }, { 1744408576, 1744409599 }, { 1744413696, 1744417791 }, { 1744419840, 1744421887 }, { 1744434176, 1744435199 }, { 1744436224, 1744437247 }, { 1744445440, 1744446463 }, { 1744463872, 1744464895 }, { 1744468992, 1744470015 }, { 1744483328, 1744484351 }, { 1744486400, 1744487423 }, { 1744492544, 1744493567 }, { 1744494592, 1744495615 }, { 1744497664, 1744498687 }, { 1744500736, 1744502783 }, { 1744510976, 1744511999 }, { 1744524288, 1744525311 }, { 1744527360, 1744528383 }, { 1744534528, 1744535551 }, { 1744543744, 1744544767 }, { 1744551936, 1744552959 }, { 1744555008, 1744556031 }, { 1744564224, 1744565247 }, { 1744575488, 1744576511 }, { 1744577536, 1744578559 }, { 1744584704, 1744585727 }, { 1744592896, 1744593919 }, { 1744594944, 1744595967 }, { 1744609792, 1744610047 }, { 1744612352, 1744613375 }, { 1744620544, 1744622591 }, { 1744627712, 1744628735 }, { 1744631808, 1744632831 }, { 1744634880, 1744635903 }, { 1744649216, 1744650239 }, { 1744686080, 1744687103 }, { 1744690176, 1744692223 }, { 1744693248, 1744694271 }, { 1744701440, 1744702463 }, { 1744704512, 1744705535 }, { 1744715776, 1744717823 }, { 1744718848, 1744719871 }, { 1744728064, 1744729087 }, { 1744744448, 1744745471 }, { 1744747520, 1744748543 }, { 1744749568, 1744749823 }, { 1744782336, 1744783359 }, { 1744787456, 1744789503 }, { 1744799744, 1744801791 }, { 1744812032, 1744813055 }, { 1744816128, 1744817151 }, { 1744819200, 1744820223 }, { 1744823296, 1744824319 }, { 1746690816, 1746691071 }, { 1746691328, 1746691583 }, { 1747309568, 1747309823 }, { 1747310080, 1747310367 }, { 1747725312, 1747725567 }, { 1747764224, 1747764479 }, { 1749836288, 1749836799 }, { 1749866240, 1749866495 }, { 1752006656, 1752006911 }, { 1752086528, 1752087039 }, { 1753497600, 1753497855 }, { 1754268064, 1754268159 }, { 1754269200, 1754269455 }, { 1754271360, 1754271487 }, { 1754274704, 1754274815 }, { 1754279200, 1754279423 }, { 1754285184, 1754285311 }, { 1754289920, 1754290119 }, { 1754295808, 1754296063 }, { 1754323504, 1754323711 }, { 1754331648, 1754331855 }, { 1754332288, 1754332415 }, { 1754332832, 1754332927 }, { 1754822144, 1754822655 }, { 1755735808, 1755736063 }, { 1755741184, 1755741951 }, { 1755747328, 1755748351 }, { 1755754240, 1755754495 }, { 1755755520, 1755756287 }, { 1755756544, 1755756799 }, { 1755757056, 1755757567 }, { 1755758336, 1755758591 }, { 1756096473, 1756096511 }, { 1756096885, 1756097015 }, { 1756097371, 1756097394 }, { 1757502464, 1757502727 }, { 1757502976, 1757503247 }, { 1758345216, 1758345471 }, { 1758345728, 1758345983 }, { 1758354944, 1758355199 }, { 1758558976, 1758559487 }, { 1759495680, 1759495935 }, { 1759503360, 1759503615 }, { 1759503872, 1759504127 }, { 1759514880, 1759515135 }, { 1759709440, 1759709695 }, { 1759718656, 1759718719 }, { 1759723872, 1759723887 }, { 1759725632, 1759725695 }, { 1759727808, 1759727871 }, { 1759728544, 1759728639 }, { 1759752256, 1759752271 }, { 1759752960, 1759753215 }, { 1760070427, 1760070427 }, { 1760072663, 1760072665 }, { 1760074080, 1760074239 }, { 1760074506, 1760074623 }, { 1760075041, 1760075255 }, { 1760075525, 1760075775 }, { 1760382976, 1760385023 }, { 1760863232, 1760864255 }, { 1778384896, 1778385151 }, { 1778385408, 1778393087 }, { 1778396160, 1778397183 }, { 1778401280, 1778417663 }, { 1778515968, 1778556415 }, { 1778556928, 1778593791 }, { 1778597888, 1779040255 }, { 1779105792, 1781727231 }, { 1781792768, 1782579199 }, { 1783234560, 1783365631 }, { 1783627776, 1784676351 }, { 1785462784, 1786773503 }, { 1793064960, 1794113535 }, { 1805016320, 1805016575 }, { 1805107200, 1805115415 }, { 1805115648, 1805116015 }, { 1805116160, 1805116583 }, { 1805116672, 1805120511 }, { 1805156688, 1805156847 }, { 1805166352, 1805166463 }, { 1805168848, 1805168895 }, { 1805175120, 1805175295 }, { 1805182208, 1805182463 }, { 1805322752, 1805323007 }, { 1805333248, 1805334015 }, { 1806537472, 1806537727 }, { 1806581632, 1806581759 }, { 1806628480, 1806628607 }, { 1806696448, 1806753783 }, { 1806753792, 1806804679 }, { 1806804736, 1806827519 }, { 1807125504, 1807125759 }, { 1807126016, 1807126527 }, { 1822815232, 1822815487 }, { 1822815744, 1822817279 }, { 1823207648, 1823207679 }, { 1823208704, 1823208959 }, { 1823209280, 1823209471 }, { 1823209792, 1823209983 }, { 1823211136, 1823211263 }, { 1823689232, 1823689471 }, { 1823693056, 1823693311 }, { 1823696128, 1823696383 }, { 1823698944, 1823699199 }, { 1823699200, 1823699455 }, { 1823699712, 1823699967 }, { 1823700480, 1823700735 }, { 1823701760, 1823702015 }, { 1824130144, 1824130303 }, { 1824132608, 1824132863 }, { 1824133120, 1824133375 }, { 1824135232, 1824135423 }, { 1824136448, 1824136703 }, { 1824137024, 1824137279 }, { 1824138112, 1824138239 }, { 1824140992, 1824141055 }, { 1824142144, 1824142335 }, { 1824144448, 1824144639 }, { 1824144960, 1824145151 }, { 1824145408, 1824145663 }, { 1824145984, 1824146175 }, { 1824148992, 1824149247 }, { 1824150912, 1824151039 }, { 1824151296, 1824151551 }, { 1824153664, 1824153855 }, { 1824159040, 1824159231 }, { 1824162176, 1824162303 }, { 1824162560, 1824162815 }, { 1824165120, 1824165375 }, { 1824165824, 1824166143 }, { 1824166592, 1824166655 }, { 1824174080, 1824174335 }, { 1824180608, 1824180735 }, { 1824189824, 1824189951 }, { 1832681472, 1832714239 }, { 1832747008, 1832779775 }, { 1832812544, 1832845311 }, { 1832878080, 1832910847 }, { 1833177088, 1833179135 }, { 1833191424, 1833193471 }, { 1833201664, 1833203711 }, { 1833207808, 1833209855 }, { 1833216000, 1833218047 }, { 1833220096, 1833222143 }, { 1833224192, 1833228287 }, { 1833242624, 1833246719 }, { 1833256960, 1833259007 }, { 1833283584, 1833285631 }, { 1833310208, 1833312255 }, { 1833351168, 1833353215 }, { 1833367552, 1833369599 }, { 1833370624, 1833370879 }, { 1833371136, 1833371391 }, { 1833371648, 1833373695 }, { 1833414656, 1833416703 }, { 1833418752, 1833422847 }, { 1833431040, 1833433087 }, { 1833451520, 1833455615 }, { 1833467904, 1833468415 }, { 1833469184, 1833469439 }, { 1833470208, 1833470975 }, { 1833471232, 1833471487 }, { 1833471744, 1833471999 }, { 1833492480, 1833504767 }, { 1833508864, 1833512959 }, { 1833549824, 1833553919 }, { 1833594880, 1833603071 }, { 1833607168, 1833611263 }, { 1833619456, 1833623551 }, { 1833664512, 1833668607 }, { 1833693184, 1833697279 }, { 1834454784, 1834455039 }, { 1834876928, 1834885119 }, { 1834893312, 1834901503 }, { 1834921728, 1834921983 }, { 1834921984, 1834930175 }, { 1834930688, 1834931199 }, { 1834946560, 1834948607 }, { 1834956800, 1834957055 }, { 1834960896, 1834964991 }, { 1834967040, 1834971135 }, { 1834973184, 1834974207 }, { 1834983424, 1834985471 }, { 1834991616, 1834993663 }, { 1834995712, 1835001855 }, { 1835005952, 1835007999 }, { 1835614208, 1835622399 }, { 1835630592, 1835633151 }, { 1835633408, 1835635455 }, { 1835638784, 1835646975 }, { 1835668480, 1835668991 }, { 1835669248, 1835669503 }, { 1835696128, 1835704319 }, { 1835712512, 1835720703 }, { 1835770880, 1835771391 }, { 1835771648, 1835771903 }, { 1835774976, 1835778047 }, { 1835802624, 1835810815 }, { 1835913216, 1835917311 }, { 1835933696, 1835950079 }, { 1835991040, 1835999231 }, { 1836007424, 1836015615 }, { 1836023808, 1836040191 }, { 1836580864, 1836597247 }, { 1836613632, 1836630015 }, { 1836810240, 1836826623 }, { 1836843008, 1836875775 }, { 1836892160, 1836908543 }, { 1836974080, 1836990463 }, { 1837023232, 1837039615 }, { 1837072384, 1837088767 }, { 1839267840, 1839300607 }, { 1839454208, 1839456255 }, { 1839460352, 1839462399 }, { 1839529984, 1839562751 }, { 1839693824, 1839726591 }, { 1839759360, 1839792127 }, { 1839824896, 1839890431 }, { 1839923200, 1839955967 }, { 1839988736, 1840021503 }, { 1840054272, 1840087039 }, { 1840119808, 1840152575 }, { 1840775168, 1840840703 }, { 1840971776, 1841102847 }, { 1841233920, 1841299455 }, { 1841430528, 1841561599 }, { 1841565696, 1841569791 }, { 1841577984, 1841582079 }, { 1841586176, 1841590271 }, { 1841594368, 1841598463 }, { 1841603584, 1841604607 }, { 1841605632, 1841606399 }, { 1841610752, 1841618943 }, { 1841629184, 1841635327 }, { 1841639424, 1841641471 }, { 1841645568, 1841647615 }, { 1841649664, 1841651711 }, { 1841655808, 1841668095 }, { 1841668608, 1841669119 }, { 1841676288, 1841680383 }, { 1841684480, 1841686527 }, { 1841690624, 1841692671 }, { 1841709056, 1841725439 }, { 1841733632, 1841758207 }, { 1841848320, 1841864703 }, { 1841905664, 1841922047 }, { 1841938432, 1841946623 }, { 1841948672, 1841952767 }, { 1841954816, 1841971199 }, { 1841995776, 1842003967 }, { 1842069504, 1842077695 }, { 1842165760, 1842166527 }, { 1842167296, 1842167551 }, { 1842171904, 1842173951 }, { 1842188288, 1842190335 }, { 1842213376, 1842213631 }, { 1842214912, 1842216959 }, { 1842249728, 1842257919 }, { 1842282496, 1842286591 }, { 1842302976, 1842307071 }, { 1842323456, 1842331647 }, { 1842339840, 1842343935 }, { 1843462144, 1843478527 }, { 1843511296, 1843527679 }, { 1843544064, 1843560447 }, { 1843576832, 1843593215 }, { 1843642368, 1843658751 }, { 1843732480, 1843765247 }, { 1843781632, 1843789823 }, { 1843822592, 1843838975 }, { 1843947520, 1843949567 }, { 1843968000, 1843970047 }, { 1843984384, 1843986431 }, { 1844029440, 1844031487 }, { 1844037632, 1844039167 }, { 1844039424, 1844041727 }, { 1844043776, 1844049919 }, { 1844054016, 1844056063 }, { 1844058112, 1844060671 }, { 1844084736, 1844086783 }, { 1844090880, 1844092927 }, { 1844123648, 1844125695 }, { 1844140032, 1844142079 }, { 1844158464, 1844160511 }, { 1844164608, 1844166655 }, { 1844170752, 1844174847 }, { 1844197120, 1844197375 }, { 1844199424, 1844203519 }, { 1844207616, 1844211711 }, { 1844236288, 1844252671 }, { 1844273152, 1844275711 }, { 1844276224, 1844277247 }, { 1844285440, 1844289535 }, { 1844305920, 1844310015 }, { 1844334592, 1844342783 }, { 1844365312, 1844367359 }, { 1844375552, 1844379647 }, { 1844412416, 1844414207 }, { 1844414976, 1844415287 }, { 1844415744, 1844416511 }, { 1844432896, 1844436991 }, { 1844707328, 1844772863 }, { 1844969472, 1844970239 }, { 1844970496, 1844971519 }, { 1844972032, 1844973567 }, { 1844977920, 1844980479 }, { 1844980736, 1844983807 }, { 1844984064, 1845003007 }, { 1845003264, 1845006335 }, { 1845010432, 1845019647 }, { 1845019904, 1845020159 }, { 1845020416, 1845022719 }, { 1845023744, 1845023999 }, { 1845024768, 1845025791 }, { 1845026304, 1845028607 }, { 1845029376, 1845029887 }, { 1845030144, 1845031935 }, { 1845032192, 1845033727 }, { 1845033984, 1845034495 }, { 1845034752, 1845035007 }, { 1845231616, 1845297151 }, { 1845424128, 1845428223 }, { 1845886976, 1846018047 }, { 1846542336, 1846804479 }, { 1847732224, 1847734271 }, { 1848115200, 1848377343 }, { 1848380416, 1848381439 }, { 1848414208, 1848418303 }, { 1848639488, 1848705023 }, { 1848800256, 1848800383 }, { 1848836096, 1849032703 }, { 1849163776, 1849819135 }, { 1850212352, 1850343423 }, { 1850408960, 1850490879 }, { 1850508288, 1850509311 }, { 1850514432, 1850515455 }, { 1850521600, 1850522623 }, { 1850523648, 1850572799 }, { 1850736640, 1851523071 }, { 1851540480, 1851541503 }, { 1851596800, 1851604991 }, { 1851654144, 1853882367 }, { 1855455232, 1855848447 }, { 1856316416, 1856316671 }, { 1856316928, 1856317439 }, { 1856317952, 1856318463 }, { 1856318720, 1856318975 }, { 1856319744, 1856320255 }, { 1856372736, 1856503807 }, { 1856815104, 1856843775 }, { 1856847872, 1856864255 }, { 1856880640, 1856888831 }, { 1857028096, 1860173823 }, { 1860435968, 1860698111 }, { 1860706304, 1860714495 }, { 1860960256, 1861091327 }, { 1861222400, 1866465279 }, { 1866596352, 1866661887 }, { 1866711040, 1866715135 }, { 1866743808, 1866751999 }, { 1866989568, 1867513855 }, { 1867841536, 1867907071 }, { 1868283904, 1868292095 }, { 1868363776, 1868365823 }, { 1869611008, 1870004223 }, { 1870055424, 1870057471 }, { 1870086144, 1870110719 }, { 1870135296, 1870462975 }, { 1870528512, 1873281023 }, { 1873412096, 1873477631 }, { 1873543168, 1874329599 }, { 1874460672, 1874591743 }, { 1874853888, 1876426751 }, { 1876761600, 1876761855 }, { 1876787200, 1876885503 }, { 1876886528, 1876890623 }, { 1876946944, 1876947967 }, { 1876948992, 1876950015 }, { 1876951040, 1877475327 }, { 1877696512, 1877704703 }, { 1877711872, 1877721087 }, { 1879048192, 1883504639 }, { 1883832320, 1884028927 }, { 1884291072, 1885863935 }, { 1886224384, 1886257151 }, { 1886322688, 1886781439 }, { 1887043584, 1887764479 }, { 1888038912, 1888040959 }, { 1891631104, 1891893247 }, { 1893728256, 1896480767 }, { 1896595456, 1896603647 }, { 1896611840, 1897070591 }, { 1897261056, 1897263103 }, { 1897398272, 1897660415 }, { 1897857024, 1897922559 }, { 1898708992, 1899233279 }, { 1899274240, 1899282431 }, { 1899291648, 1899292671 }, { 1899364352, 1899724799 }, { 1899749376, 1899750399 }, { 1899888640, 1904345087 }, { 1904369664, 1904375807 }, { 1904476160, 1905262591 }, { 1908539392, 1908670463 }, { 1908761600, 1908763647 }, { 1908932608, 1909129215 }, { 1909194752, 1909456895 }, { 1909481472, 1909587967 }, { 1909719040, 1909735423 }, { 1909744640, 1909745663 }, { 1909766144, 1909768191 }, { 1909784576, 1909817343 }, { 1909850112, 1909981183 }, { 1910112256, 1912340479 }, { 1914437632, 1914503167 }, { 1914650624, 1914652671 }, { 1916141568, 1916272639 }, { 1916534784, 1916960767 }, { 1916977152, 1916985343 }, { 1916987392, 1917124607 }, { 1917796352, 1917812735 }, { 1917845504, 1919680511 }, { 1919811584, 1919815679 }, { 1919827968, 1919844351 }, { 1919877120, 1919877631 }, { 1919881216, 1919885311 }, { 1919918080, 1919926271 }, { 1919942656, 1919947519 }, { 1919948288, 1919975935 }, { 1919976192, 1919999999 }, { 1920002560, 1920003071 }, { 1920008192, 1920057343 }, { 1920058112, 1920069631 }, { 1920070144, 1920070399 }, { 1920071936, 1920072703 }, { 1920073472, 1920434175 }, { 1920450560, 1920466943 }, { 1921253376, 1921318911 }, { 1921449984, 1921515519 }, { 1921646592, 1921777663 }, { 1921859584, 1921861631 }, { 1921863680, 1921865727 }, { 1921875968, 1921892351 }, { 1925447680, 1925578751 }, { 1925642240, 1925644287 }, { 1926234112, 1929379839 }, { 1930952704, 1931345919 }, { 1931427840, 1931431935 }, { 1931476992, 1931739135 }, { 1932146688, 1932147711 }, { 1932263424, 1933574143 }, { 1933918208, 1933922303 }, { 1934884864, 1934901247 }, { 1934934016, 1934942207 }, { 1934999552, 1935015935 }, { 1935933440, 1936457727 }, { 1937244160, 1937506303 }, { 1937510400, 1937514495 }, { 1939079168, 1939865599 }, { 1940275200, 1940283391 }, { 1940389888, 1940914175 }, { 1941176320, 1941438463 }, { 1941635072, 1941639167 }, { 1941831680, 1945108479 }, { 1946159104, 1946161151 }, { 1946163200, 1946165247 }, { 1946222592, 1946943487 }, { 1947009024, 1947074559 }, { 1947205632, 1948254207 }, { 1949433856, 1949437951 }, { 1949564928, 1949958143 }, { 1949990912, 1949995007 }, { 1950011392, 1950015487 }, { 1950089216, 1950351359 }, { 1950482432, 1950515199 }, { 1950529536, 1950530559 }, { 1950648320, 1950650367 }, { 1950658560, 1950660607 }, { 1950679040, 1950777343 }, { 1951137792, 1951399935 }, { 1951727616, 1951793151 }, { 1952026624, 1952030719 }, { 1952077824, 1952079871 }, { 1952102400, 1952104447 }, { 1952382976, 1952448511 }, { 1953497088, 1953890303 }, { 1954545664, 1958805503 }, { 1958809600, 1958821887 }, { 1958847488, 1958848511 }, { 1958850560, 1958852607 }, { 1958871040, 1959067647 }, { 1959108608, 1959110655 }, { 1959113728, 1959113983 }, { 1959133184, 1959239679 }, { 1959526400, 1959559167 }, { 1959560192, 1959561215 }, { 1959581696, 1959582719 }, { 1959585792, 1959586815 }, { 1959591936, 1959657471 }, { 1959681537, 1959681791 }, { 1959684608, 1959685119 }, { 1959702528, 1959703551 }, { 1959723008, 1960050687 }, { 1960091648, 1960095743 }, { 1960121600, 1960121855 }, { 1960127488, 1960128511 }, { 1960132608, 1960181759 }, { 1960189952, 1960202239 }, { 1960209920, 1960210431 }, { 1960214528, 1960574975 }, { 1960837120, 1961885695 }, { 1962016768, 1962541055 }, { 1962622976, 1962639359 }, { 1962672128, 1962803199 }, { 1962829824, 1962831871 }, { 1962835968, 1962868735 }, { 1962901504, 1962934271 }, { 1963458560, 1963982847 }, { 1964123648, 1964123903 }, { 1964310528, 1965948927 }, { 1966080000, 1966276607 }, { 1966309376, 1966342143 }, { 1966419968, 1966424063 }, { 1966452736, 1966456831 }, { 1966669824, 1966768127 }, { 1966800896, 1967783935 }, { 1967800320, 1967808511 }, { 1967816704, 1969225727 }, { 1969487872, 1969618943 }, { 1969688576, 1969692671 }, { 1969694720, 1969696767 }, { 1969702912, 1969704959 }, { 1969717248, 1969721343 }, { 1969793024, 1969795071 }, { 1969881088, 1970012159 }, { 1970274304, 1970798591 }, { 1970814976, 1970876159 }, { 1970876416, 1970915327 }, { 1970962432, 1970995199 }, { 1971060736, 1975517183 }, { 1981284352, 1981424639 }, { 1981425664, 1981442047 }, { 1981444096, 1981446143 }, { 1981446400, 1981449215 }, { 1981449472, 1981452287 }, { 1981456384, 1981460479 }, { 1981463552, 1981480959 }, { 1981546496, 1981808639 }, { 1983905792, 1983906815 }, { 1983970304, 1983971327 }, { 1984036864, 1984102399 }, { 1984131072, 1984135167 }, { 1984430080, 1985085439 }, { 1985216512, 1985347583 }, { 1985486848, 1985609727 }, { 1985736704, 1985740799 }, { 1986400256, 1986406399 }, { 1986503680, 1986507775 }, { 1986523136, 1986523391 }, { 1986523648, 1986525183 }, { 1987051520, 1988034559 }, { 1988067328, 1988075519 }, { 1988362240, 1988624383 }, { 1989148672, 1989410815 }, { 1991376896, 1991442431 }, { 1991507968, 1991770111 }, { 1991802880, 1991834231 }, { 1991834233, 1991835647 }, { 1991901184, 1992097791 }, { 1992163328, 1992232191 }, { 1992232960, 1992235007 }, { 1992245248, 1992250367 }, { 1992261632, 1992269823 }, { 1992273920, 1992278527 }, { 1992282112, 1992282367 }, { 1992284160, 1992284415 }, { 1992285952, 1992286463 }, { 1992290304, 1992364031 }, { 1992372224, 1992374271 }, { 1992384512, 1992392703 }, { 1992393216, 1992394751 }, { 1992395008, 1992395263 }, { 1992395520, 1992396031 }, { 1992398080, 1992398847 }, { 1992401664, 1992402943 }, { 1992403200, 1992403711 }, { 1992403968, 1992404223 }, { 1992404480, 1992404991 }, { 1992405248, 1992405759 }, { 1992406016, 1992482815 }, { 1992483072, 1992483839 }, { 1992486912, 1992488959 }, { 1992491008, 1992818687 }, { 1992949760, 1993342975 }, { 1993605120, 1993736191 }, { 1993850880, 1993867263 }, { 1994391552, 1994850303 }, { 1995374592, 1995440127 }, { 1995571200, 1995636735 }, { 1995702272, 1996627967 }, { 1996652544, 1997012991 }, { 1997017088, 1997029375 }, { 1997037568, 1997045759 }, { 1997072384, 1997076479 }, { 1997078016, 1997078527 }, { 1997144064, 1997176831 }, { 1997316096, 1997320191 }, { 1997360128, 1997365247 }, { 1997369344, 1997373439 }, { 1997506560, 1997508607 }, { 1997537280, 1997602815 }, { 1997717504, 1997723647 }, { 1997725696, 1998061567 }, { 1998274560, 1998323711 }, { 1998325248, 1998325503 }, { 1998336768, 1998337023 }, { 1998337280, 1998337791 }, { 1998338560, 1998338815 }, { 1998341376, 1998341631 }, { 1998467072, 1998471167 }, { 1998562560, 1998562815 }, { 1998569472, 1998577663 }, { 1998585856, 1999130623 }, { 1999142912, 1999249407 }, { 1999273984, 1999278079 }, { 1999298560, 1999306751 }, { 1999372288, 1999503359 }, { 1999634432, 2000158719 }, { 2000224256, 2000355327 }, { 2000388096, 2000617471 }, { 2000625664, 2000633855 }, { 2001457152, 2001461247 }, { 2001600512, 2001797119 }, { 2001915904, 2001919999 }, { 2001993728, 2002518015 }, { 2002780160, 2003304447 }, { 2003566592, 2003697663 }, { 2003828736, 2006188031 }, { 2006228992, 2006237183 }, { 2006433792, 2006450175 }, { 2007025664, 2007027711 }, { 2007070720, 2007084031 }, { 2007085056, 2007498751 }, { 2008023040, 2009071615 }, { 2011693056, 2011824127 }, { 2011922432, 2011936255 }, { 2011936512, 2011938815 }, { 2012741632, 2013003775 }, { 2013028352, 2013030399 }, { 2013065216, 2014314495 }, { 2014838784, 2015100927 }, { 2015232000, 2016542719 }, { 2016673792, 2016935935 }, { 2017460224, 2017984511 }, { 2017992704, 2018000895 }, { 2018017280, 2018050047 }, { 2018246656, 2019033087 }, { 2019035136, 2019037183 }, { 2019164160, 2019360767 }, { 2019426304, 2019557375 }, { 2021654528, 2022178815 }, { 2022182912, 2022184959 }, { 2022211584, 2022213631 }, { 2022214656, 2022227967 }, { 2022244352, 2022277119 }, { 2022670336, 2022678527 }, { 2025848832, 2030043135 }, { 2030045184, 2030051327 }, { 2030305280, 2030306303 }, { 2030307328, 2030436351 }, { 2030567424, 2032533759 }, { 2032664576, 2032926719 }, { 2033057792, 2033074175 }, { 2033077248, 2033078271 }, { 2033090560, 2033319935 }, { 2033321984, 2033324031 }, { 2033385472, 2033451007 }, { 2033491968, 2033500159 }, { 2033504256, 2033516543 }, { 2033627136, 2033629183 }, { 2033647616, 2033663999 }, { 2033713152, 2033876991 }, { 2033879040, 2033887231 }, { 2033909760, 2033914111 }, { 2033914368, 2033917695 }, { 2033975296, 2034237439 }, { 2034499584, 2034761727 }, { 2035023872, 2035154943 }, { 2035253248, 2035269631 }, { 2035875840, 2035941375 }, { 2036033536, 2036035583 }, { 2036049920, 2036056063 }, { 2036629504, 2036678655 }, { 2036715520, 2036719615 }, { 2042626048, 2043150335 }, { 2043199488, 2043201535 }, { 2043215872, 2043281407 }, { 2043412480, 2043674623 }, { 2044723200, 2045771775 }, { 2046296064, 2046558207 }, { 2046754816, 2046820351 }, { 2046836736, 2046885887 }, { 2047082496, 2047346175 }, { 2047346944, 2047347199 }, { 2047348480, 2047377407 }, { 2047385600, 2047389695 }, { 2047410176, 2047475711 }, { 2047508480, 2047510015 }, { 2047510528, 2047511039 }, { 2047517696, 2047517951 }, { 2047518720, 2047520767 }, { 2047521024, 2047524863 }, { 2047525120, 2047525887 }, { 2047526912, 2047532031 }, { 2047534080, 2047538175 }, { 2047541248, 2047553535 }, { 2047556352, 2047556607 }, { 2047557632, 2047574015 }, { 2047606784, 2047770879 }, { 2047771904, 2047772159 }, { 2047772928, 2047773183 }, { 2047773440, 2047803391 }, { 2049966080, 2050047999 }, { 2050162688, 2050228223 }, { 2051014656, 2053242879 }, { 2053505024, 2053509119 }, { 2053521408, 2053529599 }, { 2054160384, 2054376447 }, { 2054377472, 2054422527 }, { 2054619136, 2054684671 }, { 2055234560, 2055235583 }, { 2055239680, 2055241727 }, { 2055733248, 2056257535 }, { 2056290304, 2056323071 }, { 2056830976, 2056847359 }, { 2057043968, 2057306111 }, { 2059141120, 2059665407 }, { 2059796480, 2059862015 }, { 2059937792, 2059939839 }, { 2059943936, 2059952127 }, { 2059954176, 2059956223 }, { 2059958272, 2059960319 }, { 2060005376, 2060009471 }, { 2060189696, 2060451839 }, { 2061500416, 2063073279 }, { 2063079424, 2063081471 }, { 2063085568, 2063089663 }, { 2063108976, 2063109119 }, { 2063109424, 2063109647 }, { 2063109888, 2063110143 }, { 2063119816, 2063119871 }, { 2063548416, 2063550463 }, { 2063630336, 2063646719 }, { 2063859712, 2064646143 }, { 2066841600, 2066874367 }, { 2066915328, 2066923519 }, { 2067005440, 2067447807 }, { 2067447808, 2067448319 }, { 2067456000, 2067562495 }, { 2067578880, 2067726335 }, { 2067791872, 2070052863 }, { 2070118400, 2070159359 }, { 2070216704, 2070282239 }, { 2070347776, 2070380543 }, { 2070708736, 2070712319 }, { 2070728704, 2070732799 }, { 2070937600, 2072510463 }, { 2072530944, 2072535039 }, { 2072576000, 2072772607 }, { 2073034752, 2075131903 }, { 2075147264, 2075148287 }, { 2075152384, 2075156479 }, { 2075197440, 2076180479 }, { 2076442624, 2076573695 }, { 2076672000, 2076704767 }, { 2077097984, 2077229055 }, { 2078801920, 2079064063 }, { 2079457280, 2079490047 }, { 2079506432, 2079508479 }, { 2079588352, 2079850495 }, { 2079916032, 2079981567 }, { 2080239616, 2080240639 }, { 2080268288, 2080270335 }, { 2080784384, 2080800767 }, { 2081292288, 2081554431 }, { 2081685504, 2081947647 }, { 2082258944, 2082308095 }, { 2082406400, 2082471935 }, { 2083024896, 2083053567 }, { 2083057664, 2083058687 }, { 2083127296, 2083192831 }, { 2083454976, 2083471359 }, { 2084569088, 2084732927 }, { 2084765696, 2084892671 }, { 2084893696, 2085617663 }, { 2086141952, 2086666239 }, { 2087454720, 2087456767 }, { 2087462912, 2087464959 }, { 2087542784, 2087544831 }, { 2087714816, 2088239103 }, { 2088632320, 2089287679 }, { 2090041344, 2090074111 }, { 2090240256, 2090240511 }, { 2090270720, 2090401791 }, { 2090860544, 2091384831 }, { 2091646976, 2091909119 }, { 2092957696, 2093088767 }, { 2093219840, 2093285375 }, { 2093481984, 2094006271 }, { 2094792704, 2096152575 }, { 2096234496, 2096300031 }, { 2096349184, 2096365567 }, { 2096627712, 2096660479 }, { 2096693248, 2096889855 }, { 2097020928, 2097037311 }, { 2099232768, 2100297727 }, { 2100985856, 2101018623 }, { 2101182464, 2101231871 }, { 2101232128, 2101232383 }, { 2101346304, 2103640063 }, { 2103967744, 2105540607 }, { 2108227584, 2108293119 }, { 2108358656, 2108424191 }, { 2110783488, 2110799871 }, { 2110914560, 2111045631 }, { 2111111168, 2111143935 }, { 2111201280, 2111209471 }, { 2111242240, 2111258623 }, { 2111307776, 2111832063 }, { 2113830912, 2113863679 }, { 2147489792, 2147491839 }, { 2147500544, 2147501055 }, { 2147504128, 2147508223 }, { 2147510784, 2147511039 }, { 2147516416, 2147520511 }, { 2147524608, 2147526655 }, { 2147560192, 2147560447 }, { 2147560960, 2147561215 }, { 2147562240, 2147562495 }, { 2147563264, 2147563519 }, { 2151778304, 2151780351 }, { 2151940096, 2152464383 }, { 2153420544, 2153421311 }, { 2154561536, 2154627071 }, { 2155831296, 2155833343 }, { 2155843584, 2155844607 }, { 2156699648, 2156703743 }, { 2156707840, 2156709887 }, { 2160852992, 2160885759 }, { 2160893952, 2160902143 }, { 2166095872, 2166161407 }, { 2173084672, 2173084927 }, { 2177574656, 2177574911 }, { 2177630208, 2177695743 }, { 2178088960, 2178154495 }, { 2181093376, 2181095423 }, { 2193694720, 2193704959 }, { 2195127296, 2195127807 }, { 2197751808, 2197753855 }, { 2197757952, 2197766143 }, { 2197770240, 2197772287 }, { 2197782528, 2197786623 }, { 2197793280, 2197793535 }, { 2205538304, 2205540351 }, { 2212782080, 2212782335 }, { 2229796864, 2229862399 }, { 2248171520, 2248177663 }, { 2249424896, 2249426943 }, { 2249428992, 2249433087 }, { 2252950528, 2252950783 }, { 2252962560, 2252962815 }, { 2252974848, 2252975103 }, { 2252978944, 2252979199 }, { 2254084096, 2254094335 }, { 2254098432, 2254100479 }, { 2259615744, 2259681279 }, { 2260951040, 2260952063 }, { 2262415360, 2262416383 }, { 2263755904, 2263756223 }, { 2263756480, 2263756767 }, { 2264891392, 2264899583 }, { 2291146240, 2291146751 }, { 2292809728, 2292842495 }, { 2293172232, 2293172383 }, { 2302360320, 2302360575 }, { 2302367744, 2302368767 }, { 2302383104, 2302384127 }, { 2303366936, 2303367167 }, { 2303368960, 2303369215 }, { 2303955968, 2303956223 }, { 2309947392, 2309947655 }, { 2309947904, 2309948223 }, { 2309948416, 2309948671 }, { 2309948928, 2309949247 }, { 2309949440, 2309949703 }, { 2309949952, 2309950303 }, { 2309950464, 2309950959 }, { 2309950976, 2309951359 }, { 2309951488, 2309951999 }, { 2309952256, 2309952663 }, { 2309952768, 2309953167 }, { 2309953312, 2309954847 }, { 2309955072, 2309955327 }, { 2309955584, 2309956223 }, { 2309956352, 2309958975 }, { 2309959424, 2309959935 }, { 2309960448, 2309960959 }, { 2309961216, 2309961727 }, { 2309961984, 2309962239 }, { 2309962496, 2309963263 }, { 2309963520, 2309964031 }, { 2309964288, 2309964543 }, { 2309964800, 2309965063 }, { 2309965312, 2309966463 }, { 2309966592, 2309969343 }, { 2309969472, 2309970047 }, { 2309970176, 2309970495 }, { 2309970688, 2309971007 }, { 2309971200, 2309972735 }, { 2309972992, 2309973311 }, { 2309973632, 2309974399 }, { 2309974656, 2309974847 }, { 2309975296, 2309975871 }, { 2309976064, 2309976575 }, { 2309976832, 2309977599 }, { 2309977856, 2309978431 }, { 2309978624, 2309979263 }, { 2309979392, 2309979647 }, { 2309979904, 2309980159 }, { 2322695168, 2322695423 }, { 2323429632, 2323430143 }, { 2323656544, 2323656607 }, { 2323662560, 2323662591 }, { 2332368896, 2332369151 }, { 2332375040, 2332377087 }, { 2332381184, 2332382207 }, { 2332384256, 2332385279 }, { 2332393472, 2332394495 }, { 2332401664, 2332402687 }, { 2332409856, 2332410879 }, { 2332412928, 2332415999 }, { 2332423168, 2332424191 }, { 2332622848, 2332688383 }, { 2333869824, 2333870079 }, { 2333881344, 2333882367 }, { 2333914112, 2333915135 }, { 2333924352, 2333924607 }, { 2333924864, 2333925375 }, { 2335037440, 2335043583 }, { 2335045632, 2335047679 }, { 2336915968, 2336916223 }, { 2340487168, 2340552703 }, { 2341135872, 2341136127 }, { 2341137920, 2341138175 }, { 2341732352, 2341797887 }, { 2342191104, 2342256639 }, { 2342453248, 2342464511 }, { 2342465280, 2342465535 }, { 2342465792, 2342466047 }, { 2342466560, 2342483455 }, { 2342483968, 2342518783 }, { 2342666240, 2342666495 }, { 2343174144, 2343239679 }, { 2343567360, 2343632895 }, { 2343903488, 2343903743 }, { 2344026112, 2344079871 }, { 2344080128, 2344091647 }, { 2344222720, 2344288255 }, { 2344419328, 2344484863 }, { 2344878080, 2345011711 }, { 2345011968, 2345584127 }, { 2345584640, 2346188799 }, { 2346254336, 2346319871 }, { 2346385408, 2346582015 }, { 2346713088, 2346778623 }, { 2346844160, 2346975231 }, { 2353725440, 2353790975 }, { 2358181888, 2358247423 }, { 2360541184, 2360606719 }, { 2362245120, 2362441727 }, { 2362572800, 2362589183 }, { 2362605568, 2362638335 }, { 2363490304, 2363555839 }, { 2364342272, 2364407807 }, { 2364538880, 2364604415 }, { 2364725248, 2364725503 }, { 2364727040, 2364727551 }, { 2364735488, 2364801023 }, { 2364932096, 2364997631 }, { 2365128704, 2365259775 }, { 2365521920, 2365587455 }, { 2365632512, 2365634559 }, { 2366144512, 2366145023 }, { 2366145536, 2366146559 }, { 2366146856, 2366147007 }, { 2366147840, 2366148351 }, { 2366148864, 2366149407 }, { 2366149632, 2366150911 }, { 2366151424, 2366156431 }, { 2366156544, 2366156799 }, { 2366157056, 2366158383 }, { 2366158592, 2366159999 }, { 2366160128, 2366162943 }, { 2366309376, 2366309887 }, { 2366316032, 2366316287 }, { 2366349568, 2366349823 }, { 2366353664, 2366354175 }, { 2372017152, 2372018175 }, { 2372032000, 2372032255 }, { 2372052992, 2372054015 }, { 2372069376, 2372069631 }, { 2372241664, 2372243199 }, { 2372245248, 2372245503 }, { 2372251392, 2372257791 }, { 2372258048, 2372272127 }, { 2372474880, 2372483071 }, { 2372485120, 2372487167 }, { 2374529024, 2374531071 }, { 2382397568, 2382397759 }, { 2382397960, 2382398335 }, { 2382398464, 2382398751 }, { 2382399008, 2382399439 }, { 2382399488, 2382400023 }, { 2382400256, 2382400703 }, { 2382400768, 2382401055 }, { 2382401280, 2382401535 }, { 2382651392, 2382651679 }, { 2382651936, 2382652207 }, { 2382652416, 2382652695 }, { 2382652928, 2382653183 }, { 2382653440, 2382653727 }, { 2382653952, 2382654607 }, { 2382654720, 2382655015 }, { 2382655256, 2382655487 }, { 2382655744, 2382655999 }, { 2382656256, 2382656519 }, { 2382656768, 2382657663 }, { 2382657792, 2382658559 }, { 2382659072, 2382659375 }, { 2385305856, 2385306111 }, { 2385306624, 2385306879 }, { 2386952192, 2386955007 }, { 2386955264, 2387009535 }, { 2387010048, 2387010559 }, { 2387010816, 2387017727 }, { 2388000768, 2388066303 }, { 2395664898, 2395665151 }, { 2401054208, 2401054719 }, { 2403336192, 2403401727 }, { 2415919104, 2415984639 }, { 2416377856, 2416443391 }, { 2416705536, 2416771071 }, { 2418340096, 2418340351 }, { 2419081216, 2419082239 }, { 2419087360, 2419088383 }, { 2419104768, 2419105791 }, { 2419110912, 2419112959 }, { 2419117056, 2419120127 }, { 2419121152, 2419122175 }, { 2419129344, 2419130367 }, { 2419326976, 2419392511 }, { 2423980032, 2424045567 }, { 2426980096, 2426980351 }, { 2426987560, 2426987775 }, { 2429419520, 2429485055 }, { 2432630784, 2432696319 }, { 2433636352, 2433636863 }, { 2449044224, 2449044479 }, { 2449408000, 2449420287 }, { 2449442816, 2449444863 }, { 2449467392, 2449469439 }, { 2449471488, 2449473535 }, { 2450722048, 2450722303 }, { 2450725632, 2450725887 }, { 2450733568, 2450734079 }, { 2450737408, 2450737663 }, { 2450738688, 2450738943 }, { 2450740992, 2450741247 }, { 2450742016, 2450742271 }, { 2450743808, 2450744063 }, { 2450746368, 2450746623 }, { 2450747648, 2450747903 }, { 2450748160, 2450748415 }, { 2450749952, 2450750207 }, { 2450750464, 2450750719 }, { 2450751488, 2450751999 }, { 2450753792, 2450754047 }, { 2450755328, 2450755583 }, { 2450756608, 2450756863 }, { 2450757120, 2450757375 }, { 2450757632, 2450757887 }, { 2450764288, 2450764543 }, { 2450764800, 2450765055 }, { 2450765568, 2450765823 }, { 2450766080, 2450766335 }, { 2450766592, 2450766847 }, { 2450767360, 2450767615 }, { 2450768384, 2450768639 }, { 2450771712, 2450771967 }, { 2450772224, 2450772479 }, { 2450772736, 2450772991 }, { 2450774528, 2450774783 }, { 2450778624, 2450778879 }, { 2450780672, 2450780927 }, { 2450781184, 2450781439 }, { 2453192704, 2453209087 }, { 2453800960, 2453803007 }, { 2453839872, 2453852159 }, { 2454074368, 2454074623 }, { 2454422784, 2454423039 }, { 2454438912, 2454439167 }, { 2457337856, 2457339903 }, { 2457354240, 2457361407 }, { 2457361920, 2457362175 }, { 2457362432, 2457362687 }, { 2457362944, 2457363455 }, { 2457364480, 2457366527 }, { 2457366784, 2457369599 }, { 2457377792, 2457378815 }, { 2457380608, 2457380863 }, { 2457381632, 2457382399 }, { 2457382912, 2457383935 }, { 2457384960, 2457385215 }, { 2457385472, 2457385983 }, { 2457388032, 2457388543 }, { 2457390080, 2457392127 }, { 2457393152, 2457394175 }, { 2457394432, 2457394687 }, { 2457395200, 2457395455 }, { 2457396224, 2457397247 }, { 2457397760, 2457399551 }, { 2457399808, 2457400063 }, { 2457400832, 2457401343 }, { 2457402368, 2457403391 }, { 2459828224, 2459832319 }, { 2459836416, 2459843071 }, { 2459843584, 2459844607 }, { 2459847680, 2459848191 }, { 2459848704, 2459860991 }, { 2461646848, 2461649919 }, { 2461650688, 2461652223 }, { 2461652736, 2461652991 }, { 2461653504, 2461653759 }, { 2461654528, 2461657343 }, { 2461657600, 2461658111 }, { 2461658624, 2461661183 }, { 2461662720, 2461663231 }, { 2462332928, 2462333951 }, { 2462336000, 2462338047 }, { 2462342144, 2462343167 }, { 2462347264, 2462349311 }, { 2462350336, 2462351359 }, { 2465660928, 2465662975 }, { 2465669120, 2465671167 }, { 2466232576, 2466233087 }, { 2466234368, 2466242559 }, { 2469199872, 2469265407 }, { 2471364608, 2471365631 }, { 2471378944, 2471379967 }, { 2471408640, 2471408895 }, { 2471410688, 2471411711 }, { 2476784896, 2476785151 }, { 2482178304, 2482178559 }, { 2482200576, 2482200831 }, { 2482215936, 2482216191 }, { 2487615488, 2487681023 }, { 2493056000, 2493056255 }, { 2493062144, 2493062655 }, { 2493063680, 2493063935 }, { 2493067776, 2493068287 }, { 2493074432, 2493074943 }, { 2493075968, 2493076223 }, { 2493076480, 2493076991 }, { 2493078528, 2493079039 }, { 2493083136, 2493085183 }, { 2493109248, 2493110271 }, { 2499621376, 2499621631 }, { 2499623936, 2499624191 }, { 2499624448, 2499624703 }, { 2502492160, 2502557695 }, { 2503504896, 2503505151 }, { 2503868416, 2503876607 }, { 2503880704, 2503882751 }, { 2503909376, 2503911423 }, { 2508066816, 2508068863 }, { 2508087296, 2508089343 }, { 2508105728, 2508107775 }, { 2508111872, 2508128255 }, { 2509914112, 2509916159 }, { 2509924352, 2509928447 }, { 2509930496, 2509934591 }, { 2516516864, 2516525055 }, { 2516545536, 2516547583 }, { 2516550656, 2516551679 }, { 2516557824, 2516559871 }, { 2516582400, 2516647935 }, { 2524119040, 2524184575 }, { 2524512256, 2524643327 }, { 2525071360, 2525072383 }, { 2525085696, 2525086719 }, { 2525101056, 2525102079 }, { 2525626368, 2525757439 }, { 2526937088, 2527002623 }, { 2531153920, 2531154431 }, { 2531196928, 2531262463 }, { 2532442112, 2532445183 }, { 2532449280, 2532450303 }, { 2532453376, 2532457471 }, { 2532461568, 2532463615 }, { 2532465664, 2532467711 }, { 2532470784, 2532473855 }, { 2532481024, 2532486143 }, { 2532489216, 2532492287 }, { 2532499456, 2532500479 }, { 2532501504, 2532506623 }, { 2532835328, 2532900863 }, { 2533294080, 2533359615 }, { 2533371904, 2533372927 }, { 2538657152, 2538657279 }, { 2548842496, 2548858879 }, { 2548934656, 2548936703 }, { 2548953088, 2548955135 }, { 2549641216, 2549645311 }, { 2549891072, 2549899263 }, { 2549901312, 2549903359 }, { 2552279040, 2552280063 }, { 2552292096, 2552292607 }, { 2555997184, 2555998207 }, { 2556003328, 2556004351 }, { 2556019712, 2556019967 }, { 2556020224, 2556020735 }, { 2556024832, 2556025855 }, { 2556985344, 2557018111 }, { 2559049728, 2559115263 }, { 2566914048, 2566979583 }, { 2567110656, 2567176191 }, { 2569142272, 2569404415 }, { 2573402112, 2573467647 }, { 2573533184, 2573598719 }, { 2574647296, 2574778367 }, { 2584124416, 2584125439 }, { 2584248320, 2584281087 }, { 2584652656, 2584652799 }, { 2584872856, 2584872959 }, { 2584911872, 2584912127 }, { 2584914944, 2584915967 }, { 2584944128, 2584944383 }, { 2584977408, 2584981503 }, { 2589728256, 2589728511 }, { 2607906816, 2607907327 }, { 2607910912, 2607911423 }, { 2608771072, 2608771583 }, { 2609249280, 2609249535 }, { 2617163776, 2617164799 }, { 2624299008, 2624299263 }, { 2624304384, 2624304639 }, { 2632876544, 2632876799 }, { 2634022912, 2634088447 }, { 2635202560, 2635268095 }, { 2637477376, 2637477631 }, { 2637488640, 2637488895 }, { 2638020608, 2638086143 }, { 2641821696, 2641822719 }, { 2641823744, 2641826815 }, { 2641828864, 2641829887 }, { 2641839104, 2641839615 }, { 2641839872, 2641840127 }, { 2641855488, 2641864703 }, { 2641865728, 2641866751 }, { 2641870848, 2641872895 }, { 2641883136, 2641884159 }, { 2641886208, 2641887231 }, { 2642018304, 2642083839 }, { 2642739200, 2642743295 }, { 2642786816, 2642787327 }, { 2642788352, 2642790399 }, { 2642799616, 2642799871 }, { 2642799872, 2642800127 }, { 2643722240, 2643787775 }, { 2644246528, 2644312063 }, { 2644980480, 2644980735 }, { 2646212608, 2646278143 }, { 2650734592, 2650800127 }, { 2653814784, 2653847551 }, { 2653861632, 2653861887 }, { 2653862912, 2653863935 }, { 2653872128, 2653880319 }, { 2654089216, 2654089727 }, { 2654633984, 2654636031 }, { 2654732288, 2654797823 }, { 2655347456, 2655347711 }, { 2655977472, 2656043007 }, { 2667184128, 2667249663 }, { 2667511808, 2667513855 }, { 2667524096, 2667526143 }, { 2667530496, 2667530751 }, { 2667532288, 2667534335 }, { 2667544576, 2667560959 }, { 2669346816, 2669412351 }, { 2672492544, 2672558079 }, { 2673672192, 2673737727 }, { 2675297536, 2675297791 }, { 2675614240, 2675614463 }, { 2676621312, 2676621823 }, { 2676622080, 2676641279 }, { 2676654080, 2676662271 }, { 2676670464, 2676674559 }, { 2676676608, 2676678655 }, { 2677635072, 2677636095 }, { 2682388480, 2682454015 }, { 2684188672, 2684189183 }, { 2684200960, 2684203007 }, { 2684289024, 2684297215 }, { 2684305408, 2684321791 }, { 2685652992, 2685656063 }, { 2685677568, 2685678591 }, { 2685705216, 2685706239 }, { 2688420352, 2688420607 }, { 2691995648, 2691995903 }, { 2691996160, 2691996415 }, { 2692012032, 2692013055 }, { 2692015104, 2692015359 }, { 2697608192, 2697609215 }, { 2697630720, 2697632767 }, { 2697635840, 2697636863 }, { 2697647104, 2697658367 }, { 2699968512, 2699969535 }, { 2708996096, 2709061631 }, { 2713518080, 2713583615 }, { 2714396208, 2714396415 }, { 2714428952, 2714429183 }, { 2714697728, 2714763263 }, { 2718826496, 2718892031 }, { 2720794624, 2720794879 }, { 2721972224, 2721984511 }, { 2721992704, 2721996799 }, { 2722016256, 2722025471 }, { 2724790272, 2724855807 }, { 2731640064, 2731640319 }, { 2731641856, 2731642111 }, { 2731647488, 2731647743 }, { 2731650816, 2731651071 }, { 2731657984, 2731658239 }, { 2731661312, 2731661567 }, { 2731661824, 2731662079 }, { 2731662592, 2731662847 }, { 2731666944, 2731667199 }, { 2732203008, 2732203263 }, { 2732203520, 2732203791 }, { 2732500224, 2732500479 }, { 2734633472, 2734633727 }, { 2734686208, 2734751743 }, { 2737767424, 2737768447 }, { 2738159616, 2738163711 }, { 2738168832, 2738177023 }, { 2738182144, 2738195455 }, { 2738200576, 2738204671 }, { 2738207744, 2738208767 }, { 2738215936, 2738216959 }, { 2738221056, 2738222079 }, { 2742878208, 2742943743 }, { 2743992320, 2744057855 }, { 2745932032, 2745932287 }, { 2746286080, 2746351615 }, { 2746417152, 2746482687 }, { 2746548224, 2746548735 }, { 2748055552, 2748121087 }, { 2749628416, 2749693951 }, { 2760507392, 2760511487 }, { 2760515584, 2760517631 }, { 2760529920, 2760534015 }, { 2763108352, 2763110399 }, { 2765562368, 2765562623 }, { 2765565952, 2765567999 }, { 2765570048, 2765578239 }, { 2765579776, 2765580031 }, { 2768353536, 2768353791 }, { 2768367873, 2768368126 }, { 2783009280, 2783009791 }, { 2783416320, 2783416575 }, { 2783419392, 2783420415 }, { 2792292352, 2792357887 }, { 2809311232, 2809311487 }, { 2810904576, 2810970111 }, { 2814181376, 2814246911 }, { 2816275456, 2816276479 }, { 2823815424, 2823815679 }, { 2823895296, 2823895551 }, { 2823895808, 2823896063 }, { 2829058048, 2829123583 }, { 2837864032, 2837864095 }, { 2838239648, 2838239679 }, { 2838251104, 2838251231 }, { 2838405776, 2838405887 }, { 2838448096, 2838448127 }, { 2838828720, 2838828799 }, { 2838947488, 2838947583 }, { 2839022208, 2839022335 }, { 2839024384, 2839024639 }, { 2839045952, 2839046127 }, { 2839047248, 2839047423 }, { 2839048512, 2839048639 }, { 2839050880, 2839051007 }, { 2839119640, 2839119871 }, { 2844296704, 2844297215 }, { 2844311522, 2844311551 }, { 2848284672, 2848285695 }, { 2848289792, 2848290815 }, { 2854289408, 2854290431 }, { 2863834240, 2863834271 }, { 2863857664, 2863923199 }, { 2869428224, 2869952511 }, { 2870391808, 2870392831 }, { 2870400000, 2870401023 }, { 2870406144, 2870407167 }, { 2870584320, 2870585343 }, { 2870586368, 2870587391 }, { 2870587648, 2870587903 }, { 2870589440, 2870591231 }, { 2870592000, 2870592511 }, { 2870594048, 2870594559 }, { 2870596608, 2870597631 }, { 2870601728, 2870602751 }, { 2870604288, 2870607871 }, { 2871129088, 2871132159 }, { 2871132160, 2872049663 }, { 2874146816, 2875195391 }, { 2875719680, 2877292543 }, { 2882535424, 2883583999 }, { 2890139648, 2890141695 }, { 2890200064, 2890201087 }, { 2890205184, 2890206207 }, { 2890303488, 2890303743 }, { 2890307328, 2890308095 }, { 2890318336, 2890318591 }, { 2891015680, 2891015935 }, { 2891038720, 2891055103 }, { 2891060608, 2891060735 }, { 2891076608, 2891077631 }, { 2892058624, 2892061695 }, { 2892213248, 2892213599 }, { 2892214016, 2892214271 }, { 2892753664, 2892754175 }, { 2892754944, 2892755199 }, { 2900426240, 2900426495 }, { 2900436224, 2900436479 }, { 2900437760, 2900438015 }, { 2900440064, 2900440319 }, { 2900444160, 2900444415 }, { 2900447232, 2900447487 }, { 2900457216, 2900457471 }, { 2900458496, 2900458751 }, { 2900459008, 2900459263 }, { 2900470784, 2900471039 }, { 2900505088, 2900505343 }, { 2901487616, 2901488127 }, { 2901758528, 2901758719 }, { 2901796032, 2901796095 }, { 2905065472, 2905065983 }, { 2905348608, 2905349119 }, { 2905374720, 2905374975 }, { 2905379008, 2905379047 }, { 2905393152, 2905393407 }, { 2915049600, 2915049663 }, { 2915172864, 2915173007 }, { 2915211008, 2915211263 }, { 2915214080, 2915214335 }, { 2915217408, 2915219199 }, { 2916434944, 2916435199 }, { 2916449888, 2916450047 }, { 2917169109, 2917169136 }, { 2917669888, 2917670143 }, { 2917675136, 2917675263 }, { 2917678080, 2917678335 }, { 2918748336, 2918748415 }, { 2919055360, 2919057407 }, { 2919059456, 2919063551 }, { 2919067648, 2919067903 }, { 2919069016, 2919069183 }, { 2919069480, 2919069695 }, { 2928175632, 2928175871 }, { 2928212512, 2928212671 }, { 2928349576, 2928349695 }, { 2936012800, 2937847807 }, { 2937978880, 2938109951 }, { 2938765312, 2938961919 }, { 2939027456, 2942304255 }, { 2942697472, 2942763007 }, { 2942992384, 2943025151 }, { 2943324160, 2943332351 }, { 2943334400, 2943335423 }, { 2945581056, 2946236415 }, { 2946392064, 2946393087 }, { 2946498560, 2947547135 }, { 2947587072, 2947588095 }, { 2947592192, 2947593215 }, { 2947595264, 2947596287 }, { 2947678208, 2947743743 }, { 2948104192, 2948120575 }, { 2948136960, 2948595711 }, { 2953601024, 2953603071 }, { 2953707520, 2953838591 }, { 2954641408, 2954643455 }, { 2954895360, 2954897407 }, { 2954919936, 2954928127 }, { 2954932224, 2954936319 }, { 2954948608, 2954950655 }, { 2955935744, 2956230655 }, { 2956297216, 2956297471 }, { 2956299264, 2956300543 }, { 2956300800, 2956303359 }, { 2956304384, 2956306431 }, { 2956307456, 2956308479 }, { 2956309504, 2956310527 }, { 2956311040, 2956311551 }, { 2956312576, 2956328959 }, { 2956460032, 2956468479 }, { 2956468736, 2956470015 }, { 2956472320, 2956474367 }, { 2956544000, 2956546047 }, { 2956578816, 2956582911 }, { 2956599296, 2956600831 }, { 2956603904, 2956604671 }, { 2956605184, 2956605439 }, { 2956605952, 2956607487 }, { 2956656640, 2956722175 }, { 2956869632, 2956886015 }, { 2956898304, 2956902399 }, { 2956908544, 2956910591 }, { 2956914688, 2956918783 }, { 2957058048, 2957066239 }, { 2957074432, 2957082623 }, { 2957193216, 2957195263 }, { 2957242368, 2957244415 }, { 2957641728, 2957643775 }, { 2957690880, 2957692927 }, { 2957836288, 2957869055 }, { 2959081472, 2959089663 }, { 2959097856, 2959099903 }, { 2959101952, 2959103999 }, { 2959128576, 2959130623 }, { 2959138816, 2959139327 }, { 2959139840, 2959140351 }, { 2959140864, 2959141887 }, { 2959142144, 2959142399 }, { 2959142656, 2959142911 }, { 2959143168, 2959143679 }, { 2959143936, 2959145215 }, { 2959145472, 2959146495 }, { 2959146752, 2959147007 }, { 2959155200, 2959159295 }, { 2959171584, 2959175679 }, { 2959179776, 2959181823 }, { 2959187968, 2959196159 }, { 2959196416, 2959196927 }, { 2959224832, 2959226879 }, { 2959245312, 2959253503 }, { 2959255552, 2959261695 }, { 2959278080, 2959282175 }, { 2959292416, 2959343615 }, { 2959353856, 2959354111 }, { 2959354368, 2959354623 }, { 2959354880, 2959355135 }, { 2959355648, 2959355903 }, { 2959360000, 2959376383 }, { 2959398912, 2959400959 }, { 2959405056, 2959409151 }, { 2959423488, 2959427583 }, { 2959431680, 2959441919 }, { 2959456256, 2959458303 }, { 2959466496, 2959474687 }, { 2959492096, 2959493119 }, { 2959515648, 2959517695 }, { 2959560704, 2959568895 }, { 2959572992, 2959581183 }, { 2959636480, 2959648767 }, { 2959654912, 2959663103 }, { 2959731200, 2959731455 }, { 2959738880, 2959745023 }, { 2959753216, 2959761407 }, { 2959769600, 2959777791 }, { 2959796224, 2959806463 }, { 2959822848, 2959824895 }, { 2959826944, 2959828991 }, { 2959843328, 2959845375 }, { 2959853568, 2959867903 }, { 2959880192, 2959882239 }, { 2959904768, 2959915519 }, { 2959915776, 2959916031 }, { 2959916288, 2959916543 }, { 2959916800, 2959925247 }, { 2959929344, 2959935487 }, { 2959937536, 2959945727 }, { 2959949824, 2959966207 }, { 2959970304, 2959974399 }, { 2960015360, 2960023551 }, { 2960026624, 2960026879 }, { 2960029696, 2960030719 }, { 2960031488, 2960035839 }, { 2960039936, 2960054271 }, { 2960056320, 2960064511 }, { 2960066560, 2960068607 }, { 2960080896, 2960084991 }, { 2960089088, 2960091135 }, { 2960109056, 2960109311 }, { 2960117760, 2960119807 }, { 2960128000, 2960130047 }, { 2960138240, 2960148479 }, { 2960152576, 2960158719 }, { 2960162816, 2960166911 }, { 2960171008, 2960173055 }, { 2960179200, 2960205823 }, { 2960207872, 2960211967 }, { 2960216064, 2960217087 }, { 2960218112, 2960219135 }, { 2960224256, 2960225279 }, { 2960225536, 2960225791 }, { 2960226048, 2960228351 }, { 2960252928, 2960253695 }, { 2960253952, 2960255487 }, { 2960256256, 2960256511 }, { 2960257024, 2960258303 }, { 2960259072, 2960259851 }, { 2960259922, 2960261119 }, { 2960265216, 2960275455 }, { 2960277504, 2960285695 }, { 2960289792, 2960320511 }, { 2960334848, 2960347135 }, { 2960349184, 2960351231 }, { 2960353280, 2960369663 }, { 2960375808, 2960383999 }, { 2960392192, 2960392447 }, { 2960404480, 2960408575 }, { 2960427008, 2960429055 }, { 2960429568, 2960430079 }, { 2960431104, 2960441343 }, { 2960445440, 2960449535 }, { 2960453632, 2960472063 }, { 2960486400, 2960498687 }, { 2960506880, 2960524287 }, { 2960525312, 2960531455 }, { 2960532992, 2960533247 }, { 2960539648, 2960543743 }, { 2960551936, 2960558079 }, { 2960565248, 2960566015 }, { 2960573440, 2960573951 }, { 2960574208, 2960574463 }, { 2960576512, 2960588799 }, { 2960592896, 2960594943 }, { 2960624640, 2960625663 }, { 2960626432, 2960626687 }, { 2960628736, 2960637951 }, { 2960639232, 2960639487 }, { 2960644608, 2960644863 }, { 2960650240, 2960652287 }, { 2960654336, 2960658431 }, { 2960660480, 2960662527 }, { 2960670720, 2960678911 }, { 2960699392, 2960719871 }, { 2960722432, 2960722687 }, { 2960723968, 2960726015 }, { 2960732160, 2960733183 }, { 2960735232, 2960736255 }, { 2960752640, 2960769023 }, { 2960773120, 2960777215 }, { 2960789504, 2960793599 }, { 2960797696, 2960805887 }, { 2960836608, 2960838655 }, { 2960848640, 2960850943 }, { 2960863488, 2960863743 }, { 2960865280, 2960865535 }, { 2960883712, 2960898047 }, { 2960899072, 2960904191 }, { 2960906240, 2960907263 }, { 2960916480, 2960925695 }, { 2960927744, 2960928767 }, { 2960946176, 2960949247 }, { 2960951296, 2960951807 }, { 2960953344, 2960954367 }, { 2960954880, 2960960511 }, { 2960964608, 2960965119 }, { 2960965632, 2960973823 }, { 2960974336, 2960974847 }, { 2960979968, 2960980223 }, { 2960998400, 2961039359 }, { 2961043456, 2961044479 }, { 2961047552, 2961057023 }, { 2961057792, 2961061887 }, { 2961073920, 2961074175 }, { 2965372928, 2965766143 }, { 2966421504, 2966945791 }, { 2967273472, 2967277567 }, { 2967343104, 2967345151 }, { 2967353344, 2967353855 }, { 2967354112, 2967354367 }, { 2967388160, 2967392255 }, { 2967394304, 2967396351 }, { 2967400448, 2967404543 }, { 2967633920, 2967666687 }, { 2967711744, 2967715839 }, { 2968608768, 2968610815 }, { 2968633344, 2968643583 }, { 2987413504, 2987417599 }, { 2987429888, 2987433215 }, { 2987433472, 2987433983 }, { 2987491328, 2987495423 }, { 2987503616, 2987511807 }, { 2987524096, 2987528191 }, { 2987548672, 2987552767 }, { 2987577344, 2987585535 }, { 2987651072, 2987655167 }, { 2987665408, 2987667455 }, { 2987687936, 2987689983 }, { 2987700224, 2987702271 }, { 2987714560, 2987716607 }, { 2987722752, 2987724799 }, { 2987726848, 2987728895 }, { 2987737088, 2987739135 }, { 2987792384, 2987792639 }, { 2987794176, 2987794431 }, { 2987796480, 2987800575 }, { 2987808768, 2987810815 }, { 2987835392, 2987837439 }, { 2987851776, 2987853823 }, { 2987888640, 2987890687 }, { 2987899136, 2987899647 }, { 2987909120, 2987911167 }, { 2988474400, 2988474623 }, { 2988572672, 2988703743 }, { 2989228032, 2989490175 }, { 2989555712, 2989621247 }, { 2990080000, 2990096639 }, { 2990097408, 2990112767 }, { 2990129152, 2990145535 }, { 2990538752, 2991063039 }, { 2991079424, 2991095807 }, { 2991210496, 2991243263 }, { 2991259648, 2991292415 }, { 2991374336, 2991390719 }, { 2991456256, 2991472639 }, { 2994798592, 2994880511 }, { 2994896896, 2994900991 }, { 2995019776, 2995021823 }, { 2995046400, 2995048447 }, { 2995519488, 2995650559 }, { 2996247040, 2996247295 }, { 2996247552, 2996247807 }, { 2996250880, 2996251135 }, { 2996291072, 2996291327 }, { 2996469760, 2996471039 }, { 2996471296, 2996473855 }, { 2996474624, 2996479999 }, { 2996480512, 2996483583 }, { 2996484032, 2996535295 }, { 2996666368, 2996682751 }, { 2996699648, 2996700159 }, { 2996700672, 2996700927 }, { 2996701440, 2996703231 }, { 2996704000, 2996704255 }, { 2996705024, 2996705279 }, { 2996705536, 2996707327 }, { 2996708352, 2996709375 }, { 2996709632, 2996711423 }, { 2996712192, 2996713215 }, { 2996713728, 2996714239 }, { 2996714496, 2996715519 }, { 2996715776, 2996717567 }, { 2996717824, 2996718847 }, { 2996719360, 2996719615 }, { 2996768768, 2996773631 }, { 2996773888, 2996774143 }, { 2996774912, 2996775423 }, { 2996776960, 2996781055 }, { 2996785152, 2996789247 }, { 2996789504, 2996789759 }, { 2996793344, 2996797439 }, { 2996828160, 2996830207 }, { 2996928512, 2996994047 }, { 2997026816, 2997059583 }, { 2997256192, 2997321727 }, { 2997428224, 2997452799 }, { 2997527552, 2997532159 }, { 2997533184, 2997533695 }, { 2997533952, 2997536511 }, { 2997538304, 2997539327 }, { 2997541120, 2997545983 }, { 2997546240, 2997546495 }, { 2997547520, 2997551103 }, { 2997556224, 2997557247 }, { 2997561088, 2997561343 }, { 2997561856, 2997562367 }, { 2997564416, 2997564927 }, { 2997565696, 2997565951 }, { 2997568768, 2997569023 }, { 2997572608, 2997573631 }, { 2997579264, 2997579775 }, { 2997583360, 2997583871 }, { 2997682176, 2997714943 }, { 2997747200, 2997747455 }, { 2997878784, 2998140927 }, { 2998403072, 2998665215 }, { 2999713792, 2999975935 }, { 2999993344, 2999997951 }, { 2999998208, 2999998463 }, { 2999998720, 3000000511 }, { 3000008704, 3000016895 }, { 3000033280, 3000041471 }, { 3000064000, 3000064767 }, { 3000066048, 3000074239 }, { 3000090624, 3000131583 }, { 3000172544, 3000180735 }, { 3000210688, 3000210943 }, { 3000211712, 3000211967 }, { 3000213504, 3000221695 }, { 3000240128, 3000242175 }, { 3000247296, 3000248319 }, { 3000254464, 3000254719 }, { 3000254976, 3000255487 }, { 3000255744, 3000256511 }, { 3000258048, 3000258303 }, { 3000258560, 3000260607 }, { 3000270848, 3000273151 }, { 3000273408, 3000273919 }, { 3000274688, 3000274943 }, { 3000283136, 3000285183 }, { 3000291328, 3000293375 }, { 3000301568, 3000302591 }, { 3000305664, 3000313855 }, { 3000323584, 3000326143 }, { 3000332288, 3000334335 }, { 3000340480, 3000342527 }, { 3000352768, 3000358911 }, { 3000360960, 3000363007 }, { 3000365056, 3000369151 }, { 3000377344, 3000385535 }, { 3000410112, 3000410623 }, { 3000411136, 3000411391 }, { 3000411648, 3000412159 }, { 3000412416, 3000412927 }, { 3000413184, 3000414463 }, { 3000414720, 3000416255 }, { 3000416512, 3000418303 }, { 3000426496, 3000434687 }, { 3000451072, 3000467455 }, { 3000471552, 3000475647 }, { 3000494080, 3000495103 }, { 3000508416, 3000510463 }, { 3000516608, 3000520703 }, { 3000524800, 3000526335 }, { 3000526592, 3000526847 }, { 3000539136, 3000543231 }, { 3000544256, 3000547327 }, { 3000555520, 3000557567 }, { 3000565760, 3000567807 }, { 3000571904, 3000573951 }, { 3000576000, 3000584191 }, { 3000590336, 3000594431 }, { 3000596480, 3000598527 }, { 3000604672, 3000608767 }, { 3000610816, 3000612863 }, { 3000623104, 3000625151 }, { 3000631296, 3000647679 }, { 3000651776, 3000652287 }, { 3000653312, 3000664063 }, { 3000671232, 3000672255 }, { 3000684544, 3000688639 }, { 3000705024, 3000709119 }, { 3000733696, 3000745983 }, { 3000750080, 3000754175 }, { 3000758272, 3000762367 }, { 3001679872, 3001745407 }, { 3001815040, 3001819135 }, { 3001820160, 3001821183 }, { 3001843712, 3001847807 }, { 3001864192, 3001868287 }, { 3001872384, 3001876479 }, { 3001880576, 3001883647 }, { 3001883904, 3001884671 }, { 3001891840, 3001892863 }, { 3001921536, 3001929727 }, { 3001937920, 3001942015 }, { 3001946112, 3001950207 }, { 3001958656, 3001958911 }, { 3001960992, 3001961215 }, { 3001970688, 3001974783 }, { 3002597376, 3002599423 }, { 3002613760, 3002615807 }, { 3002617856, 3002619903 }, { 3002656768, 3002657068 }, { 3002657280, 3002658383 }, { 3002658560, 3002658815 }, { 3002677248, 3002683391 }, { 3002695680, 3002697727 }, { 3002724352, 3002726399 }, { 3002767360, 3002769407 }, { 3002789888, 3002791935 }, { 3002818560, 3002820607 }, { 3002828800, 3002830847 }, { 3002849280, 3002851327 }, { 3002875904, 3002892287 }, { 3002908672, 3002925055 }, { 3002927360, 3002928127 }, { 3002937344, 3002938367 }, { 3002938880, 3002939135 }, { 3003086848, 3003088895 }, { 3003112192, 3003112447 }, { 3003112704, 3003112959 }, { 3003112960, 3003113215 }, { 3003115520, 3003117567 }, { 3003119616, 3003121663 }, { 3024879616, 3025141759 }, { 3025403904, 3025600511 }, { 3025666048, 3025928191 }, { 3026073600, 3026075647 }, { 3026083840, 3026087935 }, { 3026089984, 3026092031 }, { 3026157568, 3028287487 }, { 3028385792, 3028484095 }, { 3028811776, 3029336063 }, { 3029602304, 3029604351 }, { 3029637120, 3029639167 }, { 3029653504, 3029663743 }, { 3029696512, 3029704703 }, { 3029770240, 3029778431 }, { 3029860352, 3031433215 }, { 3031592960, 3031595007 }, { 3031613440, 3031629823 }, { 3031957504, 3032252415 }, { 3032323072, 3032324095 }, { 3033070592, 3033268223 }, { 3033530368, 3033661439 }, { 3033714560, 3033714687 }, { 3033715712, 3033716735 }, { 3033718784, 3033722879 }, { 3033792512, 3033923583 }, { 3034505216, 3034562559 }, { 3034574848, 3034578943 }, { 3035168768, 3035193343 }, { 3035205632, 3035206655 }, { 3035316224, 3035324415 }, { 3035328512, 3035329535 }, { 3049587712, 3049587967 }, { 3049589248, 3049589759 }, { 3049628672, 3049628927 }, { 3049629440, 3049629695 }, { 3049634816, 3049635327 }, { 3054538752, 3054540799 }, { 3054551040, 3054559231 }, { 3054632960, 3054665727 }, { 3055007744, 3055009791 }, { 3055011840, 3055013887 }, { 3055550464, 3056599039 }, { 3056623616, 3056631807 }, { 3056664576, 3056734207 }, { 3056758784, 3056762879 }, { 3056795648, 3056861183 }, { 3056992256, 3057025023 }, { 3057054720, 3057055743 }, { 3057451008, 3057504255 }, { 3057506304, 3057516543 }, { 3058696192, 3059548159 }, { 3059744768, 3063414783 }, { 3063742464, 3063807999 }, { 3063939072, 3063943167 }, { 3063953408, 3063963647 }, { 3064856576, 3064987647 }, { 3066560512, 3067084799 }, { 3068952576, 3068985343 }, { 3068991488, 3068993535 }, { 3069050880, 3069102079 }, { 3069102336, 3069124607 }, { 3069181952, 3069706239 }, { 3070099456, 3070129151 }, { 3070129408, 3070129663 }, { 3070129920, 3070164991 }, { 3070173696, 3070173951 }, { 3070174208, 3070175231 }, { 3070230528, 3074949119 }, { 3075383296, 3075385343 }, { 3075388416, 3075389439 }, { 3075582976, 3075583231 }, { 3075585024, 3075586047 }, { 3075735552, 3075866623 }, { 3076227072, 3076228095 }, { 3076229120, 3076235263 }, { 3076259840, 3076521983 }, { 3078619136, 3081437183 }, { 3081502720, 3081764863 }, { 3082158080, 3082160639 }, { 3082161152, 3082162687 }, { 3082163968, 3082164735 }, { 3082164992, 3082166271 }, { 3082289152, 3087007743 }, { 3103850496, 3103850751 }, { 3103853824, 3103854079 }, { 3103855360, 3103855615 }, { 3103856384, 3103856639 }, { 3103860992, 3103861247 }, { 3103863040, 3103863295 }, { 3103866880, 3103867135 }, { 3103867648, 3103867903 }, { 3103868928, 3103869183 }, { 3103869952, 3103870207 }, { 3103871232, 3103871487 }, { 3103880448, 3103880959 }, { 3103889408, 3103889919 }, { 3103891456, 3103892223 }, { 3103892736, 3103892991 }, { 3103924224, 3103925247 }, { 3103934464, 3103935487 }, { 3103938560, 3103939583 }, { 3103942656, 3103943679 }, { 3103947776, 3103948799 }, { 3103963136, 3103964159 }, { 3103985664, 3103986687 }, { 3103989760, 3103990783 }, { 3103998976, 3103999999 }, { 3104017408, 3104018431 }, { 3104025600, 3104026623 }, { 3104027648, 3104028671 }, { 3104043008, 3104044031 }, { 3104061440, 3104062463 }, { 3104063488, 3104064511 }, { 3104074752, 3104075775 }, { 3104083968, 3104084991 }, { 3104093184, 3104094207 }, { 3104099328, 3104100351 }, { 3104116736, 3104117759 }, { 3104131072, 3104132095 }, { 3104147456, 3104149503 }, { 3104150528, 3104151551 }, { 3104153600, 3104154623 }, { 3104161792, 3104162815 }, { 3104164864, 3104165375 }, { 3104176128, 3104177151 }, { 3104189440, 3104190463 }, { 3104198656, 3104199679 }, { 3104207872, 3104208895 }, { 3104209920, 3104210943 }, { 3104220160, 3104221183 }, { 3104222208, 3104223231 }, { 3104233472, 3104234495 }, { 3104236544, 3104237567 }, { 3104238592, 3104239615 }, { 3104240640, 3104242687 }, { 3104250880, 3104251903 }, { 3104253952, 3104254975 }, { 3104256000, 3104257023 }, { 3104265216, 3104266239 }, { 3104267264, 3104268287 }, { 3104273408, 3104274431 }, { 3104280576, 3104281599 }, { 3104282624, 3104283647 }, { 3104287744, 3104288767 }, { 3104289792, 3104290815 }, { 3104294912, 3104295935 }, { 3104298496, 3104298751 }, { 3104303104, 3104304127 }, { 3104309856, 3104310015 }, { 3104310272, 3104311295 }, { 3104314368, 3104315391 }, { 3104340992, 3104342015 }, { 3104349184, 3104350207 }, { 3104355328, 3104356351 }, { 3104360448, 3104361471 }, { 3104364544, 3104366591 }, { 3104393216, 3104397311 }, { 3104405760, 3104406015 }, { 3104411648, 3104412671 }, { 3104415744, 3104416767 }, { 3104421888, 3104422911 }, { 3104425984, 3104428031 }, { 3104433152, 3104434175 }, { 3104440320, 3104441343 }, { 3104451584, 3104452607 }, { 3104455680, 3104456703 }, { 3104467200, 3104467967 }, { 3104473088, 3104474111 }, { 3104475136, 3104476159 }, { 3104479232, 3104480255 }, { 3104484725, 3104484863 }, { 3104486400, 3104488447 }, { 3104506880, 3104507903 }, { 3104514048, 3104515071 }, { 3104518144, 3104519167 }, { 3104521216, 3104521727 }, { 3104521984, 3104522239 }, { 3104524288, 3104525311 }, { 3104539648, 3104540671 }, { 3104543744, 3104544767 }, { 3104556032, 3104557055 }, { 3104564224, 3104565247 }, { 3104568320, 3104569343 }, { 3104578560, 3104579583 }, { 3104584704, 3104585727 }, { 3104588800, 3104589823 }, { 3104592896, 3104593919 }, { 3104594944, 3104595967 }, { 3104603136, 3104604159 }, { 3104610304, 3104611327 }, { 3104624640, 3104625663 }, { 3104628736, 3104630783 }, { 3104635904, 3104637951 }, { 3104643072, 3104644095 }, { 3104645120, 3104646143 }, { 3104648192, 3104649215 }, { 3104658432, 3104658687 }, { 3104665600, 3104668671 }, { 3104670720, 3104672767 }, { 3104677888, 3104678911 }, { 3104681984, 3104683007 }, { 3104703488, 3104704511 }, { 3104706560, 3104707583 }, { 3104710656, 3104711679 }, { 3104712704, 3104713727 }, { 3104714240, 3104714495 }, { 3104719872, 3104720895 }, { 3104751616, 3104751871 }, { 3104777216, 3104778239 }, { 3104783360, 3104784383 }, { 3104789504, 3104791551 }, { 3104792576, 3104793599 }, { 3104797696, 3104798719 }, { 3104812032, 3104813055 }, { 3104816128, 3104817151 }, { 3104821248, 3104821503 }, { 3104835584, 3104836607 }, { 3104840704, 3104841727 }, { 3104847872, 3104848895 }, { 3104849920, 3104850943 }, { 3104859136, 3104861183 }, { 3104863232, 3104864255 }, { 3104868352, 3104869375 }, { 3104871424, 3104872447 }, { 3104878592, 3104879615 }, { 3104887808, 3104888831 }, { 3104896000, 3104897023 }, { 3104899072, 3104899327 }, { 3104899840, 3104900095 }, { 3104901120, 3104902143 }, { 3104903168, 3104904191 }, { 3104906240, 3104907263 }, { 3104908288, 3104909311 }, { 3104915456, 3104916479 }, { 3104918528, 3104919551 }, { 3104920576, 3104922623 }, { 3104931840, 3104933887 }, { 3104934912, 3104935935 }, { 3104937984, 3104939007 }, { 3104942080, 3104943103 }, { 3104950272, 3104951295 }, { 3104965632, 3104966655 }, { 3104969728, 3104970751 }, { 3104975872, 3104976895 }, { 3104984576, 3104984831 }, { 3104987136, 3104988159 }, { 3104992256, 3104995327 }, { 3104996352, 3104997375 }, { 3105015808, 3105016831 }, { 3105035264, 3105036287 }, { 3105075200, 3105076223 }, { 3105082368, 3105083391 }, { 3105106944, 3105107967 }, { 3105115136, 3105117183 }, { 3105129472, 3105130495 }, { 3105140736, 3105142783 }, { 3105153024, 3105154047 }, { 3105173760, 3105174015 }, { 3105177600, 3105178623 }, { 3105197056, 3105197823 }, { 3105201152, 3105202175 }, { 3105232896, 3105233919 }, { 3105242112, 3105243135 }, { 3105265664, 3105266687 }, { 3105270784, 3105271807 }, { 3105272832, 3105273855 }, { 3105278976, 3105279999 }, { 3105286144, 3105287167 }, { 3105294336, 3105295359 }, { 3105300480, 3105301503 }, { 3105308672, 3105309695 }, { 3105312768, 3105313791 }, { 3105350656, 3105351679 }, { 3105368064, 3105370111 }, { 3105371136, 3105373183 }, { 3105381376, 3105382399 }, { 3105386496, 3105387519 }, { 3105402880, 3105404927 }, { 3105412096, 3105413119 }, { 3105420288, 3105421311 }, { 3105424384, 3105426431 }, { 3105427456, 3105428479 }, { 3105438720, 3105439743 }, { 3105440768, 3105441791 }, { 3105445888, 3105446911 }, { 3105462272, 3105463295 }, { 3105468416, 3105469439 }, { 3105496064, 3105497087 }, { 3105499136, 3105500159 }, { 3105502208, 3105503231 }, { 3105507328, 3105508351 }, { 3105514496, 3105515519 }, { 3105517568, 3105518591 }, { 3105519616, 3105520639 }, { 3105531904, 3105532927 }, { 3105538048, 3105539071 }, { 3105541120, 3105542143 }, { 3105544192, 3105545215 }, { 3105565696, 3105567743 }, { 3105574912, 3105575935 }, { 3105580032, 3105581055 }, { 3105592320, 3105593343 }, { 3105595392, 3105596415 }, { 3105603584, 3105604607 }, { 3105607680, 3105608703 }, { 3105698816, 3105700863 }, { 3105717248, 3105719295 }, { 3105754112, 3105756159 }, { 3105756928, 3105757183 }, { 3105761280, 3105762303 }, { 3105775616, 3105776639 }, { 3105778176, 3105778687 }, { 3105780736, 3105781759 }, { 3105800192, 3105801215 }, { 3105807360, 3105808383 }, { 3105809408, 3105810431 }, { 3105844224, 3105847295 }, { 3105850368, 3105851391 }, { 3105857536, 3105859583 }, { 3105865728, 3105866751 }, { 3105896448, 3105897471 }, { 3105898752, 3105900543 }, { 3105903616, 3105904639 }, { 3105912832, 3105913855 }, { 3105915904, 3105916927 }, { 3105924096, 3105925119 }, { 3105929216, 3105930239 }, { 3105945600, 3105946623 }, { 3105978368, 3105979391 }, { 3105988608, 3105989631 }, { 3105991680, 3105992703 }, { 3105997824, 3105999871 }, { 3106006016, 3106007039 }, { 3106008064, 3106009087 }, { 3106010112, 3106011135 }, { 3106018304, 3106019327 }, { 3106052096, 3106053119 }, { 3106059264, 3106060287 }, { 3106074624, 3106076671 }, { 3106078720, 3106080767 }, { 3106087936, 3106091007 }, { 3106108416, 3106110463 }, { 3106111488, 3106112511 }, { 3106119680, 3106120703 }, { 3106121728, 3106122751 }, { 3106127872, 3106128895 }, { 3106135040, 3106135551 }, { 3106159616, 3106160639 }, { 3106170880, 3106171903 }, { 3106184192, 3106185215 }, { 3106188288, 3106189311 }, { 3106202368, 3106202623 }, { 3106222080, 3106223103 }, { 3106224128, 3106226175 }, { 3106235648, 3106235903 }, { 3106242560, 3106243583 }, { 3106251776, 3106252799 }, { 3106257920, 3106258943 }, { 3106279424, 3106280447 }, { 3106296832, 3106297855 }, { 3106316288, 3106317311 }, { 3106327552, 3106328575 }, { 3106341888, 3106342911 }, { 3106344960, 3106345983 }, { 3106361344, 3106362367 }, { 3106369536, 3106371583 }, { 3106374656, 3106375679 }, { 3106378752, 3106379775 }, { 3106390016, 3106391039 }, { 3106393088, 3106394111 }, { 3106406400, 3106407935 }, { 3106408192, 3106408447 }, { 3106411008, 3106411263 }, { 3106413568, 3106414591 }, { 3106416640, 3106417663 }, { 3106425856, 3106426879 }, { 3106439168, 3106440191 }, { 3106445312, 3106446335 }, { 3106482176, 3106483199 }, { 3106497536, 3106498559 }, { 3106500608, 3106501631 }, { 3106502656, 3106503679 }, { 3106512896, 3106513919 }, { 3106514944, 3106515967 }, { 3106519040, 3106520063 }, { 3106522112, 3106523135 }, { 3106524160, 3106525183 }, { 3106540544, 3106541567 }, { 3106547712, 3106547967 }, { 3106548224, 3106548735 }, { 3106549760, 3106550783 }, { 3106552832, 3106553855 }, { 3106556928, 3106558975 }, { 3106560000, 3106562047 }, { 3106565120, 3106566143 }, { 3106569216, 3106570239 }, { 3106574336, 3106575359 }, { 3106577408, 3106578431 }, { 3106579456, 3106580479 }, { 3106583552, 3106584575 }, { 3106595840, 3106596863 }, { 3106604032, 3106606079 }, { 3106624512, 3106625535 }, { 3106626560, 3106627583 }, { 3106628608, 3106629631 }, { 3106653184, 3106654207 }, { 3106668544, 3106669567 }, { 3106670592, 3106672639 }, { 3106685952, 3106686975 }, { 3106699264, 3106700287 }, { 3106710528, 3106711551 }, { 3106728960, 3106729983 }, { 3106749440, 3106750463 }, { 3106754560, 3106755583 }, { 3106759680, 3106760703 }, { 3106770944, 3106771455 }, { 3106771712, 3106771967 }, { 3106801664, 3106804735 }, { 3106810880, 3106812927 }, { 3106821120, 3106821375 }, { 3106821888, 3106822143 }, { 3106824192, 3106825215 }, { 3106838784, 3106839551 }, { 3106849792, 3106850815 }, { 3106874368, 3106875391 }, { 3106878464, 3106879487 }, { 3106904576, 3106905087 }, { 3106917376, 3106918399 }, { 3106934784, 3106935807 }, { 3106939904, 3106940927 }, { 3106945024, 3106946047 }, { 3106949120, 3106950143 }, { 3106959360, 3106960383 }, { 3106977792, 3106978815 }, { 3106991104, 3106992127 }, { 3107012608, 3107013631 }, { 3107023872, 3107024895 }, { 3107057664, 3107058687 }, { 3107063808, 3107064831 }, { 3107067904, 3107068927 }, { 3107082240, 3107083263 }, { 3107096576, 3107097599 }, { 3107099648, 3107100159 }, { 3107101696, 3107102719 }, { 3107112960, 3107113983 }, { 3107117056, 3107118079 }, { 3107125760, 3107126271 }, { 3107132672, 3107132927 }, { 3107142656, 3107143679 }, { 3107159040, 3107160063 }, { 3107163136, 3107164159 }, { 3107167232, 3107168255 }, { 3107180544, 3107181567 }, { 3107189760, 3107190015 }, { 3107200000, 3107201023 }, { 3107207168, 3107208191 }, { 3107210240, 3107213311 }, { 3107226624, 3107227647 }, { 3107228672, 3107229695 }, { 3107231744, 3107232511 }, { 3107244032, 3107244287 }, { 3107263488, 3107264511 }, { 3107317760, 3107318783 }, { 3107329024, 3107330047 }, { 3107334144, 3107335167 }, { 3107336192, 3107337215 }, { 3107358720, 3107359743 }, { 3107368960, 3107369983 }, { 3107384320, 3107385343 }, { 3107386368, 3107387391 }, { 3107389440, 3107390463 }, { 3107399680, 3107400703 }, { 3107403776, 3107404031 }, { 3107433472, 3107434495 }, { 3107484672, 3107485183 }, { 3107485440, 3107485695 }, { 3107527680, 3107528703 }, { 3107580928, 3107581951 }, { 3107584000, 3107585023 }, { 3107614720, 3107615231 }, { 3107617792, 3107618815 }, { 3107624960, 3107625983 }, { 3107634176, 3107635199 }, { 3107638272, 3107639295 }, { 3107641344, 3107643391 }, { 3107649536, 3107651583 }, { 3107665920, 3107666943 }, { 3107686400, 3107688447 }, { 3107695616, 3107696639 }, { 3107700736, 3107701759 }, { 3107706880, 3107707647 }, { 3107714048, 3107715071 }, { 3107720192, 3107721215 }, { 3107728384, 3107730431 }, { 3107750912, 3107751935 }, { 3107756032, 3107757055 }, { 3107771392, 3107772415 }, { 3107788800, 3107789823 }, { 3107791872, 3107792895 }, { 3107802112, 3107803135 }, { 3107806208, 3107807231 }, { 3107815424, 3107816447 }, { 3107826688, 3107827711 }, { 3107831808, 3107832831 }, { 3107845120, 3107846143 }, { 3107847168, 3107848191 }, { 3107873792, 3107874815 }, { 3107897344, 3107898367 }, { 3107899392, 3107900159 }, { 3107929088, 3107930111 }, { 3107942400, 3107943423 }, { 3107961856, 3107962879 }, { 3107963904, 3107964927 }, { 3107969024, 3107970047 }, { 3107990528, 3107991551 }, { 3107992576, 3107993599 }, { 3107998720, 3107998975 }, { 3108032512, 3108033535 }, { 3108037632, 3108038655 }, { 3108042752, 3108043775 }, { 3108047872, 3108050943 }, { 3108080128, 3108080639 }, { 3108082688, 3108083711 }, { 3108113408, 3108114431 }, { 3108117504, 3108118527 }, { 3108131840, 3108132863 }, { 3108165632, 3108166655 }, { 3108189184, 3108190207 }, { 3108199424, 3108200447 }, { 3108216832, 3108217855 }, { 3108218112, 3108218623 }, { 3108218880, 3108219903 }, { 3108238336, 3108239359 }, { 3108240640, 3108240895 }, { 3108246784, 3108247551 }, { 3108267008, 3108268031 }, { 3108271104, 3108272127 }, { 3108278272, 3108279295 }, { 3108280320, 3108281343 }, { 3108289024, 3108289535 }, { 3108327424, 3108328447 }, { 3108338688, 3108339711 }, { 3108340736, 3108341759 }, { 3108363264, 3108364287 }, { 3108399104, 3108400127 }, { 3108405760, 3108406015 }, { 3108414464, 3108415487 }, { 3108451328, 3108452351 }, { 3108454400, 3108456447 }, { 3108457472, 3108459519 }, { 3108462592, 3108463615 }, { 3108475392, 3108475903 }, { 3108486656, 3108486911 }, { 3108488192, 3108489215 }, { 3108492800, 3108493311 }, { 3108506112, 3108506623 }, { 3108540416, 3108541439 }, { 3108551680, 3108552703 }, { 3108560896, 3108562943 }, { 3108573184, 3108574207 }, { 3108601344, 3108601855 }, { 3108615168, 3108615679 }, { 3108618240, 3108619263 }, { 3108623360, 3108623615 }, { 3108623872, 3108624895 }, { 3108661248, 3108662271 }, { 3108690944, 3108691967 }, { 3108692992, 3108694015 }, { 3108701184, 3108702207 }, { 3108711424, 3108712447 }, { 3108716544, 3108717567 }, { 3108721664, 3108723711 }, { 3108744448, 3108744703 }, { 3108746240, 3108747263 }, { 3108748288, 3108749055 }, { 3108756736, 3108756991 }, { 3108763648, 3108764671 }, { 3108768768, 3108769023 }, { 3108786176, 3108787199 }, { 3108793344, 3108794367 }, { 3108802560, 3108803583 }, { 3108822016, 3108823039 }, { 3108825088, 3108826111 }, { 3108830208, 3108831231 }, { 3108833280, 3108834303 }, { 3108835328, 3108836351 }, { 3108869120, 3108870143 }, { 3108883456, 3108884479 }, { 3108889600, 3108890879 }, { 3108891136, 3108893695 }, { 3108903936, 3108905983 }, { 3108920320, 3108921343 }, { 3108924416, 3108927487 }, { 3108947968, 3108948991 }, { 3108957184, 3108958207 }, { 3108979712, 3108980735 }, { 3108987904, 3108988927 }, { 3108992000, 3108993023 }, { 3108996096, 3108997631 }, { 3109022720, 3109023743 }, { 3109035008, 3109035263 }, { 3109065728, 3109066751 }, { 3109079040, 3109081087 }, { 3109086208, 3109087231 }, { 3109091328, 3109092351 }, { 3109099520, 3109100543 }, { 3109109760, 3109111039 }, { 3109111552, 3109111807 }, { 3109130752, 3109131263 }, { 3109149696, 3109150719 }, { 3109156864, 3109157887 }, { 3109161216, 3109161471 }, { 3109161728, 3109163007 }, { 3109165056, 3109166079 }, { 3109203968, 3109204991 }, { 3109209088, 3109210111 }, { 3109221376, 3109222399 }, { 3109285888, 3109286911 }, { 3109298176, 3109299199 }, { 3109300224, 3109301247 }, { 3109317632, 3109318655 }, { 3109329920, 3109330943 }, { 3109334016, 3109335039 }, { 3109337088, 3109339135 }, { 3109352448, 3109353471 }, { 3109358592, 3109358847 }, { 3109359104, 3109359615 }, { 3109386752, 3109387263 }, { 3109396480, 3109397503 }, { 3109410816, 3109411839 }, { 3109444608, 3109445631 }, { 3109449728, 3109453823 }, { 3109454848, 3109455871 }, { 3109457920, 3109458943 }, { 3109498880, 3109499903 }, { 3109535744, 3109537791 }, { 3109577216, 3109577727 }, { 3109578496, 3109578751 }, { 3109583872, 3109584895 }, { 3109592064, 3109594111 }, { 3109605376, 3109606399 }, { 3109619712, 3109621759 }, { 3109643008, 3109643263 }, { 3109708800, 3109709823 }, { 3109720064, 3109721087 }, { 3109740544, 3109741567 }, { 3109762048, 3109763071 }, { 3109793792, 3109795839 }, { 3109813248, 3109814271 }, { 3109822464, 3109823487 }, { 3109849088, 3109852159 }, { 3109861376, 3109862399 }, { 3109868288, 3109868543 }, { 3109890048, 3109891071 }, { 3109907456, 3109908479 }, { 3109933056, 3109934079 }, { 3109944320, 3109945343 }, { 3109953536, 3109954559 }, { 3109962496, 3109962751 }, { 3109972992, 3109974015 }, { 3109984256, 3109985279 }, { 3109987584, 3109987839 }, { 3109989376, 3109990399 }, { 3109999616, 3110000639 }, { 3110002688, 3110003711 }, { 3110027776, 3110028031 }, { 3110037248, 3110038527 }, { 3110069248, 3110069759 }, { 3110076416, 3110077439 }, { 3110097920, 3110098943 }, { 3110139648, 3110139903 }, { 3110147072, 3110147327 }, { 3110183936, 3110184959 }, { 3110193152, 3110194175 }, { 3110206464, 3110207487 }, { 3110218496, 3110218751 }, { 3110227968, 3110230015 }, { 3110275072, 3110277119 }, { 3110308864, 3110309375 }, { 3110311936, 3110315007 }, { 3110344704, 3110345727 }, { 3110364160, 3110366207 }, { 3110379008, 3110379263 }, { 3110410240, 3110411263 }, { 3110439168, 3110439423 }, { 3110456064, 3110457343 }, { 3110471680, 3110472703 }, { 3110500352, 3110501375 }, { 3110504448, 3110505471 }, { 3110515712, 3110516735 }, { 3110541312, 3110542335 }, { 3110551296, 3110551551 }, { 3110552576, 3110553599 }, { 3110560768, 3110561791 }, { 3110562816, 3110563327 }, { 3110563584, 3110563839 }, { 3110568960, 3110569983 }, { 3110576128, 3110578175 }, { 3110601728, 3110602751 }, { 3110624256, 3110625279 }, { 3110627328, 3110628351 }, { 3110629632, 3110630399 }, { 3110639360, 3110639615 }, { 3110654976, 3110655999 }, { 3110664192, 3110664703 }, { 3110664960, 3110665215 }, { 3110678528, 3110679551 }, { 3110688768, 3110689791 }, { 3110694400, 3110694911 }, { 3110695936, 3110696959 }, { 3110709248, 3110710271 }, { 3110723584, 3110724607 }, { 3110742016, 3110743039 }, { 3110746112, 3110747135 }, { 3110758400, 3110759423 }, { 3110761472, 3110762495 }, { 3110775808, 3110776831 }, { 3110781952, 3110782975 }, { 3110784768, 3110785023 }, { 3110815744, 3110816767 }, { 3110829056, 3110831103 }, { 3110832128, 3110833151 }, { 3110837248, 3110838271 }, { 3110839296, 3110840319 }, { 3110858752, 3110859775 }, { 3110861824, 3110864895 }, { 3110866944, 3110868991 }, { 3110884352, 3110884607 }, { 3110884864, 3110886399 }, { 3110903808, 3110904831 }, { 3110912000, 3110914047 }, { 3110916096, 3110918143 }, { 3110919168, 3110920191 }, { 3110933504, 3110933759 }, { 3110934016, 3110934527 }, { 3110957056, 3110958079 }, { 3110969344, 3110969599 }, { 3110980608, 3110982655 }, { 3110988800, 3110989055 }, { 3110995968, 3110996991 }, { 3111005184, 3111006207 }, { 3111008256, 3111009279 }, { 3111027712, 3111027967 }, { 3111036928, 3111037951 }, { 3111047168, 3111048191 }, { 3111065600, 3111066111 }, { 3111066368, 3111066623 }, { 3111071744, 3111072767 }, { 3111080960, 3111081983 }, { 3111085056, 3111086079 }, { 3111101440, 3111102463 }, { 3111114752, 3111115775 }, { 3111144192, 3111144447 }, { 3111145728, 3111145983 }, { 3111146240, 3111146495 }, { 3111150592, 3111151615 }, { 3111155712, 3111156735 }, { 3111160832, 3111161599 }, { 3111182336, 3111183359 }, { 3111185408, 3111186431 }, { 3111188992, 3111189247 }, { 3111208960, 3111211007 }, { 3111218176, 3111219199 }, { 3111220224, 3111221247 }, { 3111241728, 3111242751 }, { 3111243776, 3111244799 }, { 3111252992, 3111254015 }, { 3111264768, 3111265023 }, { 3111274496, 3111275519 }, { 3111318528, 3111319551 }, { 3111346176, 3111347199 }, { 3111357440, 3111357695 }, { 3111357952, 3111358463 }, { 3111361536, 3111363583 }, { 3111417600, 3111417855 }, { 3111437312, 3111439359 }, { 3111445504, 3111446527 }, { 3111459840, 3111460863 }, { 3111478272, 3111479295 }, { 3111482624, 3111482879 }, { 3111488512, 3111490559 }, { 3111491584, 3111493631 }, { 3111512064, 3111513087 }, { 3111515136, 3111516159 }, { 3111534592, 3111535615 }, { 3111550464, 3111550719 }, { 3111560192, 3111561215 }, { 3111583744, 3111584767 }, { 3111598080, 3111599103 }, { 3111600128, 3111601151 }, { 3111663616, 3111664639 }, { 3111671808, 3111672831 }, { 3111696384, 3111698431 }, { 3111713792, 3111714815 }, { 3111736320, 3111737343 }, { 3111776256, 3111778303 }, { 3111787520, 3111788543 }, { 3111832576, 3111832831 }, { 3111833088, 3111833343 }, { 3111848960, 3111849983 }, { 3111856128, 3111858175 }, { 3111862272, 3111863295 }, { 3111865344, 3111866367 }, { 3111887872, 3111888895 }, { 3111889920, 3111890943 }, { 3111895040, 3111896063 }, { 3111914496, 3111915519 }, { 3111927808, 3111928063 }, { 3111950336, 3111951359 }, { 3111953408, 3111954431 }, { 3111956480, 3111957503 }, { 3111959552, 3111960575 }, { 3111964672, 3111965695 }, { 3111969792, 3111970815 }, { 3111981056, 3111982079 }, { 3111988224, 3111988479 }, { 3111988736, 3111990015 }, { 3111991296, 3111992319 }, { 3111995392, 3111996415 }, { 3112002560, 3112003583 }, { 3112005632, 3112006655 }, { 3112032256, 3112033279 }, { 3112035328, 3112036351 }, { 3112064000, 3112065023 }, { 3112066048, 3112067071 }, { 3112075264, 3112076287 }, { 3112088576, 3112088831 }, { 3112089088, 3112089599 }, { 3112091648, 3112092671 }, { 3112103680, 3112103935 }, { 3112114176, 3112115199 }, { 3112145920, 3112146943 }, { 3112165376, 3112166399 }, { 3112174592, 3112175615 }, { 3112195072, 3112196095 }, { 3112200448, 3112201215 }, { 3112223744, 3112224767 }, { 3112227840, 3112228863 }, { 3112230912, 3112231167 }, { 3112253440, 3112254463 }, { 3112263680, 3112264816 }, { 3112264960, 3112265599 }, { 3112271872, 3112272895 }, { 3112275968, 3112276991 }, { 3112277248, 3112277503 }, { 3112291328, 3112293375 }, { 3112325120, 3112326143 }, { 3112331264, 3112331519 }, { 3112333312, 3112334335 }, { 3112358912, 3112359935 }, { 3112364032, 3112365055 }, { 3112368128, 3112369151 }, { 3112386560, 3112386815 }, { 3112387328, 3112388607 }, { 3112414208, 3112415231 }, { 3112440832, 3112441855 }, { 3112442880, 3112443903 }, { 3112485888, 3112486911 }, { 3112497152, 3112498175 }, { 3112501248, 3112502271 }, { 3112511488, 3112512511 }, { 3112574976, 3112577023 }, { 3112585216, 3112586239 }, { 3112597504, 3112598527 }, { 3112604672, 3112605695 }, { 3112617984, 3112620031 }, { 3112626176, 3112627199 }, { 3112652800, 3112653823 }, { 3112670208, 3112671231 }, { 3112676352, 3112677375 }, { 3112678400, 3112679423 }, { 3112691712, 3112692735 }, { 3112706048, 3112707071 }, { 3112717312, 3112718335 }, { 3112744960, 3112745983 }, { 3112782848, 3112783871 }, { 3112804352, 3112805375 }, { 3112808448, 3112809471 }, { 3112809984, 3112810239 }, { 3112822784, 3112823807 }, { 3112830976, 3112831999 }, { 3112848384, 3112849407 }, { 3112851456, 3112852479 }, { 3112861696, 3112862719 }, { 3112869888, 3112870911 }, { 3112875008, 3112876031 }, { 3112880128, 3112882175 }, { 3112893440, 3112894463 }, { 3112911872, 3112912895 }, { 3112922112, 3112923135 }, { 3112948736, 3112949759 }, { 3112993792, 3112994815 }, { 3112997888, 3112998911 }, { 3113000960, 3113001983 }, { 3113004032, 3113004287 }, { 3113004544, 3113005055 }, { 3113035776, 3113036799 }, { 3113044992, 3113046015 }, { 3113049088, 3113050111 }, { 3113057280, 3113058303 }, { 3113071616, 3113072639 }, { 3113082880, 3113083903 }, { 3113084928, 3113086975 }, { 3113107456, 3113108479 }, { 3113115648, 3113116159 }, { 3113125120, 3113125631 }, { 3113184256, 3113185279 }, { 3113200640, 3113201663 }, { 3113212928, 3113213695 }, { 3113229312, 3113230335 }, { 3113237504, 3113238527 }, { 3113246976, 3113247231 }, { 3113256960, 3113257983 }, { 3113273344, 3113274367 }, { 3113300992, 3113303039 }, { 3113319424, 3113320447 }, { 3113323520, 3113324543 }, { 3113371648, 3113372671 }, { 3113382912, 3113383935 }, { 3113393152, 3113394175 }, { 3113396224, 3113397247 }, { 3113407488, 3113408511 }, { 3113427968, 3113428991 }, { 3113439232, 3113440255 }, { 3113450496, 3113452543 }, { 3113490432, 3113491455 }, { 3113493504, 3113494527 }, { 3113504768, 3113505791 }, { 3113537536, 3113538559 }, { 3113539584, 3113541631 }, { 3113562112, 3113563135 }, { 3113566208, 3113567231 }, { 3113574400, 3113575423 }, { 3113581568, 3113582591 }, { 3113586688, 3113587711 }, { 3113590784, 3113591807 }, { 3113600000, 3113600255 }, { 3113600512, 3113601023 }, { 3113611264, 3113613311 }, { 3113618432, 3113619455 }, { 3113654272, 3113655295 }, { 3113684992, 3113685375 }, { 3113685504, 3113685887 }, { 3113711616, 3113712639 }, { 3113713664, 3113714687 }, { 3113718528, 3113718783 }, { 3113742336, 3113743359 }, { 3113766912, 3113767935 }, { 3113780736, 3113781247 }, { 3113793536, 3113794559 }, { 3113795584, 3113796607 }, { 3113823232, 3113824255 }, { 3113835520, 3113836543 }, { 3113845760, 3113846783 }, { 3113873408, 3113874431 }, { 3113882624, 3113883647 }, { 3113890816, 3113891839 }, { 3113895936, 3113896959 }, { 3113908224, 3113910271 }, { 3113928704, 3113929727 }, { 3113947136, 3113948159 }, { 3113968896, 3113969151 }, { 3113971712, 3113972735 }, { 3113973248, 3113973503 }, { 3114008576, 3114009599 }, { 3114027776, 3114028031 }, { 3114053632, 3114055679 }, { 3114091264, 3114091519 }, { 3114098688, 3114099711 }, { 3114104832, 3114105087 }, { 3114105856, 3114106879 }, { 3114122240, 3114123263 }, { 3114138624, 3114139647 }, { 3114168320, 3114169343 }, { 3114172416, 3114172927 }, { 3114178560, 3114179583 }, { 3114216448, 3114217471 }, { 3114221568, 3114222591 }, { 3114226176, 3114226431 }, { 3114233600, 3114233855 }, { 3114237952, 3114238975 }, { 3114243072, 3114244095 }, { 3114247168, 3114248191 }, { 3114249216, 3114250239 }, { 3114279936, 3114280959 }, { 3114305536, 3114306559 }, { 3114318848, 3114319871 }, { 3114326016, 3114327039 }, { 3114344448, 3114345471 }, { 3114349568, 3114350591 }, { 3114351616, 3114353663 }, { 3114382336, 3114383359 }, { 3114386432, 3114387455 }, { 3114404864, 3114405887 }, { 3114409984, 3114411007 }, { 3114425344, 3114426367 }, { 3114435328, 3114435583 }, { 3114449920, 3114450943 }, { 3114461184, 3114461695 }, { 3114467328, 3114467583 }, { 3114481408, 3114481663 }, { 3114507264, 3114508287 }, { 3114512384, 3114513407 }, { 3114527744, 3114529791 }, { 3114570752, 3114571775 }, { 3114577152, 3114577663 }, { 3114627072, 3114628095 }, { 3114629120, 3114630143 }, { 3114639360, 3114640383 }, { 3114649600, 3114650623 }, { 3114653696, 3114654719 }, { 3114655744, 3114656767 }, { 3114668032, 3114669055 }, { 3114682368, 3114683391 }, { 3114725376, 3114726399 }, { 3114760192, 3114761215 }, { 3114786816, 3114787839 }, { 3114810368, 3114811391 }, { 3114842112, 3114843135 }, { 3114855424, 3114856447 }, { 3114886144, 3114887167 }, { 3114899456, 3114900479 }, { 3114915840, 3114916863 }, { 3114926080, 3114927103 }, { 3114939392, 3114940415 }, { 3114962944, 3114963199 }, { 3114978304, 3114979327 }, { 3114994688, 3114995711 }, { 3115012096, 3115013119 }, { 3115017216, 3115018239 }, { 3115032576, 3115033599 }, { 3115040768, 3115041791 }, { 3115043584, 3115043839 }, { 3115089920, 3115090175 }, { 3115091968, 3115092991 }, { 3115122688, 3115123711 }, { 3115131904, 3115132927 }, { 3115141120, 3115142143 }, { 3115143168, 3115144191 }, { 3115146240, 3115147263 }, { 3115151360, 3115152383 }, { 3115162624, 3115163647 }, { 3115167744, 3115168767 }, { 3115199232, 3115199487 }, { 3115220992, 3115222015 }, { 3115223040, 3115224063 }, { 3115230208, 3115231231 }, { 3115237376, 3115238399 }, { 3115247616, 3115248127 }, { 3115257856, 3115258879 }, { 3115265024, 3115266047 }, { 3115271168, 3115271423 }, { 3115272192, 3115273215 }, { 3115279360, 3115279615 }, { 3115283456, 3115284479 }, { 3115286528, 3115287551 }, { 3115293952, 3115294719 }, { 3115297792, 3115298815 }, { 3115325440, 3115325951 }, { 3115326208, 3115326463 }, { 3115398144, 3115399167 }, { 3115409408, 3115410431 }, { 3115412480, 3115414527 }, { 3115440128, 3115442175 }, { 3115461632, 3115462655 }, { 3115483136, 3115484159 }, { 3115502592, 3115503640 }, { 3115504128, 3115504383 }, { 3115512832, 3115513855 }, { 3115515904, 3115517951 }, { 3115525120, 3115526143 }, { 3115534336, 3115535359 }, { 3115537408, 3115538431 }, { 3115547648, 3115548671 }, { 3115552768, 3115553791 }, { 3115556864, 3115557887 }, { 3115559936, 3115560959 }, { 3115564032, 3115565055 }, { 3115566080, 3115566591 }, { 3115566848, 3115567103 }, { 3115573248, 3115574271 }, { 3115591680, 3115592703 }, { 3115595776, 3115596799 }, { 3115609088, 3115609599 }, { 3115613184, 3115614207 }, { 3115622400, 3115623423 }, { 3115626496, 3115627519 }, { 3115629568, 3115630591 }, { 3115632384, 3115633663 }, { 3115635712, 3115636735 }, { 3115639808, 3115640831 }, { 3115641856, 3115642879 }, { 3115644928, 3115645951 }, { 3115688960, 3115689215 }, { 3115698176, 3115699199 }, { 3115709440, 3115710463 }, { 3115715584, 3115717631 }, { 3115739136, 3115739391 }, { 3115740160, 3115741183 }, { 3115781120, 3115782143 }, { 3115790336, 3115791359 }, { 3115797504, 3115798527 }, { 3115811072, 3115811583 }, { 3115819008, 3115820031 }, { 3115822080, 3115823103 }, { 3115828224, 3115829247 }, { 3115853824, 3115854847 }, { 3115856896, 3115857919 }, { 3115863040, 3115864063 }, { 3115876352, 3115877375 }, { 3115902976, 3115903999 }, { 3115909120, 3115910143 }, { 3115914240, 3115915263 }, { 3115923456, 3115924479 }, { 3115926528, 3115927551 }, { 3115935744, 3115936767 }, { 3115939840, 3115940863 }, { 3115943936, 3115945983 }, { 3115947008, 3115948031 }, { 3115955200, 3115956223 }, { 3115975168, 3115975679 }, { 3116010496, 3116011519 }, { 3116021760, 3116022783 }, { 3116023808, 3116024831 }, { 3116034048, 3116035071 }, { 3116044288, 3116044543 }, { 3116044800, 3116045311 }, { 3116056320, 3116056575 }, { 3116062720, 3116063743 }, { 3116068864, 3116069887 }, { 3116088320, 3116089343 }, { 3116090368, 3116091391 }, { 3116108800, 3116109823 }, { 3116116224, 3116116479 }, { 3116130304, 3116131327 }, { 3116151808, 3116152063 }, { 3116152320, 3116152831 }, { 3116154880, 3116155903 }, { 3116174336, 3116175359 }, { 3116175616, 3116176383 }, { 3116196864, 3116197887 }, { 3116205056, 3116206079 }, { 3116213248, 3116214271 }, { 3116220416, 3116221439 }, { 3116235776, 3116238847 }, { 3116247040, 3116248063 }, { 3116263424, 3116264447 }, { 3116266496, 3116268543 }, { 3116278784, 3116279807 }, { 3116282880, 3116284927 }, { 3116310528, 3116311551 }, { 3116316672, 3116317695 }, { 3116338176, 3116339199 }, { 3116352512, 3116353535 }, { 3116356864, 3116357631 }, { 3116383232, 3116384255 }, { 3116395520, 3116396543 }, { 3116418048, 3116418559 }, { 3116430336, 3116430847 }, { 3116438528, 3116439551 }, { 3116445184, 3116445439 }, { 3116455936, 3116456191 }, { 3116456448, 3116456703 }, { 3116468224, 3116470271 }, { 3116483584, 3116484607 }, { 3116485632, 3116486655 }, { 3116496896, 3116497919 }, { 3116507136, 3116508159 }, { 3116525568, 3116526591 }, { 3116570624, 3116571647 }, { 3116601344, 3116602367 }, { 3116603392, 3116604415 }, { 3116607744, 3116608511 }, { 3116612608, 3116613631 }, { 3116625920, 3116626943 }, { 3116637952, 3116638207 }, { 3116659712, 3116660735 }, { 3116673024, 3116674047 }, { 3116677120, 3116678143 }, { 3116690432, 3116691455 }, { 3116692480, 3116693503 }, { 3116698624, 3116699647 }, { 3116703744, 3116704767 }, { 3116713984, 3116714751 }, { 3116754944, 3116755967 }, { 3116771328, 3116772351 }, { 3116778752, 3116779007 }, { 3116790016, 3116790783 }, { 3116800000, 3116800511 }, { 3116827648, 3116829695 }, { 3116863488, 3116864511 }, { 3116867584, 3116868607 }, { 3116896256, 3116897279 }, { 3116922880, 3116923135 }, { 3116928000, 3116929023 }, { 3116931072, 3116932095 }, { 3116933120, 3116934143 }, { 3116935168, 3116936191 }, { 3116940544, 3116940799 }, { 3116942336, 3116943359 }, { 3116947456, 3116948479 }, { 3116953600, 3116954623 }, { 3116964864, 3116965887 }, { 3116968960, 3116969983 }, { 3116971008, 3116972031 }, { 3116980224, 3116981247 }, { 3116993280, 3116993535 }, { 3117000704, 3117001727 }, { 3117023232, 3117024255 }, { 3117026304, 3117027327 }, { 3117050368, 3117050879 }, { 3117051136, 3117051391 }, { 3117051648, 3117051903 }, { 3117077504, 3117078527 }, { 3117097984, 3117099007 }, { 3117113344, 3117114367 }, { 3117125632, 3117126655 }, { 3117154304, 3117154559 }, { 3117154816, 3117155327 }, { 3117159424, 3117160447 }, { 3117182464, 3117182719 }, { 3117186048, 3117187071 }, { 3117194240, 3117195263 }, { 3117236224, 3117237247 }, { 3117252608, 3117253631 }, { 3117280256, 3117281279 }, { 3117310976, 3117311999 }, { 3117327360, 3117328383 }, { 3117337600, 3117338623 }, { 3117350912, 3117351679 }, { 3117357056, 3117358079 }, { 3117360384, 3117360895 }, { 3117367296, 3117368319 }, { 3117373440, 3117374463 }, { 3117405440, 3117405951 }, { 3117415424, 3117416447 }, { 3117434880, 3117435903 }, { 3117465600, 3117466623 }, { 3117467648, 3117468671 }, { 3117488640, 3117490175 }, { 3117493248, 3117494271 }, { 3117494528, 3117495039 }, { 3117503488, 3117503999 }, { 3117504512, 3117505535 }, { 3117510656, 3117511679 }, { 3117522944, 3117523199 }, { 3117543424, 3117543679 }, { 3117558784, 3117559807 }, { 3117561856, 3117562879 }, { 3117583360, 3117584383 }, { 3117608960, 3117609983 }, { 3117613056, 3117614079 }, { 3117641728, 3117642751 }, { 3117652992, 3117654015 }, { 3117655040, 3117656063 }, { 3117656576, 3117656831 }, { 3117670400, 3117671423 }, { 3117674496, 3117676543 }, { 3117678592, 3117679615 }, { 3117685760, 3117686783 }, { 3117701120, 3117702143 }, { 3117707264, 3117707519 }, { 3117708288, 3117708799 }, { 3117716480, 3117716735 }, { 3117716992, 3117717503 }, { 3117744128, 3117744383 }, { 3117744640, 3117745151 }, { 3117751296, 3117752319 }, { 3117778944, 3117779967 }, { 3117784064, 3117785087 }, { 3117798400, 3117799423 }, { 3117824000, 3117826047 }, { 3117829120, 3117830143 }, { 3117850624, 3117852159 }, { 3117852416, 3117852671 }, { 3117856768, 3117857791 }, { 3117872128, 3117873151 }, { 3117874176, 3117875199 }, { 3117876224, 3117876479 }, { 3117890560, 3117891583 }, { 3117920256, 3117921279 }, { 3117944832, 3117945855 }, { 3117952256, 3117952511 }, { 3117956096, 3117957119 }, { 3117961216, 3117962239 }, { 3117966336, 3117967359 }, { 3117989888, 3117990911 }, { 3117992960, 3117993983 }, { 3118003200, 3118004223 }, { 3118039040, 3118039295 }, { 3118049024, 3118049279 }, { 3118056960, 3118057471 }, { 3118071808, 3118072319 }, { 3118073856, 3118074879 }, { 3118089216, 3118090239 }, { 3118099456, 3118100479 }, { 3118116864, 3118118911 }, { 3118138368, 3118138623 }, { 3118147584, 3118148607 }, { 3118150656, 3118151423 }, { 3118211072, 3118214143 }, { 3118259456, 3118259711 }, { 3118279680, 3118280703 }, { 3118298112, 3118300159 }, { 3118307328, 3118308351 }, { 3118309376, 3118309631 }, { 3118309888, 3118310143 }, { 3118310400, 3118311423 }, { 3118319104, 3118319615 }, { 3118322688, 3118323711 }, { 3118347264, 3118348287 }, { 3118360576, 3118361599 }, { 3118372864, 3118373887 }, { 3118385408, 3118386175 }, { 3118388736, 3118388991 }, { 3118394368, 3118395391 }, { 3118429184, 3118430207 }, { 3118453760, 3118454015 }, { 3118467072, 3118468095 }, { 3118489600, 3118490623 }, { 3118519296, 3118519551 }, { 3118520832, 3118521343 }, { 3118523392, 3118524415 }, { 3118528512, 3118529535 }, { 3118538752, 3118539775 }, { 3118569472, 3118570495 }, { 3118575616, 3118576639 }, { 3118581760, 3118582783 }, { 3118609408, 3118610431 }, { 3118628864, 3118629887 }, { 3118658560, 3118659583 }, { 3118670848, 3118671871 }, { 3118679552, 3118679807 }, { 3118683136, 3118684159 }, { 3118739456, 3118740479 }, { 3118749696, 3118750719 }, { 3118755840, 3118756863 }, { 3118760960, 3118761983 }, { 3118786560, 3118787583 }, { 3118790656, 3118790911 }, { 3118794752, 3118795775 }, { 3118809088, 3118810111 }, { 3118823936, 3118824447 }, { 3118839808, 3118840831 }, { 3118841856, 3118842879 }, { 3118845184, 3118845439 }, { 3118852096, 3118853119 }, { 3118894080, 3118895103 }, { 3118906368, 3118907391 }, { 3118919680, 3118920703 }, { 3118936064, 3118937087 }, { 3118938112, 3118938367 }, { 3118962688, 3118963711 }, { 3118976000, 3118977023 }, { 3118983168, 3118983423 }, { 3118985216, 3118987263 }, { 3118993408, 3118994431 }, { 3119001344, 3119001599 }, { 3119002880, 3119003135 }, { 3119004672, 3119005695 }, { 3119015936, 3119016959 }, { 3119024128, 3119025151 }, { 3119032576, 3119032831 }, { 3119042560, 3119043583 }, { 3119047680, 3119048703 }, { 3119048960, 3119049215 }, { 3119049472, 3119049727 }, { 3119054848, 3119055615 }, { 3119076096, 3119076351 }, { 3119078400, 3119079423 }, { 3119084032, 3119084287 }, { 3119104000, 3119105023 }, { 3119106048, 3119106559 }, { 3119115264, 3119116287 }, { 3119122432, 3119122687 }, { 3119122944, 3119123455 }, { 3119150080, 3119152127 }, { 3119178752, 3119179775 }, { 3119188224, 3119188479 }, { 3119188736, 3119188991 }, { 3119193088, 3119194111 }, { 3119201536, 3119201791 }, { 3119202304, 3119203327 }, { 3119204352, 3119205375 }, { 3119209472, 3119210495 }, { 3119244800, 3119245311 }, { 3119249152, 3119249407 }, { 3119256576, 3119257599 }, { 3119258624, 3119259647 }, { 3119265280, 3119265535 }, { 3119267840, 3119269887 }, { 3119284992, 3119285247 }, { 3119287808, 3119288063 }, { 3119291392, 3119292415 }, { 3119304704, 3119305727 }, { 3119306752, 3119307775 }, { 3119310848, 3119311871 }, { 3119342592, 3119343103 }, { 3119364608, 3119364863 }, { 3119366144, 3119366399 }, { 3119366656, 3119367167 }, { 3119377408, 3119378431 }, { 3119380992, 3119381503 }, { 3119401984, 3119403007 }, { 3119409152, 3119410175 }, { 3119417344, 3119418367 }, { 3119432704, 3119434751 }, { 3119435776, 3119436799 }, { 3119460864, 3119461375 }, { 3119470592, 3119471615 }, { 3119477760, 3119479807 }, { 3119480832, 3119482879 }, { 3119525888, 3119526911 }, { 3119537152, 3119538175 }, { 3119539200, 3119540223 }, { 3119593728, 3119593983 }, { 3119596544, 3119597055 }, { 3119607552, 3119607807 }, { 3119624192, 3119625215 }, { 3119628288, 3119629311 }, { 3119648768, 3119649791 }, { 3119650304, 3119650815 }, { 3119671296, 3119671807 }, { 3119674368, 3119675391 }, { 3119675648, 3119676415 }, { 3119731712, 3119732735 }, { 3119766528, 3119767551 }, { 3119776768, 3119777791 }, { 3119780864, 3119781887 }, { 3119785984, 3119788031 }, { 3119795200, 3119796223 }, { 3119809536, 3119810559 }, { 3119819776, 3119820287 }, { 3119820544, 3119820799 }, { 3119821824, 3119822847 }, { 3119847168, 3119847423 }, { 3119850496, 3119851519 }, { 3119879168, 3119880191 }, { 3119888384, 3119889407 }, { 3119915008, 3119916031 }, { 3119923200, 3119924223 }, { 3119929344, 3119930367 }, { 3119936512, 3119937535 }, { 3119938560, 3119939583 }, { 3119946240, 3119946495 }, { 3119952896, 3119953919 }, { 3119955968, 3119956991 }, { 3119990016, 3119990271 }, { 3119992832, 3119993855 }, { 3120008192, 3120009215 }, { 3120019968, 3120020479 }, { 3120021504, 3120022527 }, { 3120041984, 3120043007 }, { 3120044800, 3120045055 }, { 3120063488, 3120064511 }, { 3120143360, 3120144383 }, { 3120168960, 3120169983 }, { 3120179200, 3120179711 }, { 3120180224, 3120182271 }, { 3120184320, 3120185343 }, { 3120201728, 3120202751 }, { 3120207104, 3120207359 }, { 3120227328, 3120228351 }, { 3120239616, 3120239871 }, { 3120240128, 3120240383 }, { 3120257024, 3120258047 }, { 3120272384, 3120273407 }, { 3120289792, 3120291839 }, { 3120295936, 3120296959 }, { 3120315392, 3120316415 }, { 3120321536, 3120322559 }, { 3120337152, 3120337919 }, { 3120353280, 3120353535 }, { 3120355584, 3120355839 }, { 3120358400, 3120359423 }, { 3120363520, 3120364543 }, { 3120366080, 3120366335 }, { 3120366592, 3120366847 }, { 3120370688, 3120371711 }, { 3120373760, 3120374783 }, { 3120375808, 3120376831 }, { 3120379648, 3120379903 }, { 3120391168, 3120393215 }, { 3120400384, 3120401407 }, { 3120411648, 3120413695 }, { 3120421120, 3120421375 }, { 3120447232, 3120447487 }, { 3120479232, 3120480255 }, { 3120485376, 3120486399 }, { 3120504320, 3120504703 }, { 3120530432, 3120531455 }, { 3120535808, 3120536063 }, { 3120541696, 3120542463 }, { 3132194304, 3132194559 }, { 3132918784, 3132919295 }, { 3132919552, 3132919807 }, { 3154116608, 3154124799 }, { 3154126848, 3154128895 }, { 3154157568, 3154173951 }, { 3155165184, 3155427327 }, { 3156213760, 3156279295 }, { 3156410368, 3156456447 }, { 3156457472, 3156475903 }, { 3156875776, 3156877311 }, { 3156889600, 3156890623 }, { 3156907008, 3156908031 }, { 3156914176, 3156916223 }, { 3156923136, 3156923391 }, { 3156934656, 3157000191 }, { 3157008384, 3157016575 }, { 3157024768, 3157032959 }, { 3158339584, 3158341631 }, { 3158343680, 3158346239 }, { 3158346752, 3158347007 }, { 3158347776, 3158349823 }, { 3158351872, 3158355967 }, { 3158366208, 3158368255 }, { 3158378496, 3158380543 }, { 3158381056, 3158381567 }, { 3158388736, 3158390783 }, { 3158392832, 3158394879 }, { 3158403072, 3158405119 }, { 3158409216, 3158411263 }, { 3158429696, 3158431743 }, { 3158435840, 3158439935 }, { 3158450176, 3158452223 }, { 3158574080, 3158581247 }, { 3158593536, 3158615039 }, { 3158616064, 3158630399 }, { 3158853632, 3158855679 }, { 3158859776, 3158860031 }, { 3158861568, 3158861823 }, { 3158862592, 3158862847 }, { 3158865408, 3158865663 }, { 3158933504, 3158949887 }, { 3159031808, 3159048191 }, { 3159080960, 3159097343 }, { 3160145920, 3160147967 }, { 3160172544, 3160174591 }, { 3160190976, 3160193023 }, { 3160195072, 3160197119 }, { 3160201216, 3160203263 }, { 3160207360, 3160209407 }, { 3160215552, 3160219647 }, { 3160223744, 3160228863 }, { 3160238080, 3160240127 }, { 3160244224, 3160246527 }, { 3160264704, 3160266751 }, { 3160272896, 3160274943 }, { 3160285184, 3160287231 }, { 3160289280, 3160291327 }, { 3160299520, 3160301567 }, { 3160317952, 3160322047 }, { 3160330240, 3160332287 }, { 3160334336, 3160336383 }, { 3160360704, 3160360959 }, { 3160366080, 3160366335 }, { 3160366592, 3160367103 }, { 3160369152, 3160371199 }, { 3160389632, 3160391679 }, { 3161505792, 3161538559 }, { 3161554944, 3161571327 }, { 3161587712, 3161604095 }, { 3161636864, 3161645055 }, { 3161751552, 3161767935 }, { 3161931776, 3161932799 }, { 3161934848, 3161935871 }, { 3161946112, 3161946367 }, { 3161946624, 3161948159 }, { 3161993216, 3161997311 }, { 3162038272, 3162046463 }, { 3162128384, 3162129407 }, { 3162132992, 3162133503 }, { 3162152960, 3162161151 }, { 3162169344, 3162177535 }, { 3162185728, 3162193919 }, { 3162234880, 3162243071 }, { 3162251264, 3162257407 }, { 3162267648, 3162275839 }, { 3162300416, 3162302463 }, { 3162304512, 3162305535 }, { 3162306560, 3162308607 }, { 3162382336, 3162390527 }, { 3162497024, 3162504191 }, { 3162504448, 3162537983 }, { 3162669056, 3162669567 }, { 3162669824, 3162672127 }, { 3162672384, 3162676223 }, { 3162677504, 3162677759 }, { 3162678016, 3162678271 }, { 3162678528, 3162679039 }, { 3162679296, 3162679807 }, { 3162680064, 3162681343 }, { 3162683392, 3162686463 }, { 3162689536, 3162693375 }, { 3162695680, 3162696191 }, { 3162696448, 3162696703 }, { 3162697216, 3162698751 }, { 3162699776, 3162700543 }, { 3162700800, 3162701823 }, { 3162734592, 3162767359 }, { 3162865664, 3162931199 }, { 3163187486, 3163187711 }, { 3163192587, 3163192831 }, { 3163521024, 3163553791 }, { 3164733440, 3164798975 }, { 3164891184, 3164891391 }, { 3164891712, 3164892159 }, { 3164892928, 3164893183 }, { 3164899328, 3164901375 }, { 3164905472, 3164913663 }, { 3164917760, 3164919807 }, { 3164936192, 3164936447 }, { 3165126656, 3165192191 }, { 3165257728, 3165323263 }, { 3166306304, 3166437375 }, { 3166593024, 3166594047 }, { 3166598144, 3166599167 }, { 3166601216, 3166609407 }, { 3166617600, 3166625791 }, { 3166633984, 3166642175 }, { 3166654464, 3166658559 }, { 3166662656, 3166666751 }, { 3166674944, 3166679039 }, { 3166681088, 3166685183 }, { 3166695424, 3166697471 }, { 3168862208, 3168894975 }, { 3168927744, 3168960511 }, { 3168993280, 3169007615 }, { 3169008640, 3169014783 }, { 3169015808, 3169020415 }, { 3169020928, 3169026047 }, { 3169056640, 3169056767 }, { 3169320960, 3169583103 }, { 3169931264, 3169931519 }, { 3169976320, 3170111487 }, { 3170115584, 3170119679 }, { 3170136064, 3170136319 }, { 3170140160, 3170172927 }, { 3170279424, 3170287615 }, { 3170295808, 3170298879 }, { 3170312192, 3170320383 }, { 3170762752, 3170795519 }, { 3170828288, 3170861055 }, { 3193757696, 3193765887 }, { 3196847104, 3196847359 }, { 3196847616, 3196847871 }, { 3196868608, 3196869375 }, { 3196886528, 3196886783 }, { 3196923904, 3196924927 }, { 3196928256, 3196928511 }, { 3196934656, 3196934911 }, { 3196937216, 3196937727 }, { 3196937984, 3196938239 }, { 3196941824, 3196942079 }, { 3196950272, 3196950527 }, { 3196950784, 3196951039 }, { 3196951296, 3196951551 }, { 3196954624, 3196955135 }, { 3196955392, 3196955647 }, { 3201991680, 3201992447 }, { 3202004992, 3202005247 }, { 3202005504, 3202006015 }, { 3202012416, 3202012671 }, { 3202012928, 3202013183 }, { 3202019584, 3202019839 }, { 3202020096, 3202020351 }, { 3202025728, 3202025983 }, { 3202026240, 3202026495 }, { 3202036736, 3202037247 }, { 3202051328, 3202051583 }, { 3202073600, 3202073855 }, { 3202074112, 3202074623 }, { 3221230720, 3221230847 }, { 3221231136, 3221231359 }, { 3221232672, 3221232895 }, { 3221233512, 3221233663 }, { 3221435840, 3221435903 }, { 3221482240, 3221482495 }, { 3222736640, 3222736895 }, { 3222744576, 3222744831 }, { 3222746112, 3222746367 }, { 3222766080, 3222766335 }, { 3222771968, 3222772223 }, { 3222775552, 3222775807 }, { 3222780928, 3222781183 }, { 3224783872, 3224784383 }, { 3224812032, 3224812543 }, { 3224832512, 3224833023 }, { 3224841728, 3224841983 }, { 3224847360, 3224848383 }, { 3225036800, 3225037055 }, { 3225863168, 3225864191 }, { 3226132496, 3226133183 }, { 3226133248, 3226133583 }, { 3226133760, 3226134079 }, { 3226134272, 3226134527 }, { 3226134784, 3226135039 }, { 3226135296, 3226135551 }, { 3226135808, 3226136191 }, { 3226136352, 3226136575 }, { 3226136960, 3226137151 }, { 3226137344, 3226137631 }, { 3226137856, 3226138143 }, { 3226138528, 3226138687 }, { 3226138880, 3226139167 }, { 3226139648, 3226140287 }, { 3226140416, 3226140671 }, { 3226864384, 3226864639 }, { 3227236864, 3227237119 }, { 3227442432, 3227442687 }, { 3227445504, 3227445759 }, { 3227455232, 3227455487 }, { 3227737344, 3227737599 }, { 3227737864, 3227738111 }, { 3227845632, 3227845887 }, { 3227962368, 3227962879 }, { 3227968768, 3227969023 }, { 3228392192, 3228392447 }, { 3228393728, 3228394239 }, { 3228394496, 3228394751 }, { 3228412928, 3228413183 }, { 3228419072, 3228419327 }, { 3228420864, 3228421119 }, { 3228422144, 3228422399 }, { 3228423680, 3228424191 }, { 3228426240, 3228426751 }, { 3228431104, 3228431359 }, { 3228432384, 3228432639 }, { 3228432896, 3228433151 }, { 3228433664, 3228433919 }, { 3229391360, 3229391615 }, { 3229395456, 3229395967 }, { 3229396224, 3229396735 }, { 3229396992, 3229397247 }, { 3229397760, 3229398015 }, { 3229399040, 3229401087 }, { 3229405184, 3229405439 }, { 3229405696, 3229408255 }, { 3230153984, 3230154239 }, { 3230211840, 3230212095 }, { 3230433280, 3230436351 }, { 3230440448, 3230455807 }, { 3230663936, 3230664703 }, { 3230667264, 3230667519 }, { 3230669824, 3230670847 }, { 3230671872, 3230672383 }, { 3230672896, 3230673919 }, { 3230674944, 3230675967 }, { 3230695424, 3230728191 }, { 3230728192, 3230729215 }, { 3230731264, 3230733311 }, { 3230752768, 3230753791 }, { 3230829568, 3230830079 }, { 3230967296, 3230967551 }, { 3231108352, 3231108607 }, { 3231177472, 3231177727 }, { 3231178496, 3231178751 }, { 3231768576, 3231768831 }, { 3231770880, 3231771135 }, { 3231842304, 3231843327 }, { 3231844352, 3231845375 }, { 3231847424, 3231848447 }, { 3231851520, 3231853567 }, { 3231856640, 3231857663 }, { 3231858688, 3231859711 }, { 3231864832, 3231865855 }, { 3231867904, 3231868927 }, { 3231873024, 3231875071 }, { 3231888384, 3231889407 }, { 3231890432, 3231892479 }, { 3231896576, 3231897599 }, { 3231903744, 3231905791 }, { 3231906048, 3231907839 }, { 3232107520, 3232108543 }, { 3232130048, 3232130303 }, { 3232130816, 3232131071 }, { 3232134144, 3232135167 }, { 3232135936, 3232136191 }, { 3232163840, 3232165887 }, { 3232489472, 3232491519 }, { 3233293712, 3233293823 }, { 3233294592, 3233294847 }, { 3233295104, 3233295359 }, { 3233296128, 3233296383 }, { 3233297280, 3233297423 }, { 3233298432, 3233298695 }, { 3233299456, 3233299519 }, { 3233454976, 3233455007 }, { 3233456448, 3233456575 }, { 3233463648, 3233463663 }, { 3233575936, 3233576191 }, { 3233594112, 3233594367 }, { 3233594624, 3233594879 }, { 3234007040, 3234007295 }, { 3234226400, 3234226431 }, { 3234227152, 3234227199 }, { 3234227744, 3234227871 }, { 3234229088, 3234229247 }, { 3234231440, 3234231551 }, { 3234549760, 3234550015 }, { 3236983808, 3236984063 }, { 3237863424, 3237863663 }, { 3237863936, 3237864199 }, { 3237864448, 3237864711 }, { 3237864960, 3237865311 }, { 3237865488, 3237865767 }, { 3237865928, 3237866287 }, { 3237866496, 3237866735 }, { 3237867016, 3237867255 }, { 3238018560, 3238018815 }, { 3238035968, 3238037503 }, { 3238039808, 3238040063 }, { 3238040576, 3238042623 }, { 3238045184, 3238047743 }, { 3238050048, 3238050303 }, { 3238053888, 3238054911 }, { 3238057472, 3238057983 }, { 3238065408, 3238065919 }, { 3238203648, 3238204415 }, { 3238204928, 3238205439 }, { 3238209536, 3238209791 }, { 3238210048, 3238210303 }, { 3238234112, 3238234367 }, { 3238242816, 3238243071 }, { 3238244608, 3238244863 }, { 3238245120, 3238245375 }, { 3238246400, 3238246911 }, { 3238247424, 3238247679 }, { 3238258176, 3238258431 }, { 3238502400, 3238504447 }, { 3238511616, 3238512639 }, { 3238516736, 3238517759 }, { 3238526976, 3238527231 }, { 3238545920, 3238546431 }, { 3238580224, 3238581247 }, { 3238596864, 3238597119 }, { 3238598144, 3238598399 }, { 3238607872, 3238608895 }, { 3238632448, 3238633087 }, { 3238653952, 3238655999 }, { 3238656768, 3238657023 }, { 3239061504, 3239062015 }, { 3239104512, 3239105279 }, { 3239110656, 3239110911 }, { 3239127808, 3239128063 }, { 3239130112, 3239130367 }, { 3239139328, 3239139583 }, { 3239140352, 3239140863 }, { 3239147520, 3239148543 }, { 3239160320, 3239160575 }, { 3239171328, 3239171583 }, { 3239264768, 3239266303 }, { 3239268864, 3239269375 }, { 3239273472, 3239274495 }, { 3239276032, 3239276543 }, { 3239277568, 3239278591 }, { 3239280128, 3239280639 }, { 3239281664, 3239282687 }, { 3239290880, 3239291903 }, { 3239446016, 3239446271 }, { 3239467008, 3239467263 }, { 3239506432, 3239506687 }, { 3239506944, 3239507199 }, { 3239522816, 3239523071 }, { 3239524096, 3239524351 }, { 3239546368, 3239546623 }, { 3239546880, 3239547903 }, { 3239577600, 3239578623 }, { 3239625728, 3239626751 }, { 3239633920, 3239634943 }, { 3239643136, 3239645183 }, { 3239671808, 3239672319 }, { 3239689216, 3239690239 }, { 3239694848, 3239695359 }, { 3239697664, 3239697919 }, { 3239710720, 3239710975 }, { 3239711232, 3239711743 }, { 3239737856, 3239738111 }, { 3239739136, 3239739391 }, { 3239740672, 3239740927 }, { 3239741184, 3239741439 }, { 3239759872, 3239760127 }, { 3239761408, 3239761663 }, { 3239762176, 3239762431 }, { 3239781376, 3239781631 }, { 3239781888, 3239782399 }, { 3239782656, 3239782911 }, { 3239826944, 3239827455 }, { 3239828992, 3239830015 }, { 3239830528, 3239831551 }, { 3239832576, 3239834623 }, { 3239839232, 3239839487 }, { 3239848960, 3239849215 }, { 3239849472, 3239849727 }, { 3239877632, 3239877887 }, { 3239897600, 3239897855 }, { 3239902464, 3239902719 }, { 3239908096, 3239908351 }, { 3239911424, 3239912447 }, { 3239960576, 3239961087 }, { 3239962112, 3239962623 }, { 3239978752, 3239979007 }, { 3239996416, 3239996671 }, { 3240029184, 3240030207 }, { 3240034304, 3240034559 }, { 3240035584, 3240035839 }, { 3240059904, 3240060927 }, { 3240083456, 3240085503 }, { 3240104960, 3240105215 }, { 3240113664, 3240113919 }, { 3240115200, 3240116223 }, { 3240124416, 3240125439 }, { 3240138752, 3240139775 }, { 3240144896, 3240145919 }, { 3240147968, 3240148991 }, { 3240150016, 3240152063 }, { 3240155136, 3240156159 }, { 3240167936, 3240168447 }, { 3240172032, 3240172543 }, { 3240177664, 3240177919 }, { 3240181248, 3240181759 }, { 3240182528, 3240183295 }, { 3240184320, 3240184831 }, { 3240185856, 3240187391 }, { 3240187648, 3240188415 }, { 3240190976, 3240191487 }, { 3240196096, 3240197375 }, { 3240199168, 3240199679 }, { 3240202240, 3240202751 }, { 3240206336, 3240206847 }, { 3240207872, 3240208127 }, { 3240208896, 3240209407 }, { 3240212480, 3240212991 }, { 3240214528, 3240215551 }, { 3240218624, 3240218879 }, { 3240223232, 3240223743 }, { 3240224256, 3240225279 }, { 3240225792, 3240226303 }, { 3240226816, 3240227327 }, { 3240232960, 3240235007 }, { 3240262656, 3240263679 }, { 3240271872, 3240272383 }, { 3240272896, 3240273407 }, { 3240278016, 3240278527 }, { 3240279552, 3240280063 }, { 3240282880, 3240283135 }, { 3240284160, 3240285183 }, { 3240290304, 3240291327 }, { 3240304640, 3240305663 }, { 3240306176, 3240306687 }, { 3240307200, 3240307711 }, { 3240308736, 3240309759 }, { 3240321024, 3240321535 }, { 3240322048, 3240322303 }, { 3240324352, 3240324607 }, { 3240354560, 3240354815 }, { 3240370944, 3240371199 }, { 3240371712, 3240371967 }, { 3240372480, 3240372735 }, { 3240376320, 3240377343 }, { 3240385280, 3240385535 }, { 3240436224, 3240436479 }, { 3240439808, 3240440831 }, { 3240445184, 3240445951 }, { 3240461824, 3240462079 }, { 3240462592, 3240462847 }, { 3240467200, 3240467455 }, { 3240467712, 3240467967 }, { 3240484864, 3240485119 }, { 3240486144, 3240486399 }, { 3240505856, 3240506367 }, { 3240551424, 3240553471 }, { 3240588288, 3240588543 }, { 3240599552, 3240600575 }, { 3240601856, 3240602111 }, { 3240614912, 3240615935 }, { 3240622080, 3240622591 }, { 3240709120, 3240710143 }, { 3240713472, 3240713727 }, { 3240725504, 3240726527 }, { 3240741632, 3240741887 }, { 3240784128, 3240785407 }, { 3240785664, 3240786175 }, { 3240786432, 3240787967 }, { 3240792320, 3240792575 }, { 3240822784, 3240823807 }, { 3240831232, 3240831487 }, { 3240839168, 3240839423 }, { 3240840704, 3240840959 }, { 3240853248, 3240853503 }, { 3240866816, 3240867071 }, { 3240867328, 3240867583 }, { 3240880128, 3240881151 }, { 3240884224, 3240884735 }, { 3240953344, 3240953599 }, { 3241017856, 3241018111 }, { 3241031936, 3241032191 }, { 3241032704, 3241032959 }, { 3241033984, 3241034239 }, { 3241037056, 3241037311 }, { 3241039872, 3241040127 }, { 3241070336, 3241070847 }, { 3241071872, 3241072127 }, { 3241079808, 3241080831 }, { 3241091072, 3241091839 }, { 3241093120, 3241095167 }, { 3241105152, 3241105407 }, { 3241120256, 3241120511 }, { 3241120768, 3241121023 }, { 3241122304, 3241122559 }, { 3241125376, 3241125631 }, { 3241144320, 3241145343 }, { 3241508352, 3241508863 }, { 3241519104, 3241519359 }, { 3241710080, 3241710335 }, { 3241720064, 3241720575 }, { 3241720832, 3241721087 }, { 3241721344, 3241721599 }, { 3241724416, 3241724671 }, { 3241773056, 3241774079 }, { 3241831168, 3241831423 }, { 3241846784, 3241847551 }, { 3241849344, 3241849855 }, { 3241868032, 3241868287 }, { 3242614800, 3242615039 }, { 3243509760, 3243510015 }, { 3243515648, 3243515903 }, { 3243527168, 3243527423 }, { 3243527680, 3243527935 }, { 3243530752, 3243531007 }, { 3243533312, 3243534335 }, { 3243536640, 3243536895 }, { 3243553792, 3243554047 }, { 3243555584, 3243555839 }, { 3243570176, 3243570431 }, { 3243572992, 3243573247 }, { 3244104704, 3244105727 }, { 3244112896, 3244113407 }, { 3244128256, 3244129279 }, { 3244156928, 3244158975 }, { 3244160000, 3244161023 }, { 3244821248, 3244821503 }, { 3244822016, 3244822271 }, { 3244824576, 3244824831 }, { 3244825344, 3244826111 }, { 3244833024, 3244833279 }, { 3244833536, 3244833791 }, { 3244834816, 3244835071 }, { 3244836096, 3244836607 }, { 3244837376, 3244837887 }, { 3244840704, 3244840959 }, { 3244843264, 3244843519 }, { 3244844544, 3244844799 }, { 3244850944, 3244851455 }, { 3244854016, 3244854271 }, { 3244855040, 3244855295 }, { 3244855552, 3244855807 }, { 3244856576, 3244856831 }, { 3244858624, 3244858879 }, { 3244861952, 3244862207 }, { 3244863744, 3244863999 }, { 3244864768, 3244865023 }, { 3244867328, 3244867583 }, { 3244868352, 3244868607 }, { 3244870400, 3244870655 }, { 3244871424, 3244871679 }, { 3244875776, 3244876799 }, { 3244877312, 3244877567 }, { 3244878336, 3244878591 }, { 3244879104, 3244879359 }, { 3244880128, 3244880383 }, { 3244880640, 3244880895 }, { 3244881152, 3244881407 }, { 3244881920, 3244882175 }, { 3244884992, 3244885247 }, { 3244886784, 3244887039 }, { 3244887552, 3244887807 }, { 3244890880, 3244891135 }, { 3244893440, 3244893695 }, { 3244893952, 3244894463 }, { 3244897536, 3244897791 }, { 3244899072, 3244899327 }, { 3244900608, 3244900863 }, { 3244902400, 3244902655 }, { 3244907776, 3244908287 }, { 3244909568, 3244909823 }, { 3244911360, 3244911615 }, { 3244913152, 3244913407 }, { 3244914176, 3244914431 }, { 3244916224, 3244916479 }, { 3244917504, 3244918015 }, { 3244927232, 3244927487 }, { 3244928512, 3244928767 }, { 3244934656, 3244934911 }, { 3244938496, 3244938751 }, { 3244940800, 3244941055 }, { 3244944128, 3244944639 }, { 3244949248, 3244951551 }, { 3244959744, 3244960767 }, { 3244966912, 3244968959 }, { 3244972032, 3244974079 }, { 3244977152, 3244979199 }, { 3244983296, 3244984319 }, { 3244987392, 3244988415 }, { 3244992512, 3244994559 }, { 3244996608, 3244997631 }, { 3244998400, 3244998655 }, { 3245003776, 3245004799 }, { 3245008896, 3245009919 }, { 3245010944, 3245011967 }, { 3245015040, 3245016063 }, { 3245027328, 3245029375 }, { 3245030400, 3245031423 }, { 3245038592, 3245039615 }, { 3245040640, 3245041663 }, { 3245043712, 3245044735 }, { 3245050880, 3245051903 }, { 3245052928, 3245054975 }, { 3245061120, 3245062143 }, { 3245063168, 3245065215 }, { 3245073408, 3245076479 }, { 3245109248, 3245110015 }, { 3245127168, 3245127679 }, { 3245131264, 3245131519 }, { 3245133824, 3245134079 }, { 3245134592, 3245134847 }, { 3245161472, 3245161727 }, { 3245164032, 3245164543 }, { 3245165568, 3245166591 }, { 3245167616, 3245167871 }, { 3245168896, 3245169151 }, { 3245175296, 3245175551 }, { 3245176832, 3245177087 }, { 3245201664, 3245201919 }, { 3245209088, 3245209599 }, { 3245211648, 3245212159 }, { 3245230592, 3245230847 }, { 3245234944, 3245235199 }, { 3245235456, 3245235711 }, { 3245245184, 3245245439 }, { 3245246464, 3245246719 }, { 3245247744, 3245247999 }, { 3245272064, 3245273087 }, { 3245277696, 3245278207 }, { 3245288704, 3245288959 }, { 3245297664, 3245297919 }, { 3245299200, 3245299455 }, { 3245300736, 3245300991 }, { 3245309440, 3245309951 }, { 3245318144, 3245318399 }, { 3245322240, 3245323263 }, { 3245341440, 3245342719 }, { 3245342720, 3245408255 }, { 3245744640, 3245745151 }, { 3245751552, 3245751807 }, { 3246129152, 3246129407 }, { 3246129664, 3246129919 }, { 3246130176, 3246131199 }, { 3246131456, 3246131711 }, { 3246132992, 3246134271 }, { 3246134784, 3246135295 }, { 3246135296, 3246135551 }, { 3246136832, 3246137087 }, { 3246137600, 3246138623 }, { 3246139392, 3246140159 }, { 3246140416, 3246141695 }, { 3246141952, 3246142207 }, { 3246142976, 3246144767 }, { 3246145536, 3246146559 }, { 3246147328, 3246147583 }, { 3246149632, 3246149887 }, { 3246151680, 3246153727 }, { 3246157824, 3246159871 }, { 3246160128, 3246160383 }, { 3246160896, 3246161407 }, { 3246161920, 3246162943 }, { 3246163200, 3246163711 }, { 3246169600, 3246170111 }, { 3246174208, 3246178303 }, { 3246180352, 3246182399 }, { 3246194176, 3246194431 }, { 3246884352, 3246884863 }, { 3247064576, 3247064831 }, { 3247066880, 3247067135 }, { 3247067648, 3247067903 }, { 3247068160, 3247068415 }, { 3247069440, 3247069695 }, { 3247079424, 3247080447 }, { 3247084544, 3247085567 }, { 3247091712, 3247092735 }, { 3247106048, 3247107071 }, { 3247256832, 3247257087 }, { 3247302144, 3247302655 }, { 3247313920, 3247314431 }, { 3247316736, 3247316991 }, { 3247323136, 3247323647 }, { 3247345664, 3247345919 }, { 3247346688, 3247346943 }, { 3247347712, 3247347967 }, { 3247348736, 3247348991 }, { 3247370752, 3247371007 }, { 3247371776, 3247372031 }, { 3247372544, 3247372799 }, { 3247374336, 3247374847 }, { 3247390720, 3247391743 }, { 3247397888, 3247398143 }, { 3247398912, 3247399423 }, { 3247404800, 3247405055 }, { 3247438336, 3247438847 }, { 3247705856, 3247706111 }, { 3247713280, 3247713535 }, { 3247717888, 3247718143 }, { 3247771648, 3247772671 }, { 3247833088, 3247833599 }, { 3247838208, 3247838463 }, { 3247841280, 3247841791 }, { 3247846400, 3247847423 }, { 3247849728, 3247849983 }, { 3247851264, 3247851519 }, { 3247853568, 3247854591 }, { 3247856640, 3247857663 }, { 3247858432, 3247859711 }, { 3247859968, 3247861759 }, { 3247862272, 3247863807 }, { 3247864832, 3247865343 }, { 3247876608, 3247876863 }, { 3247898624, 3247899647 }, { 3247904768, 3247905791 }, { 3247926272, 3247927039 }, { 3247941632, 3247942655 }, { 3247947776, 3247955967 }, { 3247956224, 3247956479 }, { 3247956736, 3247960063 }, { 3248491520, 3248492031 }, { 3248506112, 3248506367 }, { 3248506880, 3248507391 }, { 3248521984, 3248522239 }, { 3248528896, 3248529151 }, { 3248540672, 3248541183 }, { 3248542208, 3248542719 }, { 3248546816, 3248547839 }, { 3248553728, 3248553983 }, { 3248603392, 3248603647 }, { 3248608256, 3248609279 }, { 3248627200, 3248627455 }, { 3248652800, 3248653055 }, { 3248655104, 3248655359 }, { 3248656128, 3248656383 }, { 3248685824, 3248686079 }, { 3248699136, 3248699391 }, { 3248709120, 3248709375 }, { 3248729856, 3248730111 }, { 3248735488, 3248735743 }, { 3248736000, 3248736255 }, { 3248737024, 3248737279 }, { 3248737536, 3248737791 }, { 3248754688, 3248755711 }, { 3248787968, 3248788223 }, { 3248788736, 3248789247 }, { 3248789504, 3248789759 }, { 3248800256, 3248800767 }, { 3248801792, 3248802303 }, { 3248802816, 3248803327 }, { 3248805376, 3248805887 }, { 3249013504, 3249013759 }, { 3249024512, 3249025535 }, { 3249045504, 3249046527 }, { 3249047552, 3249048575 }, { 3249057792, 3249058815 }, { 3249060864, 3249061887 }, { 3249068288, 3249068543 }, { 3249070336, 3249071103 }, { 3249078272, 3249078783 }, { 3249079296, 3249079807 }, { 3249083904, 3249084927 }, { 3249085440, 3249085951 }, { 3249086464, 3249088511 }, { 3249089536, 3249090047 }, { 3249091584, 3249092095 }, { 3249093632, 3249094655 }, { 3249102848, 3249103359 }, { 3249104384, 3249104895 }, { 3249106432, 3249106943 }, { 3249108480, 3249108991 }, { 3249109504, 3249110015 }, { 3249111040, 3249111551 }, { 3249119232, 3249119743 }, { 3249122304, 3249122815 }, { 3249123328, 3249124351 }, { 3249129984, 3249130495 }, { 3249132032, 3249132543 }, { 3249132800, 3249133055 }, { 3249134592, 3249135615 }, { 3249136128, 3249137151 }, { 3249138176, 3249138687 }, { 3249141760, 3249142271 }, { 3249556480, 3249558527 }, { 3249560576, 3249561599 }, { 3249574144, 3249574399 }, { 3249576448, 3249577727 }, { 3249585664, 3249585919 }, { 3249698304, 3249698559 }, { 3249698816, 3249699839 }, { 3249701632, 3249701887 }, { 3249702656, 3249702911 }, { 3249708544, 3249709055 }, { 3249711360, 3249711871 }, { 3249712640, 3249712895 }, { 3249723136, 3249723391 }, { 3249822976, 3249823231 }, { 3250201088, 3250201343 }, { 3250276608, 3250276863 }, { 3250278400, 3250279423 }, { 3250282496, 3250283007 }, { 3250284544, 3250284799 }, { 3250285056, 3250285567 }, { 3250294784, 3250295807 }, { 3250297856, 3250298879 }, { 3250301952, 3250302975 }, { 3250307072, 3250308095 }, { 3250328576, 3250329343 }, { 3250374656, 3250374911 }, { 3250387712, 3250388223 }, { 3250388480, 3250388735 }, { 3250406400, 3250406911 }, { 3250411520, 3250411775 }, { 3250419712, 3250420223 }, { 3250424320, 3250424575 }, { 3250426112, 3250426367 }, { 3250585856, 3250586111 }, { 3250589440, 3250589695 }, { 3250618368, 3250626559 }, { 3250698752, 3250699263 }, { 3250741248, 3250742783 }, { 3250743552, 3250743807 }, { 3250755840, 3250756351 }, { 3251112448, 3251112703 }, { 3251114496, 3251114751 }, { 3251115264, 3251115775 }, { 3251118592, 3251119103 }, { 3251123712, 3251124223 }, { 3251128320, 3251129343 }, { 3251132416, 3251132927 }, { 3251133952, 3251134463 }, { 3251142912, 3251143167 }, { 3251151104, 3251151359 }, { 3251152896, 3251153151 }, { 3251156736, 3251156991 }, { 3251158272, 3251158527 }, { 3251160832, 3251161087 }, { 3251163904, 3251164159 }, { 3251171072, 3251171327 }, { 3251173888, 3251174143 }, { 3251177472, 3251178239 }, { 3251183104, 3251183615 }, { 3251197952, 3251198975 }, { 3251203840, 3251204095 }, { 3251205632, 3251206143 }, { 3251207680, 3251207935 }, { 3251214336, 3251214591 }, { 3251233792, 3251234815 }, { 3251316736, 3251317759 }, { 3251321856, 3251322879 }, { 3251332096, 3251333119 }, { 3251333376, 3251333631 }, { 3251335168, 3251335679 }, { 3251338240, 3251338751 }, { 3252324352, 3252326399 }, { 3252335616, 3252336639 }, { 3252337664, 3252338175 }, { 3252338432, 3252338687 }, { 3252381696, 3252381951 }, { 3252385024, 3252385279 }, { 3252387072, 3252387327 }, { 3252387584, 3252387839 }, { 3252461568, 3252462079 }, { 3252537344, 3252538367 }, { 3252541184, 3252541439 }, { 3252563968, 3252564479 }, { 3252564992, 3252565759 }, { 3252566528, 3252566783 }, { 3252567552, 3252567807 }, { 3252579584, 3252579839 }, { 3252600576, 3252600831 }, { 3252615936, 3252616191 }, { 3252634624, 3252635135 }, { 3252643584, 3252643839 }, { 3252644864, 3252645119 }, { 3252904448, 3252904703 }, { 3252913664, 3252913919 }, { 3252938752, 3252939263 }, { 3252940800, 3252941311 }, { 3252943872, 3252944383 }, { 3252957184, 3252958207 }, { 3252972544, 3252973567 }, { 3252977920, 3252979711 }, { 3252985344, 3252987903 }, { 3253002752, 3253003007 }, { 3253004032, 3253004287 }, { 3253005056, 3253005311 }, { 3253207040, 3253223679 }, { 3253223936, 3253230591 }, { 3253230848, 3253243903 }, { 3253244416, 3253265407 }, { 3253265664, 3253276415 }, { 3253276672, 3253288703 }, { 3253288960, 3253291519 }, { 3253291776, 3253293567 }, { 3253294080, 3253295103 }, { 3253296128, 3253297151 }, { 3253300224, 3253305343 }, { 3253309440, 3253313535 }, { 3253314048, 3253316351 }, { 3253316608, 3253317375 }, { 3253321728, 3253323007 }, { 3253323776, 3253324031 }, { 3253324800, 3253325823 }, { 3253326848, 3253327871 }, { 3253329920, 3253330943 }, { 3253331968, 3253332991 }, { 3253334016, 3253336063 }, { 3253337088, 3253338111 }, { 3253611520, 3253613567 }, { 3253627904, 3253628415 }, { 3253628672, 3253628927 }, { 3253629952, 3253630975 }, { 3253633024, 3253635071 }, { 3253645312, 3253646335 }, { 3253699840, 3253700095 }, { 3253719296, 3253719551 }, { 3253725440, 3253725695 }, { 3253727744, 3253728255 }, { 3253754368, 3253754623 }, { 3253772304, 3253772543 }, { 3253788672, 3253788927 }, { 3253794312, 3253794559 }, { 3253887744, 3253887999 }, { 3253889280, 3253889535 }, { 3253895168, 3253896703 }, { 3253896960, 3253897215 }, { 3253899520, 3253899775 }, { 3253900288, 3253901311 }, { 3253901568, 3253901823 }, { 3253905152, 3253905407 }, { 3253905920, 3253906431 }, { 3253906688, 3253906943 }, { 3253907456, 3253908479 }, { 3253911040, 3253911551 }, { 3253911808, 3253912063 }, { 3253913600, 3253915647 }, { 3253963264, 3253963775 }, { 3253969152, 3253969407 }, { 3253970432, 3253970687 }, { 3253971968, 3253972991 }, { 3253974528, 3253974783 }, { 3253976832, 3253977087 }, { 3254137600, 3254137855 }, { 3254161408, 3254161663 }, { 3254162944, 3254163199 }, { 3254163712, 3254163967 }, { 3254165248, 3254165503 }, { 3254166016, 3254166271 }, { 3254167296, 3254167551 }, { 3254177280, 3254177535 }, { 3254187264, 3254187519 }, { 3254208768, 3254209023 }, { 3254209792, 3254210047 }, { 3254210816, 3254211327 }, { 3254244608, 3254244863 }, { 3254245376, 3254245631 }, { 3254250496, 3254251007 }, { 3254649600, 3254649855 }, { 3254652928, 3254653439 }, { 3254702080, 3254702591 }, { 3254706176, 3254707199 }, { 3254712320, 3254712831 }, { 3254797312, 3254798335 }, { 3254808576, 3254809599 }, { 3254810624, 3254811647 }, { 3254816768, 3254817279 }, { 3254821376, 3254821631 }, { 3254833408, 3254833663 }, { 3254835968, 3254836223 }, { 3254885376, 3254885631 }, { 3254886656, 3254886911 }, { 3254888448, 3254888703 }, { 3254888960, 3254889471 }, { 3254896128, 3254896383 }, { 3254897152, 3254897407 }, { 3254899968, 3254900479 }, { 3254904832, 3254907903 }, { 3254908928, 3254909951 }, { 3255054336, 3255055359 }, { 3255079936, 3255080959 }, { 3255084032, 3255085055 }, { 3255109632, 3255110655 }, { 3255122944, 3255123455 }, { 3255127552, 3255128063 }, { 3255131648, 3255131903 }, { 3255223296, 3255224319 }, { 3255228416, 3255230463 }, { 3255316224, 3255316479 }, { 3255318272, 3255318527 }, { 3255322112, 3255323135 }, { 3255325696, 3255326207 }, { 3255336960, 3255337983 }, { 3255339008, 3255340031 }, { 3255343104, 3255344127 }, { 3255345152, 3255353343 }, { 3255361536, 3255362047 }, { 3255362560, 3255364607 }, { 3255367168, 3255367679 }, { 3255370240, 3255370751 }, { 3255376384, 3255376895 }, { 3255379456, 3255379967 }, { 3255387392, 3255387647 }, { 3255413504, 3255413759 }, { 3255427072, 3255431167 }, { 3255507968, 3255508479 }, { 3255564032, 3255564287 }, { 3255579136, 3255582719 }, { 3255590912, 3255599103 }, { 3255777280, 3255778303 }, { 3255792640, 3255793663 }, { 3255795200, 3255795711 }, { 3255800576, 3255800831 }, { 3256396800, 3256397311 }, { 3256401408, 3256401919 }, { 3256414208, 3256414719 }, { 3256488192, 3256488447 }, { 3256490240, 3256490495 }, { 3256490752, 3256491007 }, { 3256491264, 3256491519 }, { 3256501504, 3256501759 }, { 3256513536, 3256513791 }, { 3256518144, 3256519423 }, { 3256519936, 3256520191 }, { 3256533248, 3256533503 }, { 3256536064, 3256536319 }, { 3256536832, 3256537087 }, { 3256537344, 3256537855 }, { 3256539136, 3256539391 }, { 3256540416, 3256540671 }, { 3256541952, 3256542719 }, { 3256543488, 3256543743 }, { 3256620032, 3256621055 }, { 3256622080, 3256623103 }, { 3256624128, 3256625151 }, { 3256629248, 3256630527 }, { 3256631040, 3256631295 }, { 3256633344, 3256634367 }, { 3256637440, 3256639487 }, { 3256653824, 3256654847 }, { 3256655872, 3256656895 }, { 3256662016, 3256663039 }, { 3256664576, 3256665087 }, { 3256667648, 3256671231 }, { 3256672256, 3256673279 }, { 3256675328, 3256677375 }, { 3256794624, 3256794879 }, { 3256814592, 3256815103 }, { 3256828416, 3256828927 }, { 3256845312, 3256846335 }, { 3256850944, 3256852479 }, { 3256855552, 3256855807 }, { 3256870912, 3256871167 }, { 3256875520, 3256876031 }, { 3256899072, 3256899583 }, { 3256903680, 3256903935 }, { 3256908800, 3256909567 }, { 3256916992, 3256918015 }, { 3256933888, 3256934399 }, { 3256935680, 3256936447 }, { 3256937472, 3256939263 }, { 3256940544, 3256941055 }, { 3256941312, 3256942591 }, { 3256944896, 3256945151 }, { 3256946432, 3256946687 }, { 3256947712, 3256948735 }, { 3256951296, 3256951807 }, { 3256954880, 3256955391 }, { 3256962816, 3256963071 }, { 3256963328, 3256963839 }, { 3256964096, 3256965119 }, { 3256966144, 3256967167 }, { 3256967424, 3256967679 }, { 3256970752, 3256971007 }, { 3257032704, 3257033727 }, { 3257068544, 3257069567 }, { 3257070592, 3257070847 }, { 3257071616, 3257072639 }, { 3257084928, 3257086975 }, { 3257102336, 3257103103 }, { 3257143296, 3257143807 }, { 3257177088, 3257178111 }, { 3257180416, 3257180671 }, { 3257184256, 3257184511 }, { 3257189376, 3257190399 }, { 3257192448, 3257192959 }, { 3257204992, 3257205247 }, { 3257269760, 3257270015 }, { 3257270272, 3257271295 }, { 3257272320, 3257273343 }, { 3257361152, 3257361407 }, { 3257361664, 3257361919 }, { 3257463040, 3257463295 }, { 3257480192, 3257481215 }, { 3257496320, 3257496575 }, { 3257950208, 3257951231 }, { 3257964544, 3257965567 }, { 3257981440, 3257981695 }, { 3258003968, 3258004479 }, { 3258021888, 3258022911 }, { 3258023680, 3258023935 }, { 3258058240, 3258058495 }, { 3258059264, 3258059519 }, { 3258059776, 3258060799 }, { 3258062848, 3258063103 }, { 3258075392, 3258075647 }, { 3258078976, 3258079231 }, { 3258083072, 3258083583 }, { 3258086400, 3258086655 }, { 3258087424, 3258087679 }, { 3258089216, 3258090495 }, { 3258092288, 3258092543 }, { 3258092800, 3258093567 }, { 3258094592, 3258095359 }, { 3258095616, 3258095871 }, { 3258100224, 3258100735 }, { 3258102784, 3258103039 }, { 3258121984, 3258122239 }, { 3258271488, 3258271743 }, { 3258301440, 3258302463 }, { 3258321920, 3258322943 }, { 3258335232, 3258336255 }, { 3258352640, 3258353663 }, { 3258356736, 3258358783 }, { 3258363904, 3258364927 }, { 3258411264, 3258411519 }, { 3258420224, 3258421247 }, { 3258425600, 3258425855 }, { 3258426112, 3258427647 }, { 3258428160, 3258428415 }, { 3258444288, 3258445823 }, { 3258446848, 3258447359 }, { 3258496000, 3258496255 }, { 3258588928, 3258589951 }, { 3258590208, 3258593279 }, { 3258595328, 3258597375 }, { 3258597888, 3258599423 }, { 3258600960, 3258601471 }, { 3258601984, 3258602495 }, { 3258603264, 3258613759 }, { 3258620416, 3258620927 }, { 3258621952, 3258630143 }, { 3258637824, 3258638335 }, { 3258642688, 3258642943 }, { 3258643968, 3258644223 }, { 3258647808, 3258648063 }, { 3258693632, 3258693887 }, { 3258694144, 3258694399 }, { 3258745856, 3258746879 }, { 3258772480, 3258773503 }, { 3258774016, 3258774271 }, { 3258774528, 3258776063 }, { 3258777600, 3258778623 }, { 3258779648, 3258780159 }, { 3258783744, 3258784255 }, { 3258786304, 3258786815 }, { 3258791424, 3258791679 }, { 3258792960, 3258793983 }, { 3258794752, 3258795007 }, { 3258797312, 3258797567 }, { 3258808320, 3258808831 }, { 3258836992, 3258837247 }, { 3258837504, 3258838015 }, { 3258843136, 3258843391 }, { 3258870784, 3258871807 }, { 3258944512, 3258945535 }, { 3258948608, 3258949631 }, { 3259170816, 3259236351 }, { 3259343872, 3259344127 }, { 3259366656, 3259366911 }, { 3259764480, 3259764735 }, { 3259765248, 3259765503 }, { 3259767808, 3259768063 }, { 3259769856, 3259770367 }, { 3259772416, 3259772927 }, { 3259816960, 3259817471 }, { 3259821056, 3259821567 }, { 3259958272, 3259959295 }, { 3259965440, 3259966463 }, { 3259968512, 3259969535 }, { 3260021248, 3260021759 }, { 3260284928, 3260288767 }, { 3260289024, 3260303935 }, { 3260304128, 3260322047 }, { 3260322304, 3260356351 }, { 3260356608, 3260370431 }, { 3260370944, 3260413951 }, { 3260414976, 3260415999 }, { 3260481536, 3260485119 }, { 3260485376, 3260486655 }, { 3260487168, 3260487423 }, { 3260488704, 3260489215 }, { 3260490752, 3260492031 }, { 3260493056, 3260494591 }, { 3260495104, 3260495359 }, { 3260495872, 3260496383 }, { 3260496896, 3260497151 }, { 3260497408, 3260497663 }, { 3260497920, 3260499967 }, { 3260500992, 3260501503 }, { 3260501760, 3260503039 }, { 3260504064, 3260506367 }, { 3260506624, 3260508415 }, { 3260508672, 3260509439 }, { 3260509696, 3260510719 }, { 3260516352, 3260516863 }, { 3260518400, 3260519935 }, { 3260520448, 3260526591 }, { 3260527360, 3260527615 }, { 3260528640, 3260529407 }, { 3260529664, 3260530687 }, { 3260531712, 3260532479 }, { 3260532736, 3260532991 }, { 3260533248, 3260533759 }, { 3260534016, 3260534527 }, { 3260535296, 3260535551 }, { 3260536064, 3260536831 }, { 3260537088, 3260537599 }, { 3260537856, 3260538367 }, { 3260538880, 3260539135 }, { 3260539392, 3260539647 }, { 3260540928, 3260544255 }, { 3260544768, 3260546047 }, { 3260546304, 3260547071 }, { 3260549888, 3260550143 }, { 3260550656, 3260551167 }, { 3260582400, 3260583423 }, { 3260597760, 3260598783 }, { 3260599296, 3260599807 }, { 3260600320, 3260601343 }, { 3260874752, 3260875775 }, { 3260880896, 3260882943 }, { 3260889344, 3260889599 }, { 3260889856, 3260890111 }, { 3260900096, 3260900351 }, { 3261274880, 3261275135 }, { 3261283328, 3261284351 }, { 3261297664, 3261297919 }, { 3261631232, 3261631743 }, { 3261632000, 3261632511 }, { 3261652992, 3261653503 }, { 3261653760, 3261654783 }, { 3261655040, 3261655551 }, { 3261656320, 3261656831 }, { 3261694464, 3261694975 }, { 3261699072, 3261699327 }, { 3261701120, 3261701631 }, { 3261710336, 3261718527 }, { 3261776384, 3261777407 }, { 3261796608, 3261796863 }, { 3261797632, 3261797887 }, { 3261798144, 3261798399 }, { 3261812736, 3261812991 }, { 3261821952, 3261822207 }, { 3261824000, 3261824255 }, { 3261990912, 3261991935 }, { 3261992448, 3261992703 }, { 3261993472, 3261993727 }, { 3262002176, 3262002687 }, { 3262005760, 3262006015 }, { 3262009344, 3262010367 }, { 3262027776, 3262028287 }, { 3262040576, 3262040831 }, { 3262045952, 3262046207 }, { 3262053120, 3262053375 }, { 3262053632, 3262053887 }, { 3262115072, 3262115327 }, { 3262212096, 3262213119 }, { 3262221056, 3262221567 }, { 3262223872, 3262224639 }, { 3262238976, 3262239231 }, { 3262244864, 3262246399 }, { 3262248192, 3262248447 }, { 3262283776, 3262284799 }, { 3262417920, 3262418431 }, { 3262423552, 3262424063 }, { 3262425344, 3262425599 }, { 3262426112, 3262426623 }, { 3262430720, 3262431231 }, { 3262436864, 3262437887 }, { 3262464000, 3262472191 }, { 3262511616, 3262512127 }, { 3262650368, 3262650623 }, { 3262670848, 3262671359 }, { 3262673920, 3262674175 }, { 3262918656, 3262919679 }, { 3262966528, 3262967039 }, { 3263032320, 3263033343 }, { 3263036928, 3263037439 }, { 3263078400, 3263079423 }, { 3263080448, 3263081471 }, { 3263089408, 3263089663 }, { 3263131648, 3263132671 }, { 3263513856, 3263514111 }, { 3263627520, 3263628031 }, { 3263628288, 3263631871 }, { 3263632384, 3263632895 }, { 3263633664, 3263633919 }, { 3263635456, 3263635711 }, { 3263635968, 3263639039 }, { 3263640576, 3263641599 }, { 3263642624, 3263646719 }, { 3263651840, 3263653119 }, { 3263653632, 3263653887 }, { 3263654912, 3263656959 }, { 3263657984, 3263659007 }, { 3263661824, 3263666175 }, { 3263676416, 3263677439 }, { 3263680512, 3263690751 }, { 3263858688, 3263858943 }, { 3263875584, 3263876095 }, { 3263886592, 3263886847 }, { 3264013312, 3264013567 }, { 3264186880, 3264187391 }, { 3264189440, 3264190463 }, { 3264323072, 3264323327 }, { 3264325632, 3264326655 }, { 3264377088, 3264377343 }, { 3264378624, 3264378879 }, { 3264399360, 3264400383 }, { 3264409600, 3264410623 }, { 3264420864, 3264422911 }, { 3264425984, 3264427007 }, { 3264432640, 3264433151 }, { 3264433664, 3264434175 }, { 3264435200, 3264436223 }, { 3264436480, 3264437247 }, { 3264440832, 3264441343 }, { 3264441856, 3264442367 }, { 3264442880, 3264443135 }, { 3264476672, 3264477183 }, { 3264477440, 3264477695 }, { 3264561152, 3264563199 }, { 3264567808, 3264568063 }, { 3264569088, 3264569343 }, { 3264602112, 3264603135 }, { 3264604672, 3264605183 }, { 3264606720, 3264606975 }, { 3264629504, 3264629759 }, { 3264632832, 3264633855 }, { 3264643072, 3264651263 }, { 3264652288, 3264652799 }, { 3264655872, 3264656383 }, { 3264662016, 3264662527 }, { 3264665088, 3264665599 }, { 3264667136, 3264667647 }, { 3264670208, 3264670719 }, { 3264675328, 3264675839 }, { 3264750080, 3264750591 }, { 3264757248, 3264757759 }, { 3264835584, 3264835839 }, { 3264847488, 3264847615 }, { 3264888832, 3264897023 }, { 3265003520, 3265004031 }, { 3265010176, 3265010431 }, { 3265010944, 3265011711 }, { 3265025024, 3265026047 }, { 3265027072, 3265027839 }, { 3265028096, 3265028607 }, { 3265029120, 3265031167 }, { 3265033216, 3265035775 }, { 3265036032, 3265036287 }, { 3265046016, 3265046527 }, { 3265054720, 3265055231 }, { 3265055744, 3265056255 }, { 3265593344, 3265594367 }, { 3265597952, 3265599999 }, { 3265601024, 3265601535 }, { 3265604864, 3265605119 }, { 3265606144, 3265606399 }, { 3265606912, 3265607167 }, { 3265608960, 3265609727 }, { 3265869824, 3265870847 }, { 3265876992, 3265877503 }, { 3265896448, 3265897471 }, { 3265904640, 3265904895 }, { 3265918720, 3265918975 }, { 3265919488, 3265919743 }, { 3265920768, 3265921023 }, { 3266338816, 3266339071 }, { 3266339840, 3266340095 }, { 3266343424, 3266343679 }, { 3266344448, 3266344703 }, { 3266382848, 3266383871 }, { 3266384896, 3266385919 }, { 3266629120, 3266629631 }, { 3266799616, 3266799871 }, { 3266800128, 3266800639 }, { 3266969600, 3266981215 }, { 3266981376, 3267035135 }, { 3267060736, 3267061759 }, { 3267066624, 3267066879 }, { 3267073024, 3267074047 }, { 3267085312, 3267086335 }, { 3267087360, 3267088383 }, { 3267231744, 3267254783 }, { 3267255296, 3267260415 }, { 3267260672, 3267275263 }, { 3267275776, 3267277311 }, { 3267277824, 3267280383 }, { 3267280640, 3267297279 }, { 3267626752, 3267627007 }, { 3267649024, 3267649279 }, { 3268742144, 3268742399 }, { 3268744448, 3268744703 }, { 3268745472, 3268745727 }, { 3268763648, 3268764159 }, { 3268765184, 3268765695 }, { 3268768768, 3268769279 }, { 3268770304, 3268770815 }, { 3268932352, 3268932607 }, { 3269591040, 3269622015 }, { 3269622272, 3269627391 }, { 3269627648, 3269631999 }, { 3269632256, 3269638399 }, { 3269638656, 3269656575 }, { 3270640640, 3270642175 }, { 3270647296, 3270647807 }, { 3270654720, 3270654975 }, { 3270670336, 3270672383 }, { 3270922240, 3270923263 }, { 3270925824, 3270926335 }, { 3270930432, 3270931455 }, { 3270970880, 3270971903 }, { 3270972416, 3270973951 }, { 3270975744, 3270975999 }, { 3270977536, 3270977791 }, { 3270980352, 3270980607 }, { 3270980864, 3270981631 }, { 3271000064, 3271008255 }, { 3271010304, 3271010815 }, { 3271014400, 3271014911 }, { 3271015936, 3271016447 }, { 3271280352, 3271280383 }, { 3271704576, 3271711743 }, { 3271712256, 3271712767 }, { 3271716864, 3271717119 }, { 3271737344, 3271738367 }, { 3271738880, 3271739391 }, { 3271740416, 3271741439 }, { 3271741952, 3271742463 }, { 3271742976, 3271743999 }, { 3271747584, 3271748095 }, { 3271749120, 3271750143 }, { 3271789568, 3271790591 }, { 3271799808, 3271800831 }, { 3271809024, 3271810047 }, { 3271815168, 3271816703 }, { 3271816960, 3271817215 }, { 3271818240, 3271819263 }, { 3271917568, 3271925759 }, { 3271926272, 3271926527 }, { 3271930368, 3271930623 }, { 3272056832, 3272065023 }, { 3272090112, 3272091647 }, { 3272092672, 3272093183 }, { 3272095744, 3272096255 }, { 3272146944, 3272212479 }, { 3272218624, 3272218879 }, { 3272263168, 3272263423 }, { 3272264960, 3272265215 }, { 3272267264, 3272267519 }, { 3272359936, 3272368127 }, { 3272421888, 3272422143 }, { 3272477696, 3272477951 }, { 3272482816, 3272491007 }, { 3272499200, 3272499711 }, { 3272500224, 3272500735 }, { 3272501760, 3272502783 }, { 3272503808, 3272504319 }, { 3272504832, 3272505343 }, { 3272506112, 3272506367 }, { 3272613888, 3272622079 }, { 3272629248, 3272629759 }, { 3272630016, 3272638463 }, { 3272739840, 3272742911 }, { 3272743424, 3272743935 }, { 3272744960, 3272753151 }, { 3272802304, 3272803327 }, { 3272803840, 3272804095 }, { 3272804352, 3272829183 }, { 3272829440, 3272855807 }, { 3272856064, 3272856831 }, { 3272857088, 3272867839 }, { 3272875008, 3272876031 }, { 3272893952, 3272894463 }, { 3272898048, 3272898559 }, { 3272900608, 3272900863 }, { 3272902400, 3272902655 }, { 3272902912, 3272903167 }, { 3272903680, 3272903935 }, { 3272917504, 3272918527 }, { 3273025536, 3273026559 }, { 3273030400, 3273030655 }, { 3273036800, 3273037311 }, { 3273037824, 3273038335 }, { 3273146368, 3273148415 }, { 3273188352, 3273188863 }, { 3273195008, 3273195519 }, { 3273268736, 3273269247 }, { 3273281536, 3273282559 }, { 3273302016, 3273310207 }, { 3273395712, 3273396223 }, { 3273400320, 3273408511 }, { 3273785344, 3273792511 }, { 3273793024, 3273798288 }, { 3273798400, 3273801727 }, { 3273834496, 3273835519 }, { 3273842688, 3273850879 }, { 3273868288, 3273869311 }, { 3273880576, 3273881087 }, { 3274053376, 3274053631 }, { 3274055680, 3274063871 }, { 3274165760, 3274166271 }, { 3274171392, 3274171903 }, { 3274326016, 3274334719 }, { 3274339840, 3274340351 }, { 3274340864, 3274341375 }, { 3274347008, 3274347519 }, { 3274349056, 3274350079 }, { 3274350592, 3274358783 }, { 3274371840, 3274372095 }, { 3274383360, 3274384383 }, { 3274392576, 3274393087 }, { 3274398208, 3274399743 }, { 3274409472, 3274409983 }, { 3274411520, 3274411775 }, { 3274412032, 3274412287 }, { 3274596352, 3274604543 }, { 3274612736, 3274620927 }, { 3274686464, 3274686719 }, { 3274687488, 3274687743 }, { 3274689536, 3274689791 }, { 3274701312, 3274701567 }, { 3274811392, 3274812415 }, { 3274815488, 3274816511 }, { 3274817536, 3274821631 }, { 3274928512, 3274928639 }, { 3275096064, 3275104255 }, { 3275106304, 3275107327 }, { 3275137024, 3275137535 }, { 3275138560, 3275139071 }, { 3275141120, 3275141631 }, { 3275145216, 3275153407 }, { 3275358208, 3275366911 }, { 3275367168, 3275367935 }, { 3275368448, 3275374591 }, { 3275533056, 3275533311 }, { 3275545600, 3275546623 }, { 3275549696, 3275549951 }, { 3275551744, 3275552767 }, { 3275620352, 3275622399 }, { 3275629056, 3275629311 }, { 3275630080, 3275630591 }, { 3275632640, 3275633151 }, { 3275633664, 3275634687 }, { 3275635200, 3275636735 }, { 3275638272, 3275638783 }, { 3275640320, 3275640831 }, { 3275643904, 3275644415 }, { 3275777280, 3275777535 }, { 3275777792, 3275778047 }, { 3275778304, 3275778559 }, { 3275779840, 3275780095 }, { 3275780608, 3275780863 }, { 3275781376, 3275781631 }, { 3275783680, 3275783935 }, { 3275787264, 3275787775 }, { 3275791360, 3275791871 }, { 3275800576, 3275808767 }, { 3275899648, 3275899903 }, { 3275900672, 3275901183 }, { 3275902208, 3275902719 }, { 3275904000, 3275904255 }, { 3275904768, 3275905023 }, { 3275905280, 3275905535 }, { 3275907072, 3275907327 }, { 3275910144, 3275910399 }, { 3275911680, 3275911935 }, { 3275912448, 3275912703 }, { 3275914752, 3275915007 }, { 3275917824, 3275918335 }, { 3276046336, 3276052223 }, { 3276052480, 3276056007 }, { 3276056056, 3276061391 }, { 3276061440, 3276062719 }, { 3276075008, 3276075519 }, { 3276076288, 3276076543 }, { 3276078080, 3276078591 }, { 3276095488, 3276096511 }, { 3276099328, 3276099583 }, { 3276113920, 3276114943 }, { 3276116992, 3276117247 }, { 3276117504, 3276118015 }, { 3276119040, 3276120063 }, { 3276122112, 3276123135 }, { 3276131328, 3276132351 }, { 3276134400, 3276135423 }, { 3276139520, 3276140543 }, { 3276193792, 3276201983 }, { 3276311552, 3276312575 }, { 3276333056, 3276341247 }, { 3276422656, 3276423167 }, { 3276425728, 3276425983 }, { 3276427776, 3276428031 }, { 3276428288, 3276428543 }, { 3276431104, 3276431359 }, { 3276480512, 3276480767 }, { 3276481024, 3276481535 }, { 3276684288, 3276684799 }, { 3276687360, 3276687871 }, { 3276693760, 3276694015 }, { 3276698112, 3276699135 }, { 3276701184, 3276701695 }, { 3276742656, 3276742911 }, { 3276814336, 3276815359 }, { 3276834816, 3276835071 }, { 3276835328, 3276835839 }, { 3276836864, 3276837887 }, { 3276857344, 3276857599 }, { 3276858368, 3276858623 }, { 3276860928, 3276861183 }, { 3276965376, 3276966399 }, { 3276966912, 3276968447 }, { 3276970496, 3276971519 }, { 3277180416, 3277180671 }, { 3277182208, 3277182463 }, { 3277185280, 3277185535 }, { 3277186816, 3277187071 }, { 3277187584, 3277188351 }, { 3277188608, 3277188863 }, { 3277324288, 3277324799 }, { 3277327872, 3277328895 }, { 3277329920, 3277330431 }, { 3277334528, 3277335039 }, { 3277337600, 3277338111 }, { 3277339136, 3277339647 }, { 3277340160, 3277340671 }, { 3277341696, 3277342207 }, { 3277347840, 3277348351 }, { 3277350400, 3277350911 }, { 3277355008, 3277355519 }, { 3277356544, 3277357055 }, { 3277358080, 3277359103 }, { 3277363712, 3277364223 }, { 3277367808, 3277368319 }, { 3277369856, 3277370367 }, { 3277371392, 3277371903 }, { 3277373440, 3277373951 }, { 3277374464, 3277374719 }, { 3277374976, 3277375999 }, { 3277377536, 3277378047 }, { 3277380608, 3277380863 }, { 3277381632, 3277382143 }, { 3277385728, 3277386239 }, { 3277387776, 3277388287 }, { 3277388800, 3277389311 }, { 3277486592, 3277487103 }, { 3277488128, 3277504511 }, { 3277553664, 3277586431 }, { 3277684736, 3277685247 }, { 3277688832, 3277689343 }, { 3277689856, 3277690879 }, { 3277692928, 3277693439 }, { 3277693952, 3277694463 }, { 3277696256, 3277696511 }, { 3277698048, 3277698559 }, { 3277699584, 3277700607 }, { 3277704704, 3277705215 }, { 3277710336, 3277710847 }, { 3277713408, 3277713919 }, { 3277714944, 3277715967 }, { 3277774848, 3277783039 }, { 3277837312, 3277839103 }, { 3277847552, 3277848063 }, { 3277864960, 3277873151 }, { 3277883392, 3277883647 }, { 3277884672, 3277884927 }, { 3277885440, 3277885695 }, { 3277885952, 3277886719 }, { 3277886976, 3277887231 }, { 3277888000, 3277888511 }, { 3277888768, 3277889023 }, { 3277889280, 3277897727 }, { 3277987840, 3278004223 }, { 3278020608, 3278028799 }, { 3278767616, 3278768127 }, { 3278774272, 3278774783 }, { 3278777856, 3278778367 }, { 3278779392, 3278779903 }, { 3278781952, 3278782463 }, { 3278921728, 3278929919 }, { 3278954496, 3278962687 }, { 3279028736, 3279029247 }, { 3279029760, 3279030271 }, { 3279033344, 3279033855 }, { 3279054848, 3279055359 }, { 3279056896, 3279057151 }, { 3279058176, 3279058943 }, { 3279059456, 3279060479 }, { 3279609856, 3279618047 }, { 3279958016, 3279971327 }, { 3279976448, 3279978495 }, { 3279979776, 3279980031 }, { 3279980800, 3279981055 }, { 3279984640, 3279985151 }, { 3279985920, 3279986687 }, { 3280008192, 3280009215 }, { 3280130304, 3280130559 }, { 3280131584, 3280131839 }, { 3280132096, 3280132351 }, { 3280142336, 3280207871 }, { 3280273664, 3280276479 }, { 3280279296, 3280281855 }, { 3280282112, 3280282367 }, { 3280284672, 3280289791 }, { 3280290816, 3280293119 }, { 3280294400, 3280296959 }, { 3280297472, 3280297727 }, { 3280310272, 3280311295 }, { 3280323072, 3280325119 }, { 3280328704, 3280329727 }, { 3280330752, 3280338943 }, { 3280456704, 3280457727 }, { 3280458752, 3280459775 }, { 3280463872, 3280466943 }, { 3280579328, 3280579583 }, { 3280580864, 3280581119 }, { 3280583424, 3280583679 }, { 3280586752, 3280587263 }, { 3280588288, 3280588799 }, { 3280653824, 3280654079 }, { 3280654848, 3280655103 }, { 3280660480, 3280662527 }, { 3280769024, 3280770047 }, { 3280778240, 3280779263 }, { 3280784384, 3280785407 }, { 3280928768, 3280929827 }, { 3280929872, 3280930303 }, { 3280930560, 3280931071 }, { 3280931504, 3280931583 }, { 3280932864, 3280933631 }, { 3280934400, 3280934911 }, { 3280935936, 3280936191 }, { 3280936320, 3280936959 }, { 3280937984, 3280939007 }, { 3280942352, 3280942591 }, { 3280944392, 3280944639 }, { 3280947472, 3280947711 }, { 3280949952, 3280951039 }, { 3280951296, 3280951807 }, { 3280952324, 3280952615 }, { 3280952832, 3280953343 }, { 3280953856, 3280954367 }, { 3280954824, 3280954879 }, { 3280955152, 3280955407 }, { 3280955792, 3280955903 }, { 3280956144, 3280956415 }, { 3280956928, 3280957439 }, { 3280957504, 3280958463 }, { 3280958808, 3280958975 }, { 3280959280, 3280959487 }, { 3280959776, 3280960511 }, { 3280994560, 3280994815 }, { 3280995840, 3280996095 }, { 3281001728, 3281001983 }, { 3281043456, 3281059839 }, { 3281141760, 3281149951 }, { 3281344768, 3281345023 }, { 3281346560, 3281346815 }, { 3281348608, 3281349119 }, { 3281349888, 3281350655 }, { 3281372160, 3281372671 }, { 3281373184, 3281375231 }, { 3281453056, 3281470975 }, { 3281471232, 3281500491 }, { 3281500672, 3281518591 }, { 3281968128, 3281969663 }, { 3281970176, 3281970687 }, { 3281971200, 3281971711 }, { 3281975808, 3281976319 }, { 3281976832, 3281977343 }, { 3282084864, 3282085375 }, { 3282105344, 3282106367 }, { 3282108416, 3282119423 }, { 3282119680, 3282173951 }, { 3282175488, 3282177023 }, { 3282179584, 3282180095 }, { 3282182144, 3282190335 }, { 3282193920, 3282194431 }, { 3282416384, 3282416639 }, { 3282477056, 3282485247 }, { 3282706432, 3282714623 }, { 3282742784, 3282743039 }, { 3282747392, 3282763775 }, { 3283183616, 3283184639 }, { 3283187712, 3283188735 }, { 3283206656, 3283207167 }, { 3283209216, 3283209727 }, { 3283214848, 3283215359 }, { 3283223040, 3283223551 }, { 3283225600, 3283226111 }, { 3283226624, 3283227135 }, { 3283227648, 3283229183 }, { 3283250176, 3283250687 }, { 3283271680, 3283279871 }, { 3283485440, 3283485695 }, { 3283489792, 3283490047 }, { 3283491840, 3283492095 }, { 3283492864, 3283493119 }, { 3283517440, 3283525631 }, { 3283558400, 3283558655 }, { 3283635712, 3283636223 }, { 3283947520, 3283948543 }, { 3283954944, 3283955711 }, { 3283969024, 3283970047 }, { 3283971072, 3283972095 }, { 3283974144, 3283974399 }, { 3283974656, 3283975167 }, { 3283977728, 3283978751 }, { 3283989504, 3283990015 }, { 3283999232, 3283999743 }, { 3284000256, 3284000767 }, { 3284004352, 3284004863 }, { 3284012032, 3284012799 }, { 3284033536, 3284041727 }, { 3284042752, 3284043007 }, { 3284075520, 3284076031 }, { 3284077056, 3284077567 }, { 3284079104, 3284079615 }, { 3284082688, 3284083199 }, { 3284083712, 3284084223 }, { 3284087296, 3284087807 }, { 3284090880, 3284091135 }, { 3284093952, 3284094975 }, { 3284095488, 3284095999 }, { 3284097024, 3284097535 }, { 3284107776, 3284108287 }, { 3284109312, 3284109823 }, { 3284111872, 3284112383 }, { 3284114944, 3284115455 }, { 3284116992, 3284117503 }, { 3284119040, 3284119551 }, { 3284121088, 3284121599 }, { 3284123136, 3284124159 }, { 3284127744, 3284128255 }, { 3284130816, 3284131327 }, { 3284132608, 3284132863 }, { 3284134912, 3284135935 }, { 3284136448, 3284136959 }, { 3284137472, 3284137983 }, { 3284138496, 3284139007 }, { 3284716288, 3284716543 }, { 3284717824, 3284718079 }, { 3284718848, 3284719103 }, { 3284719616, 3284719871 }, { 3284722176, 3284722687 }, { 3284724736, 3284725247 }, { 3284727808, 3284728319 }, { 3285065728, 3285073919 }, { 3285088768, 3285089279 }, { 3285114880, 3285115903 }, { 3285118208, 3285118463 }, { 3285118976, 3285119487 }, { 3285120000, 3285120511 }, { 3285122048, 3285123071 }, { 3285188608, 3285189119 }, { 3285189632, 3285203967 }, { 3285204480, 3285218815 }, { 3285220864, 3285234175 }, { 3285234432, 3285234687 }, { 3285235200, 3285236991 }, { 3285237248, 3285280255 }, { 3285280512, 3285319679 }, { 3285320192, 3285320703 }, { 3285321728, 3285322239 }, { 3285324800, 3285325311 }, { 3285327360, 3285328383 }, { 3285352448, 3285368831 }, { 3285386240, 3285387263 }, { 3285390336, 3285393407 }, { 3285394432, 3285395455 }, { 3285395968, 3285396479 }, { 3285401600, 3285402623 }, { 3285404672, 3285406719 }, { 3285407744, 3285408767 }, { 3285410816, 3285412863 }, { 3285413888, 3285414911 }, { 3285415936, 3285419007 }, { 3285426176, 3285427199 }, { 3285434368, 3285436415 }, { 3285437440, 3285438463 }, { 3285440512, 3285442559 }, { 3285444608, 3285446655 }, { 3285447680, 3285449215 }, { 3285449472, 3285449727 }, { 3285491456, 3285491711 }, { 3285641984, 3285642239 }, { 3285746688, 3285747711 }, { 3285751808, 3285752063 }, { 3285752320, 3285752831 }, { 3285754368, 3285754879 }, { 3285755904, 3285756415 }, { 3285756928, 3285757951 }, { 3285762560, 3285763071 }, { 3285764096, 3285764607 }, { 3285767168, 3285767679 }, { 3285768192, 3285768703 }, { 3285774592, 3285774847 }, { 3285775104, 3285775615 }, { 3285876736, 3285879623 }, { 3285879808, 3285896447 }, { 3285896704, 3285909503 }, { 3286111304, 3286111487 }, { 3286138880, 3286155263 }, { 3286312448, 3286312959 }, { 3286317056, 3286317567 }, { 3286327296, 3286327551 }, { 3286330368, 3286331391 }, { 3286336256, 3286336511 }, { 3286343680, 3286344703 }, { 3286362368, 3286362623 }, { 3286417920, 3286418175 }, { 3286420224, 3286420735 }, { 3286421760, 3286422015 }, { 3286423552, 3286423807 }, { 3286425088, 3286425343 }, { 3286646784, 3286654975 }, { 3286655744, 3286655999 }, { 3286656256, 3286656511 }, { 3286658304, 3286658559 }, { 3286658816, 3286659327 }, { 3286893056, 3286893567 }, { 3286905856, 3286906111 }, { 3286906880, 3286907135 }, { 3286917120, 3286917631 }, { 3286925824, 3286926079 }, { 3286928384, 3286928639 }, { 3286929152, 3286929407 }, { 3286936064, 3286936319 }, { 3286941184, 3286941439 }, { 3286945792, 3286946815 }, { 3287173120, 3287173631 }, { 3287180288, 3287181311 }, { 3287213568, 3287213823 }, { 3287215872, 3287216127 }, { 3287217664, 3287217919 }, { 3287218688, 3287218943 }, { 3287220224, 3287233535 }, { 3287233792, 3287259375 }, { 3287259392, 3287276639 }, { 3287276800, 3287282431 }, { 3287282688, 3287285759 }, { 3287416832, 3287425023 }, { 3287437824, 3287438335 }, { 3287453184, 3287454207 }, { 3287472128, 3287472639 }, { 3287554048, 3287554559 }, { 3287632896, 3287633407 }, { 3287641600, 3287641855 }, { 3287665920, 3287666431 }, { 3287667456, 3287667711 }, { 3287668224, 3287668479 }, { 3287672832, 3287673087 }, { 3287674368, 3287674879 }, { 3287675904, 3287676159 }, { 3287677184, 3287677439 }, { 3287706112, 3287706623 }, { 3287707392, 3287707647 }, { 3287709184, 3287709695 }, { 3287710208, 3287710719 }, { 3287734784, 3287735039 }, { 3287741952, 3287742975 }, { 3287744000, 3287744511 }, { 3287826944, 3287827199 }, { 3287827712, 3287827967 }, { 3287828224, 3287828479 }, { 3287831040, 3287831295 }, { 3287834112, 3287834367 }, { 3287869440, 3287869951 }, { 3287870464, 3287870975 }, { 3287872512, 3287873023 }, { 3287873536, 3287874047 }, { 3287951872, 3287952127 }, { 3287954176, 3287954431 }, { 3287955456, 3287955711 }, { 3288163328, 3288163583 }, { 3288251392, 3288251903 }, { 3288401152, 3288401407 }, { 3289414144, 3289414655 }, { 3289441536, 3289441791 }, { 3289442048, 3289442303 }, { 3301307392, 3301308415 }, { 3301327104, 3301327359 }, { 3301363456, 3301363711 }, { 3301391616, 3301391871 }, { 3301408000, 3301408255 }, { 3301424384, 3301424639 }, { 3304075776, 3304076031 }, { 3304092160, 3304092415 }, { 3304094976, 3304095231 }, { 3304127744, 3304127999 }, { 3304227840, 3304228095 }, { 3304341760, 3304342015 }, { 3304584192, 3304585215 }, { 3322069032, 3322069247 }, { 3322069536, 3322069823 }, { 3322070016, 3322070255 }, { 3322070528, 3322070975 }, { 3322071040, 3322071295 }, { 3322071552, 3322071839 }, { 3322072096, 3322072319 }, { 3322072608, 3322072895 }, { 3322073088, 3322073343 }, { 3322073616, 3322073871 }, { 3322074112, 3322074335 }, { 3322074656, 3322074895 }, { 3322075104, 3322075455 }, { 3322075648, 3322076031 }, { 3322076160, 3322076607 }, { 3322077056, 3322077375 }, { 3322077568, 3322077631 }, { 3322078016, 3322078271 }, { 3322078464, 3322078655 }, { 3322078976, 3322079231 }, { 3322079552, 3322079679 }, { 3322080000, 3322080639 }, { 3322080768, 3322081023 }, { 3322081408, 3322081919 }, { 3322082048, 3322082431 }, { 3322082560, 3322083455 }, { 3322083584, 3322083839 }, { 3322084352, 3322084671 }, { 3322085184, 3322085375 }, { 3322773376, 3322773503 }, { 3322905360, 3322905599 }, { 3322906064, 3322906111 }, { 3322906560, 3322906623 }, { 3322906912, 3322907135 }, { 3322907392, 3322907647 }, { 3322908160, 3322908415 }, { 3322909184, 3322909439 }, { 3322909712, 3322909951 }, { 3322910336, 3322910463 }, { 3322911040, 3322911231 }, { 3322911504, 3322911679 }, { 3322912000, 3322912263 }, { 3322912520, 3322912767 }, { 3322913336, 3322913471 }, { 3322914328, 3322914559 }, { 3322914824, 3322915071 }, { 3322915864, 3322916063 }, { 3322916416, 3322916607 }, { 3322917056, 3322917119 }, { 3322917376, 3322917623 }, { 3322918080, 3322918143 }, { 3322918464, 3322918655 }, { 3322918944, 3322919231 }, { 3322919840, 3322919935 }, { 3322920464, 3322920703 }, { 3322923456, 3322923519 }, { 3322925856, 3322926079 }, { 3322929552, 3322929599 }, { 3322930560, 3322930623 }, { 3322931160, 3322931199 }, { 3322932392, 3322932479 }, { 3322932800, 3322932951 }, { 3322933312, 3322933503 }, { 3322934752, 3322934783 }, { 3322936256, 3322936319 }, { 3322936576, 3322936831 }, { 3322964752, 3322964767 }, { 3323241480, 3323241511 }, { 3323242512, 3323242751 }, { 3323243032, 3323243191 }, { 3323244384, 3323244543 }, { 3323245088, 3323245247 }, { 3323247296, 3323247359 }, { 3333383168, 3333384191 }, { 3333502984, 3333503231 }, { 3333503496, 3333503743 }, { 3333504704, 3333504767 }, { 3337892352, 3337892607 }, { 3337893120, 3337893375 }, { 3337893888, 3337894143 }, { 3337894656, 3337894911 }, { 3337895168, 3337895423 }, { 3337895680, 3337895935 }, { 3339678768, 3339678846 }, { 3342150912, 3342151423 }, { 3342974976, 3342977023 }, { 3350488576, 3350488735 }, { 3353821704, 3353821951 }, { 3353822240, 3353822463 }, { 3354693632, 3354693887 }, { 3357195264, 3357195519 }, { 3386526208, 3386526719 }, { 3389023232, 3389023743 }, { 3389227264, 3389227519 }, { 3389292544, 3389300735 }, { 3389324288, 3389325311 }, { 3389378560, 3389381631 }, { 3389392384, 3389392895 }, { 3389413120, 3389413887 }, { 3389414656, 3389414911 }, { 3389417216, 3389417471 }, { 3389418496, 3389418751 }, { 3389419008, 3389419519 }, { 3389420032, 3389420287 }, { 3389435904, 3389439999 }, { 3389521920, 3389522175 }, { 3389522432, 3389522687 }, { 3389524992, 3389525247 }, { 3389528064, 3389528319 }, { 3389541632, 3389541887 }, { 3389552640, 3389553663 }, { 3389554688, 3389562879 }, { 3389571072, 3389575167 }, { 3389595648, 3389595903 }, { 3389596160, 3389596671 }, { 3389599744, 3389600255 }, { 3389600512, 3389601535 }, { 3389602048, 3389602815 }, { 3389669376, 3389673471 }, { 3389681664, 3389685759 }, { 3389784320, 3389784831 }, { 3389788416, 3389788927 }, { 3389802496, 3389802751 }, { 3389805568, 3389806079 }, { 3389808640, 3389808895 }, { 3389811200, 3389811455 }, { 3389812480, 3389812735 }, { 3389813760, 3389814015 }, { 3389931520, 3389932031 }, { 3389932800, 3389933055 }, { 3389933824, 3389934079 }, { 3389934592, 3389934847 }, { 3389935104, 3389935615 }, { 3389937664, 3389937919 }, { 3389939968, 3389940223 }, { 3389941760, 3389942271 }, { 3389942784, 3389943295 }, { 3389943552, 3389943807 }, { 3389944320, 3389944831 }, { 3389947648, 3389947903 }, { 3389948160, 3389948415 }, { 3389949696, 3389950207 }, { 3389953280, 3389953535 }, { 3389953792, 3389954047 }, { 3389955328, 3389956095 }, { 3389958400, 3389960447 }, { 3389968384, 3389968895 }, { 3389969664, 3389969919 }, { 3389971200, 3389971711 }, { 3389972736, 3389973503 }, { 3389974272, 3389974527 }, { 3389975296, 3389976575 }, { 3389978112, 3389978367 }, { 3389979392, 3389979647 }, { 3390325248, 3390325503 }, { 3390328576, 3390328831 }, { 3390330624, 3390331647 }, { 3390332416, 3390332927 }, { 3390337536, 3390337791 }, { 3390338304, 3390338559 }, { 3390339072, 3390339327 }, { 3390340352, 3390341119 }, { 3390386176, 3390390271 }, { 3390407424, 3390407935 }, { 3390409984, 3390410495 }, { 3390411520, 3390412031 }, { 3390412288, 3390413567 }, { 3390413824, 3390414079 }, { 3390481152, 3390481407 }, { 3390502912, 3390504959 }, { 3390770176, 3390770431 }, { 3390770688, 3390770943 }, { 3390801920, 3390802431 }, { 3391414784, 3391415039 }, { 3391488000, 3391489023 }, { 3391490048, 3391492095 }, { 3391500288, 3391523583 }, { 3391523840, 3391524863 }, { 3391525376, 3391525887 }, { 3391526144, 3391526655 }, { 3391526912, 3391528191 }, { 3391528448, 3391529471 }, { 3391529984, 3391532031 }, { 3391533056, 3391533567 }, { 3391535104, 3391553535 }, { 3391620096, 3391620607 }, { 3391620864, 3391621119 }, { 3391622912, 3391623167 }, { 3391653632, 3391654143 }, { 3391654912, 3391655167 }, { 3391655680, 3391656447 }, { 3391657472, 3391657727 }, { 3391658752, 3391659263 }, { 3391659520, 3391660031 }, { 3391660544, 3391660799 }, { 3391686656, 3391687167 }, { 3391687424, 3391688191 }, { 3391717376, 3391717631 }, { 3391717888, 3391718143 }, { 3391720960, 3391721215 }, { 3391723520, 3391725567 }, { 3391733760, 3391734015 }, { 3391734784, 3391736831 }, { 3391746048, 3391750143 }, { 3391835136, 3391836159 }, { 3391852544, 3391856639 }, { 3391885312, 3391889407 }, { 3391893504, 3391894527 }, { 3391898368, 3391898623 }, { 3391900160, 3391900415 }, { 3391906048, 3391906303 }, { 3391914240, 3391914495 }, { 3391915008, 3391915519 }, { 3391918592, 3391919103 }, { 3391947264, 3391947519 }, { 3391950592, 3391950847 }, { 3392016384, 3392017151 }, { 3392017408, 3392017919 }, { 3392020480, 3392028671 }, { 3392045056, 3392045311 }, { 3392069632, 3392073727 }, { 3392098816, 3392099327 }, { 3392102400, 3392106495 }, { 3392110080, 3392110335 }, { 3392110592, 3392110847 }, { 3392111104, 3392111615 }, { 3392413952, 3392414463 }, { 3392417536, 3392417791 }, { 3392442112, 3392442367 }, { 3392506880, 3392507135 }, { 3392507648, 3392507903 }, { 3392782336, 3392786431 }, { 3392787456, 3392789503 }, { 3392794624, 3392798975 }, { 3392825344, 3392826111 }, { 3392827392, 3392828415 }, { 3392864256, 3392864767 }, { 3392918528, 3392919551 }, { 3392924672, 3392924927 }, { 3392925696, 3392925951 }, { 3392942080, 3392944127 }, { 3392954368, 3392956415 }, { 3392958464, 3392962559 }, { 3392963584, 3392970751 }, { 3393012736, 3393013759 }, { 3393014784, 3393015807 }, { 3393017856, 3393018879 }, { 3393026816, 3393027071 }, { 3393027840, 3393028095 }, { 3393089536, 3393090559 }, { 3393124352, 3393125631 }, { 3393126144, 3393126399 }, { 3393146880, 3393150975 }, { 3393167360, 3393175551 }, { 3393189888, 3393190911 }, { 3393191168, 3393191423 }, { 3393257472, 3393260031 }, { 3393282048, 3393286143 }, { 3393366016, 3393367039 }, { 3393388544, 3393389567 }, { 3393520640, 3393521663 }, { 3393523712, 3393527807 }, { 3393585152, 3393593343 }, { 3393609728, 3393613823 }, { 3393626112, 3393626623 }, { 3393627392, 3393627647 }, { 3393629184, 3393629523 }, { 3393629696, 3393629951 }, { 3393634304, 3393638399 }, { 3393658880, 3393662975 }, { 3393726464, 3393728511 }, { 3393736704, 3393740799 }, { 3393744896, 3393748991 }, { 3393814528, 3393815551 }, { 3393843200, 3393847295 }, { 3393849344, 3393851391 }, { 3393856512, 3393856767 }, { 3393858048, 3393858303 }, { 3393860608, 3393860863 }, { 3393867776, 3393871871 }, { 3393873408, 3393873663 }, { 3393873920, 3393874175 }, { 3393875968, 3393876735 }, { 3393906688, 3393907711 }, { 3393912320, 3393912831 }, { 3393966080, 3393970175 }, { 3393977344, 3393978367 }, { 3394041600, 3394041855 }, { 3394042880, 3394043903 }, { 3394064384, 3394066431 }, { 3394067456, 3394068479 }, { 3394111488, 3394113535 }, { 3394232320, 3394234367 }, { 3394238464, 3394239487 }, { 3394289664, 3394293759 }, { 3394306048, 3394307071 }, { 3394351104, 3394355199 }, { 3394501632, 3394507263 }, { 3394508288, 3394508543 }, { 3394508800, 3394510847 }, { 3394621440, 3394625535 }, { 3394697472, 3394697727 }, { 3394698240, 3394699263 }, { 3394719744, 3394723839 }, { 3394772992, 3394774015 }, { 3394832384, 3394834431 }, { 3394835712, 3394835967 }, { 3394854912, 3394855935 }, { 3394857984, 3394859007 }, { 3394860800, 3394861055 }, { 3394889728, 3394891775 }, { 3394895872, 3394896895 }, { 3394899968, 3394904063 }, { 3394905344, 3394905599 }, { 3394920448, 3394928639 }, { 3394945280, 3394945535 }, { 3394946048, 3394946303 }, { 3394948352, 3394948607 }, { 3394953216, 3394957311 }, { 3394961408, 3394962431 }, { 3394985984, 3394990079 }, { 3394994176, 3394995199 }, { 3395006464, 3395010559 }, { 3395018752, 3395027967 }, { 3395028992, 3395031039 }, { 3395039232, 3395043327 }, { 3395091456, 3395093503 }, { 3395156992, 3395158015 }, { 3395176960, 3395177215 }, { 3395178752, 3395179007 }, { 3395181568, 3395182591 }, { 3395284992, 3395287039 }, { 3395288064, 3396868319 }, { 3396868352, 3396995071 }, { 3397001216, 3397003263 }, { 3397009408, 3397017599 }, { 3397021696, 3397026047 }, { 3397026816, 3397027071 }, { 3397083136, 3397087231 }, { 3397088256, 3397090303 }, { 3397128192, 3397131263 }, { 3397217024, 3397217279 }, { 3397217536, 3397217791 }, { 3397218304, 3397222399 }, { 3397234688, 3397238783 }, { 3397320704, 3397322751 }, { 3397323776, 3397328895 }, { 3397330944, 3397337087 }, { 3397349376, 3397363711 }, { 3397369856, 3397374463 }, { 3397374976, 3397386239 }, { 3397505024, 3397505279 }, { 3397517312, 3397525503 }, { 3397527296, 3397527551 }, { 3397574656, 3397582847 }, { 3397586944, 3397588991 }, { 3397595136, 3397599231 }, { 3397636096, 3397640191 }, { 3397722112, 3397726207 }, { 3397794304, 3397794559 }, { 3397812224, 3397816319 }, { 3397832704, 3397836799 }, { 3397908224, 3397908479 }, { 3397909504, 3397910015 }, { 3397922816, 3397926911 }, { 3397963776, 3397971967 }, { 3397974016, 3397975039 }, { 3398035200, 3398035455 }, { 3398208512, 3398213631 }, { 3398279168, 3398287359 }, { 3398307840, 3398311935 }, { 3398370304, 3398371327 }, { 3398373376, 3398381567 }, { 3398383616, 3398385663 }, { 3398394880, 3398396927 }, { 3398606848, 3398610943 }, { 3398613504, 3398613759 }, { 3398614016, 3398615039 }, { 3398616064, 3398619135 }, { 3398668288, 3398672383 }, { 3398705152, 3398709247 }, { 3398713344, 3398729727 }, { 3398770688, 3398778879 }, { 3398803456, 3398811647 }, { 3398819840, 3398828031 }, { 3398832128, 3398840319 }, { 3398842368, 3398843391 }, { 3398877184, 3398881279 }, { 3398885376, 3398894591 }, { 3398902016, 3398902271 }, { 3398926336, 3398934527 }, { 3399004160, 3399008255 }, { 3399024640, 3399025663 }, { 3399026432, 3399026687 }, { 3399036928, 3399041023 }, { 3399335936, 3399344127 }, { 3399393280, 3399401471 }, { 3399414272, 3399414527 }, { 3399519232, 3399520255 }, { 3399523328, 3399524351 }, { 3399528448, 3399532543 }, { 3399631616, 3399631871 }, { 3399633664, 3399633919 }, { 3399681536, 3399681791 }, { 3399745536, 3399749631 }, { 3399770112, 3399778303 }, { 3399856128, 3399860223 }, { 3399864320, 3399868415 }, { 3399872256, 3399873023 }, { 3399873280, 3399873535 }, { 3399873792, 3399874047 }, { 3399875328, 3399876607 }, { 3399933952, 3399942143 }, { 3400028160, 3400029183 }, { 3400040448, 3400044543 }, { 3400048640, 3400056831 }, { 3400161280, 3400163327 }, { 3400171520, 3400179711 }, { 3400194048, 3400204287 }, { 3400259584, 3400261631 }, { 3400263680, 3400263935 }, { 3400264448, 3400264703 }, { 3400269824, 3400270847 }, { 3400271616, 3400271871 }, { 3400335360, 3400336383 }, { 3400336896, 3400337151 }, { 3400337408, 3400339455 }, { 3400364032, 3400365055 }, { 3400392704, 3400400895 }, { 3400417280, 3400421375 }, { 3400432640, 3400433663 }, { 3400589312, 3400597503 }, { 3400769536, 3400773631 }, { 3400790016, 3400794111 }, { 3400826880, 3400835071 }, { 3400847360, 3400849407 }, { 3400861696, 3400862719 }, { 3400866816, 3400867839 }, { 3400888320, 3400892415 }, { 3400933376, 3400937471 }, { 3400974336, 3400982527 }, { 3401383936, 3401400319 }, { 3401404416, 3401408511 }, { 3401431040, 3401433087 }, { 3401515008, 3401515263 }, { 3401532416, 3401539583 }, { 3401580544, 3402629119 }, { 3405775872, 3405776895 }, { 3405777408, 3405777663 }, { 3405779456, 3405779711 }, { 3405780992, 3405781247 }, { 3405785600, 3405786111 }, { 3405786368, 3405787135 }, { 3405795584, 3405796095 }, { 3405797888, 3405798399 }, { 3405801472, 3405803519 }, { 3405804032, 3405804543 }, { 3405806080, 3405806335 }, { 3405807616, 3405807871 }, { 3405808128, 3405809663 }, { 3405809920, 3405810175 }, { 3405811200, 3405811455 }, { 3405811712, 3405811967 }, { 3405812224, 3405812479 }, { 3405812736, 3405812991 }, { 3405813248, 3405814015 }, { 3405820160, 3405820415 }, { 3405832192, 3405832447 }, { 3405841408, 3405842431 }, { 3405844992, 3405845247 }, { 3405847040, 3405847551 }, { 3405857024, 3405857791 }, { 3405858304, 3405858815 }, { 3405863424, 3405863679 }, { 3405865216, 3405865983 }, { 3405868032, 3405868287 }, { 3405905152, 3405905663 }, { 3405922304, 3405924351 }, { 3405924608, 3405924863 }, { 3405934592, 3405936639 }, { 3405941760, 3405942015 }, { 3405944320, 3405944575 }, { 3405944832, 3405946367 }, { 3405946880, 3405948927 }, { 3405952000, 3405952511 }, { 3405956096, 3405956607 }, { 3405959424, 3405959679 }, { 3405960704, 3405961215 }, { 3405963776, 3405964287 }, { 3405964544, 3405964799 }, { 3405988864, 3405989119 }, { 3405990656, 3405990911 }, { 3405991936, 3405993983 }, { 3405996032, 3405997055 }, { 3405998336, 3405998591 }, { 3406000128, 3406002431 }, { 3406002944, 3406003199 }, { 3406006016, 3406006271 }, { 3406007040, 3406007295 }, { 3406008064, 3406008319 }, { 3406070784, 3406071551 }, { 3406075648, 3406076927 }, { 3406083072, 3406083327 }, { 3406084608, 3406084863 }, { 3406089472, 3406089727 }, { 3406090240, 3406091263 }, { 3406095104, 3406095359 }, { 3406103552, 3406104063 }, { 3406104320, 3406105087 }, { 3406105344, 3406105599 }, { 3406107904, 3406108415 }, { 3406113792, 3406114047 }, { 3406114304, 3406114815 }, { 3406115840, 3406117375 }, { 3406117888, 3406118399 }, { 3406132736, 3406132991 }, { 3406133248, 3406133503 }, { 3406146560, 3406146815 }, { 3406148608, 3406149375 }, { 3406149888, 3406150399 }, { 3406150656, 3406151423 }, { 3406152448, 3406152703 }, { 3406201600, 3406201855 }, { 3406202880, 3406203135 }, { 3406203392, 3406203903 }, { 3406204416, 3406204671 }, { 3406206464, 3406206975 }, { 3406208256, 3406208511 }, { 3406208768, 3406209023 }, { 3406225408, 3406229503 }, { 3406231552, 3406232063 }, { 3406266624, 3406266879 }, { 3406271232, 3406271487 }, { 3406272000, 3406272511 }, { 3406274048, 3406274303 }, { 3406282752, 3406283263 }, { 3406284800, 3406285055 }, { 3406299136, 3406299391 }, { 3406301184, 3406301439 }, { 3406305024, 3406305279 }, { 3406317056, 3406317311 }, { 3406320128, 3406320383 }, { 3406321152, 3406321663 }, { 3406322432, 3406322687 }, { 3406327296, 3406327807 }, { 3406328576, 3406328831 }, { 3406341632, 3406342143 }, { 3406342400, 3406342655 }, { 3406343424, 3406343679 }, { 3406346240, 3406346495 }, { 3406346752, 3406347263 }, { 3406347776, 3406348543 }, { 3406349568, 3406350335 }, { 3406351104, 3406351359 }, { 3406352640, 3406354431 }, { 3406354688, 3406354943 }, { 3406355456, 3406355711 }, { 3406372864, 3406373119 }, { 3406373888, 3406374399 }, { 3406379264, 3406379519 }, { 3406380800, 3406381055 }, { 3406381312, 3406381567 }, { 3406382592, 3406383359 }, { 3406383872, 3406384639 }, { 3406389248, 3406390783 }, { 3406392320, 3406392575 }, { 3406405120, 3406405375 }, { 3406438912, 3406439167 }, { 3406444544, 3406444799 }, { 3406449152, 3406449663 }, { 3406451712, 3406452991 }, { 3406454528, 3406454783 }, { 3406462208, 3406462463 }, { 3406513664, 3406513919 }, { 3406515200, 3406516223 }, { 3406516736, 3406516991 }, { 3406517248, 3406518271 }, { 3406521344, 3406522367 }, { 3406523648, 3406523903 }, { 3406525696, 3406525951 }, { 3406526976, 3406527231 }, { 3406528000, 3406528255 }, { 3406530560, 3406531583 }, { 3406531840, 3406532607 }, { 3406541824, 3406542847 }, { 3406548992, 3406550015 }, { 3406565376, 3406565631 }, { 3406566144, 3406566399 }, { 3406567424, 3406567679 }, { 3406575872, 3406576127 }, { 3406577920, 3406578431 }, { 3406583552, 3406583807 }, { 3406584576, 3406584831 }, { 3406586880, 3406587391 }, { 3406587648, 3406587903 }, { 3406590464, 3406590719 }, { 3406591488, 3406591743 }, { 3406594560, 3406594815 }, { 3406596352, 3406596607 }, { 3406611456, 3406612479 }, { 3406615296, 3406615551 }, { 3406617344, 3406617599 }, { 3406619136, 3406619391 }, { 3406622720, 3406623743 }, { 3406631424, 3406631679 }, { 3406632960, 3406633215 }, { 3406638080, 3406638591 }, { 3406649344, 3406649855 }, { 3406650368, 3406651391 }, { 3406671104, 3406671359 }, { 3406684928, 3406685183 }, { 3406686464, 3406686719 }, { 3406698496, 3406699519 }, { 3406700800, 3406701055 }, { 3406706688, 3406706943 }, { 3406707968, 3406708479 }, { 3406718976, 3406719231 }, { 3406721536, 3406722047 }, { 3406722560, 3406722815 }, { 3406733824, 3406734079 }, { 3406741504, 3406741759 }, { 3406747136, 3406747391 }, { 3406751488, 3406751743 }, { 3406755328, 3406755583 }, { 3406757888, 3406761983 }, { 3406763008, 3406763775 }, { 3406780160, 3406780927 }, { 3406784768, 3406785023 }, { 3406786560, 3406788607 }, { 3406791168, 3406791679 }, { 3406796032, 3406796287 }, { 3406796544, 3406796799 }, { 3406797824, 3406798847 }, { 3406802432, 3406802687 }, { 3406816000, 3406816255 }, { 3406817280, 3406819839 }, { 3406820864, 3406821119 }, { 3406825984, 3406826239 }, { 3406826496, 3406827007 }, { 3406827520, 3406829567 }, { 3406830336, 3406830591 }, { 3406833152, 3406833407 }, { 3406835968, 3406836735 }, { 3406838272, 3406838527 }, { 3406839552, 3406839807 }, { 3406857472, 3406857727 }, { 3406864640, 3406865151 }, { 3406871040, 3406871551 }, { 3406881792, 3406882047 }, { 3406884352, 3406884607 }, { 3406884864, 3406885119 }, { 3406886144, 3406886399 }, { 3406889472, 3406889727 }, { 3406893568, 3406893823 }, { 3406896128, 3406896383 }, { 3406898944, 3406899199 }, { 3406903296, 3406903551 }, { 3406907904, 3406908415 }, { 3406923776, 3406924031 }, { 3406930944, 3406931199 }, { 3406936832, 3406937087 }, { 3406937600, 3406938111 }, { 3406948096, 3406948351 }, { 3406948608, 3406948863 }, { 3406952448, 3406952959 }, { 3406954240, 3406954495 }, { 3406955008, 3406955775 }, { 3406956288, 3406956543 }, { 3406962432, 3406962687 }, { 3406963968, 3406964223 }, { 3406966784, 3406967295 }, { 3406967808, 3406968063 }, { 3406972928, 3406973951 }, { 3406974976, 3406975487 }, { 3406976768, 3406977023 }, { 3406980096, 3406980607 }, { 3406981376, 3406981631 }, { 3406981888, 3406982143 }, { 3406982656, 3406982911 }, { 3406987520, 3406987775 }, { 3406988032, 3406988799 }, { 3406991360, 3406991615 }, { 3406993664, 3406993919 }, { 3407005440, 3407005695 }, { 3407007744, 3407007999 }, { 3407008512, 3407008767 }, { 3407009536, 3407009791 }, { 3407020288, 3407020543 }, { 3407024640, 3407024895 }, { 3407026176, 3407026431 }, { 3407027712, 3407027967 }, { 3407030528, 3407030783 }, { 3407031296, 3407032063 }, { 3407034880, 3407035135 }, { 3407035392, 3407035903 }, { 3407036416, 3407036671 }, { 3407037440, 3407037695 }, { 3407038464, 3407038719 }, { 3407045888, 3407046143 }, { 3407048448, 3407048703 }, { 3407053568, 3407053823 }, { 3407054080, 3407054335 }, { 3407056896, 3407057151 }, { 3407057664, 3407057919 }, { 3407058176, 3407058431 }, { 3407059968, 3407060223 }, { 3407065088, 3407065343 }, { 3407065600, 3407066111 }, { 3407073280, 3407073535 }, { 3407078400, 3407079423 }, { 3407079680, 3407079935 }, { 3407081984, 3407082239 }, { 3407083520, 3407084031 }, { 3407085312, 3407085567 }, { 3407089920, 3407090175 }, { 3407095808, 3407096319 }, { 3407096832, 3407097087 }, { 3407097856, 3407098111 }, { 3407101184, 3407101439 }, { 3407102208, 3407102463 }, { 3407108352, 3407108607 }, { 3407112704, 3407113215 }, { 3407115008, 3407115263 }, { 3407115520, 3407116287 }, { 3407116800, 3407117055 }, { 3407120128, 3407120383 }, { 3407123968, 3407124223 }, { 3407144448, 3407144703 }, { 3407144960, 3407145215 }, { 3407145984, 3407146239 }, { 3407151104, 3407151871 }, { 3407153152, 3407153407 }, { 3407153664, 3407153919 }, { 3407155712, 3407155967 }, { 3407159552, 3407160063 }, { 3407161600, 3407161855 }, { 3407162368, 3407162623 }, { 3407168512, 3407168767 }, { 3407172096, 3407172351 }, { 3407175680, 3407176703 }, { 3407182848, 3407183103 }, { 3407185920, 3407186431 }, { 3407188224, 3407188479 }, { 3407203840, 3407204095 }, { 3407222784, 3407223039 }, { 3407223808, 3407224319 }, { 3407224576, 3407224831 }, { 3407234048, 3407234303 }, { 3407236096, 3407236351 }, { 3407236608, 3407236863 }, { 3407238144, 3407238399 }, { 3407238912, 3407239167 }, { 3407240960, 3407241215 }, { 3407241984, 3407242239 }, { 3407243776, 3407244031 }, { 3407250176, 3407250431 }, { 3407258368, 3407258623 }, { 3407259136, 3407259391 }, { 3407260160, 3407260415 }, { 3407266304, 3407266559 }, { 3407278592, 3407279103 }, { 3407279360, 3407279871 }, { 3407281152, 3407281663 }, { 3407282176, 3407282431 }, { 3407294208, 3407294463 }, { 3407297792, 3407298559 }, { 3407300864, 3407301119 }, { 3407303936, 3407304191 }, { 3407305728, 3407306751 }, { 3407307264, 3407307519 }, { 3407309568, 3407309823 }, { 3407310848, 3407311103 }, { 3407315456, 3407315711 }, { 3407318016, 3407318527 }, { 3407326208, 3407326463 }, { 3407328768, 3407329023 }, { 3407329792, 3407330303 }, { 3407331328, 3407331583 }, { 3407332608, 3407333119 }, { 3407339520, 3407339775 }, { 3407340032, 3407341567 }, { 3407345920, 3407346175 }, { 3407346432, 3407346687 }, { 3407351040, 3407351295 }, { 3407352320, 3407352575 }, { 3407354624, 3407354879 }, { 3407358720, 3407358975 }, { 3407362048, 3407362303 }, { 3407362560, 3407362815 }, { 3407364864, 3407365119 }, { 3407366656, 3407366911 }, { 3407367936, 3407368447 }, { 3407369216, 3407369983 }, { 3407370752, 3407371007 }, { 3407376128, 3407376639 }, { 3407377408, 3407377663 }, { 3407378944, 3407379455 }, { 3407384832, 3407385087 }, { 3407386624, 3407386879 }, { 3407387904, 3407388159 }, { 3407388928, 3407389183 }, { 3407390464, 3407390719 }, { 3407395328, 3407395839 }, { 3407398656, 3407398911 }, { 3407399424, 3407399679 }, { 3407401984, 3407402495 }, { 3407403264, 3407403519 }, { 3407403776, 3407404031 }, { 3407410176, 3407410431 }, { 3407418112, 3407418367 }, { 3407425024, 3407425279 }, { 3407429632, 3407430143 }, { 3407436544, 3407436799 }, { 3407438592, 3407439103 }, { 3407440384, 3407440639 }, { 3407446784, 3407447039 }, { 3407447808, 3407448063 }, { 3407448576, 3407448831 }, { 3407450880, 3407451135 }, { 3407452416, 3407453183 }, { 3407455232, 3407455487 }, { 3407455744, 3407455999 }, { 3407457792, 3407458303 }, { 3407459328, 3407459583 }, { 3407459840, 3407460095 }, { 3407462144, 3407462399 }, { 3407464192, 3407464703 }, { 3407466496, 3407470591 }, { 3407471872, 3407472127 }, { 3407473408, 3407473919 }, { 3407475200, 3407475455 }, { 3407481856, 3407482111 }, { 3407487488, 3407487743 }, { 3407491328, 3407491839 }, { 3407492864, 3407493631 }, { 3407494144, 3407494399 }, { 3407495424, 3407495679 }, { 3407496192, 3407496447 }, { 3407498240, 3407498495 }, { 3407499264, 3407499519 }, { 3407500288, 3407500543 }, { 3407503616, 3407503871 }, { 3407504896, 3407505407 }, { 3407508224, 3407508735 }, { 3407511808, 3407512063 }, { 3407515392, 3407515903 }, { 3407516672, 3407517183 }, { 3407518208, 3407518463 }, { 3407519232, 3407519743 }, { 3407522304, 3407522559 }, { 3407523072, 3407523327 }, { 3407523840, 3407524095 }, { 3407526144, 3407526399 }, { 3407530496, 3407531007 }, { 3407532544, 3407532799 }, { 3407533568, 3407533823 }, { 3407535616, 3407535871 }, { 3407536128, 3407536383 }, { 3407537152, 3407537407 }, { 3407538176, 3407538431 }, { 3407544320, 3407544575 }, { 3407546880, 3407547135 }, { 3407548160, 3407548671 }, { 3407549440, 3407549695 }, { 3407549952, 3407550463 }, { 3407554560, 3407554815 }, { 3407555840, 3407556095 }, { 3407557888, 3407558143 }, { 3407560960, 3407561471 }, { 3407565056, 3407565311 }, { 3407566848, 3407567103 }, { 3407570432, 3407570687 }, { 3407572224, 3407572479 }, { 3407574272, 3407574527 }, { 3407575296, 3407575551 }, { 3407575808, 3407576063 }, { 3407576320, 3407576575 }, { 3407595520, 3407595775 }, { 3407596032, 3407596287 }, { 3407603968, 3407604223 }, { 3407606016, 3407606271 }, { 3407608320, 3407608575 }, { 3407612416, 3407612671 }, { 3407612928, 3407613183 }, { 3407618304, 3407619071 }, { 3407620864, 3407621375 }, { 3407623680, 3407623935 }, { 3407624192, 3407624447 }, { 3407628544, 3407629055 }, { 3407629312, 3407629567 }, { 3407631872, 3407632127 }, { 3407632384, 3407632639 }, { 3407638528, 3407638783 }, { 3407643392, 3407643647 }, { 3407644672, 3407644927 }, { 3407645696, 3407645951 }, { 3407646976, 3407647231 }, { 3407652096, 3407652351 }, { 3407653120, 3407653631 }, { 3407655424, 3407655935 }, { 3407657216, 3407657471 }, { 3407657728, 3407657983 }, { 3407660032, 3407660287 }, { 3407667712, 3407668223 }, { 3407671040, 3407671295 }, { 3407675904, 3407676159 }, { 3407678720, 3407679231 }, { 3407682560, 3407682815 }, { 3407687168, 3407687423 }, { 3407689984, 3407690239 }, { 3407691008, 3407691263 }, { 3407691520, 3407691775 }, { 3407693056, 3407693311 }, { 3407694080, 3407694335 }, { 3407696128, 3407696383 }, { 3407698432, 3407698687 }, { 3407699712, 3407699967 }, { 3407700992, 3407701247 }, { 3407701760, 3407702015 }, { 3407704064, 3407704319 }, { 3407706112, 3407707135 }, { 3407721984, 3407722495 }, { 3407723264, 3407723519 }, { 3407723776, 3407724287 }, { 3407727872, 3407728127 }, { 3407729152, 3407729407 }, { 3407730944, 3407731199 }, { 3407733504, 3407733759 }, { 3407734528, 3407734783 }, { 3407735040, 3407735551 }, { 3407738880, 3407739135 }, { 3407745024, 3407745535 }, { 3407747328, 3407747583 }, { 3407747840, 3407748095 }, { 3407748352, 3407748607 }, { 3407757824, 3407758079 }, { 3407761664, 3407761919 }, { 3407763200, 3407763455 }, { 3407769344, 3407769599 }, { 3407771904, 3407772159 }, { 3407772416, 3407772671 }, { 3407779840, 3407780095 }, { 3407780864, 3407781119 }, { 3407782400, 3407782655 }, { 3407785216, 3407785471 }, { 3407785728, 3407785983 }, { 3407788800, 3407789055 }, { 3407790592, 3407790847 }, { 3407796480, 3407796735 }, { 3407797248, 3407797503 }, { 3407797760, 3407798015 }, { 3407800320, 3407800831 }, { 3407801088, 3407801343 }, { 3407802368, 3407802623 }, { 3407803904, 3407804159 }, { 3407804928, 3407805439 }, { 3407817984, 3407818495 }, { 3407819008, 3407819263 }, { 3407819520, 3407819775 }, { 3407820288, 3407820799 }, { 3407824128, 3407824383 }, { 3407824896, 3407825151 }, { 3407826944, 3407827199 }, { 3407828224, 3407828479 }, { 3407831296, 3407831551 }, { 3407833344, 3407833855 }, { 3407834112, 3407834623 }, { 3407838208, 3407838463 }, { 3407847936, 3407848191 }, { 3407851008, 3407851263 }, { 3407851776, 3407852031 }, { 3407852800, 3407853055 }, { 3407854336, 3407854591 }, { 3407854848, 3407855103 }, { 3407858688, 3407858943 }, { 3407862784, 3407863039 }, { 3407863296, 3407863807 }, { 3407864064, 3407864319 }, { 3407865088, 3407865343 }, { 3407869952, 3407870463 }, { 3407871232, 3407871487 }, { 3407877120, 3407877375 }, { 3407884288, 3407884799 }, { 3407886336, 3407886591 }, { 3407887360, 3407887615 }, { 3407887872, 3407888127 }, { 3407889408, 3407889919 }, { 3407891456, 3407891711 }, { 3407892736, 3407892991 }, { 3407893504, 3407894015 }, { 3407896320, 3407896575 }, { 3407898112, 3407898367 }, { 3407898880, 3407899135 }, { 3407905280, 3407905535 }, { 3407906048, 3407906303 }, { 3407907840, 3407908095 }, { 3407910912, 3407911167 }, { 3407919616, 3407920127 }, { 3407921152, 3407921407 }, { 3407922176, 3407922431 }, { 3407923968, 3407924735 }, { 3407926272, 3407926527 }, { 3407938560, 3407938815 }, { 3407939328, 3407939583 }, { 3407942912, 3407943167 }, { 3407944192, 3407944447 }, { 3407945728, 3407945983 }, { 3407953664, 3407954175 }, { 3407954688, 3407955199 }, { 3407956224, 3407956479 }, { 3407957760, 3407958015 }, { 3407963136, 3407963391 }, { 3407968768, 3407969023 }, { 3407970560, 3407970815 }, { 3407971072, 3407971327 }, { 3407974656, 3407974911 }, { 3407977472, 3407977727 }, { 3407977984, 3407978495 }, { 3407982080, 3407982335 }, { 3407984896, 3407985151 }, { 3407988736, 3407988991 }, { 3407989248, 3407990015 }, { 3407990272, 3407990783 }, { 3407994880, 3407995647 }, { 3407997184, 3407997439 }, { 3407999744, 3407999999 }, { 3408001536, 3408001791 }, { 3408004096, 3408004351 }, { 3408008448, 3408008703 }, { 3408009984, 3408010239 }, { 3408013056, 3408013311 }, { 3408015360, 3408015871 }, { 3408016896, 3408017151 }, { 3408017408, 3408017919 }, { 3408020224, 3408020479 }, { 3408020736, 3408020991 }, { 3408022528, 3408022783 }, { 3408026624, 3408026879 }, { 3408030208, 3408030463 }, { 3408032000, 3408032255 }, { 3408040704, 3408040959 }, { 3408041472, 3408041727 }, { 3408041984, 3408042495 }, { 3408044288, 3408044799 }, { 3408050944, 3408051199 }, { 3408055296, 3408056319 }, { 3408062464, 3408062719 }, { 3408064512, 3408064767 }, { 3408065024, 3408065279 }, { 3408065792, 3408066047 }, { 3408067328, 3408067583 }, { 3409379840, 3409380607 }, { 3409381888, 3409382143 }, { 3409382656, 3409382911 }, { 3409384960, 3409385215 }, { 3409387008, 3409387263 }, { 3409403136, 3409403391 }, { 3409405184, 3409405439 }, { 3409407232, 3409407743 }, { 3409409024, 3409409535 }, { 3409409792, 3409410047 }, { 3409412096, 3409412607 }, { 3409416704, 3409417215 }, { 3409428480, 3409428735 }, { 3409429504, 3409429759 }, { 3409435136, 3409435391 }, { 3409435904, 3409436159 }, { 3409436672, 3409436927 }, { 3409445120, 3409445375 }, { 3409445888, 3409446143 }, { 3409447936, 3409448191 }, { 3409451008, 3409451263 }, { 3409454592, 3409454847 }, { 3409455104, 3409455359 }, { 3409456640, 3409456895 }, { 3409462272, 3409462783 }, { 3409465856, 3409466879 }, { 3409469184, 3409469439 }, { 3409473024, 3409473279 }, { 3409475840, 3409476095 }, { 3409486080, 3409486335 }, { 3409488128, 3409488383 }, { 3409488896, 3409489407 }, { 3409489664, 3409489919 }, { 3409491712, 3409491967 }, { 3409492224, 3409492479 }, { 3409492736, 3409492991 }, { 3409494016, 3409494271 }, { 3409495552, 3409495807 }, { 3409496320, 3409496575 }, { 3409498112, 3409498879 }, { 3409499648, 3409499903 }, { 3409500160, 3409500415 }, { 3409502976, 3409503487 }, { 3409504000, 3409504511 }, { 3409506304, 3409506559 }, { 3409509376, 3409509631 }, { 3409509888, 3409510143 }, { 3409511680, 3409512191 }, { 3409513472, 3409513983 }, { 3409517568, 3409517823 }, { 3409520384, 3409520639 }, { 3409522176, 3409522431 }, { 3409525248, 3409525503 }, { 3409526016, 3409526271 }, { 3409527296, 3409527551 }, { 3409528064, 3409528831 }, { 3409529088, 3409529343 }, { 3409533440, 3409533695 }, { 3409536256, 3409536511 }, { 3409538304, 3409538559 }, { 3409541888, 3409542143 }, { 3409550592, 3409550847 }, { 3409561600, 3409561855 }, { 3409562112, 3409562367 }, { 3409563136, 3409563391 }, { 3409567232, 3409567487 }, { 3409567744, 3409571839 }, { 3409573376, 3409573887 }, { 3409574144, 3409574399 }, { 3409575168, 3409575935 }, { 3409838592, 3409838847 }, { 3409871616, 3409871871 }, { 3409873664, 3409873919 }, { 3409879296, 3409879551 }, { 3409888512, 3409888767 }, { 3409896448, 3409897471 }, { 3409897984, 3409898239 }, { 3409901056, 3409901311 }, { 3410796544, 3410797567 }, { 3410798592, 3410799615 }, { 3410808832, 3410811903 }, { 3410817024, 3410818047 }, { 3410867200, 3410868223 }, { 3410898944, 3410903039 }, { 3410920192, 3410920447 }, { 3410926592, 3410927615 }, { 3410952192, 3410956287 }, { 3411018752, 3411019263 }, { 3411025920, 3411030015 }, { 3411032320, 3411032575 }, { 3411050752, 3411051007 }, { 3411051520, 3411052543 }, { 3411054592, 3411058687 }, { 3411087360, 3411091455 }, { 3411145728, 3411146751 }, { 3411148800, 3411149311 }, { 3411177472, 3411181567 }, { 3411206144, 3411210239 }, { 3411214336, 3411215359 }, { 3411216384, 3411218431 }, { 3411228672, 3411230719 }, { 3411271680, 3411275775 }, { 3411410944, 3411443711 }, { 3411474944, 3411475199 }, { 3411475968, 3411476479 }, { 3411550208, 3411558399 }, { 3411591168, 3411599359 }, { 3411607552, 3411608575 }, { 3411633152, 3411634175 }, { 3411641600, 3411641855 }, { 3411642368, 3411643391 }, { 3411644416, 3411644671 }, { 3411673088, 3411674111 }, { 3411675136, 3411677183 }, { 3411705856, 3411730431 }, { 3411746816, 3411755007 }, { 3411763200, 3411767295 }, { 3411769344, 3411771391 }, { 3411804160, 3411805183 }, { 3411805696, 3411805951 }, { 3411845120, 3411853311 }, { 3411858176, 3411858431 }, { 3411860417, 3411860479 }, { 3411869696, 3411943423 }, { 3412000768, 3412002815 }, { 3412025344, 3412026367 }, { 3412027392, 3412049919 }, { 3412051968, 3412055039 }, { 3412058112, 3412066303 }, { 3412267008, 3412271103 }, { 3412283392, 3412287487 }, { 3412336640, 3412340735 }, { 3412343296, 3412343551 }, { 3412343808, 3412344063 }, { 3412344576, 3412344831 }, { 3412348928, 3412361215 }, { 3412377600, 3412381695 }, { 3412598784, 3412602879 }, { 3412680704, 3412697087 }, { 3412787200, 3412819967 }, { 3413024768, 3413032959 }, { 3413037056, 3413041151 }, { 3413043200, 3413043967 }, { 3413266432, 3413270527 }, { 3413308416, 3413309439 }, { 3413557248, 3413565439 }, { 3413569792, 3413570047 }, { 3413571584, 3413572607 }, { 3413579776, 3413582847 }, { 3413594112, 3413595135 }, { 3413595392, 3413595647 }, { 3413602560, 3413604351 }, { 3413606400, 3413639167 }, { 3413850624, 3413850879 }, { 3414171648, 3414179839 }, { 3414188032, 3414196223 }, { 3414302720, 3414306815 }, { 3414307072, 3414310911 }, { 3414433792, 3414441983 }, { 3414618112, 3414620159 }, { 3414646784, 3414654975 }, { 3414663168, 3414667263 }, { 3415084032, 3415084543 }, { 3415137024, 3415137279 }, { 3415138304, 3415146495 }, { 3415236608, 3415244799 }, { 3415277568, 3415285759 }, { 3415474176, 3415495679 }, { 3415496192, 3415496703 }, { 3415563264, 3415564287 }, { 3415752704, 3415760895 }, { 3415769088, 3415777279 }, { 3415801856, 3415802879 }, { 3416047616, 3416063999 }, { 3416133632, 3416135679 }, { 3416293632, 3416293887 }, { 3416309760, 3416317951 }, { 3416326144, 3416327167 }, { 3416372224, 3416372479 }, { 3416372992, 3416373247 }, { 3416375296, 3416383487 }, { 3416694784, 3416702975 }, { 3416726528, 3416727551 }, { 3416784896, 3416793087 }, { 3416930816, 3416931327 }, { 3416981504, 3416982527 }, { 3417034752, 3417035007 }, { 3417038848, 3417042943 }, { 3417179136, 3417179391 }, { 3417179648, 3417180159 }, { 3417202688, 3417210879 }, { 3417276416, 3417284607 }, { 3417292800, 3417333759 }, { 3417352192, 3417354239 }, { 3417853952, 3417858047 }, { 3417947392, 3417947647 }, { 3418067200, 3418067455 }, { 3418071040, 3418079231 }, { 3418161152, 3418161663 }, { 3418162688, 3418163199 }, { 3418189824, 3418190847 }, { 3418210304, 3418218495 }, { 3418222592, 3418223615 }, { 3418251264, 3418255359 }, { 3418290432, 3418290687 }, { 3418292224, 3418292991 }, { 3418293504, 3418293759 }, { 3418294016, 3418294271 }, { 3418296320, 3418296575 }, { 3418297088, 3418298367 }, { 3418298624, 3418298879 }, { 3418299392, 3418300415 }, { 3418308608, 3418324991 }, { 3418326272, 3418326527 }, { 3418329088, 3418333183 }, { 3418357760, 3418362111 }, { 3418363904, 3418364415 }, { 3418480640, 3418488831 }, { 3418510848, 3418511103 }, { 3418570752, 3418578943 }, { 3418587136, 3418621951 }, { 3418627072, 3418628095 }, { 3418993920, 3418994431 }, { 3419073536, 3419074559 }, { 3419226112, 3419234303 }, { 3419250688, 3419254783 }, { 3419255808, 3419257855 }, { 3419258112, 3419258367 }, { 3419357184, 3419411455 }, { 3419414528, 3419422719 }, { 3419457280, 3419457295 }, { 3419529216, 3419537407 }, { 3419556096, 3419556351 }, { 3419556608, 3419556863 }, { 3419668480, 3419672575 }, { 3419688960, 3419693055 }, { 3420038144, 3420039167 }, { 3420393728, 3420394239 }, { 3426197504, 3426197759 }, { 3427112448, 3427112703 }, { 3430068224, 3430068735 }, { 3432875264, 3432875519 }, { 3432877056, 3432877311 }, { 3432878336, 3432878591 }, { 3432879872, 3432880127 }, { 3432891904, 3432892159 }, { 3432902912, 3432903167 }, { 3436814336, 3436814847 }, { 3436815104, 3436815359 }, { 3448989952, 3448990207 }, { 3450590888, 3450590971 }, { 3450960840, 3450960847 }, { 3452652032, 3452652543 }, { 3452724736, 3452725247 }, { 3460800352, 3460800511 }, { 3461682176, 3461682431 }, { 3461686272, 3461686527 }, { 3461687296, 3461687551 }, { 3461689088, 3461689343 }, { 3461691136, 3461691647 }, { 3464203008, 3464203263 }, { 3471327232, 3471330303 }, { 3478721792, 3478722047 }, { 3478842368, 3478843391 }, { 3480593664, 3480593919 }, { 3489575424, 3489575679 }, { 3489575936, 3489576191 }, { 3489576704, 3489577008 }, { 3489577216, 3489578239 }, { 3495386112, 3495387135 }, { 3497233408, 3497233663 }, { 3507071696, 3507071743 }, { 3507535360, 3507535615 }, { 3512024960, 3512025087 }, { 3514725809, 3514725811 }, { 3516006656, 3516007167 }, { 3516008448, 3516009471 }, { 3518059776, 3518060031 }, { 3519943936, 3519944191 }, { 3523346432, 3523354623 }, { 3523543040, 3523551231 }, { 3523575808, 3523583999 }, { 3523688448, 3523690495 }, { 3524001792, 3524132863 }, { 3524149248, 3524157439 }, { 3524161536, 3524173823 }, { 3524179968, 3524179983 }, { 3524180480, 3524180800 }, { 3524182016, 3524247551 }, { 3524290560, 3524291583 }, { 3524296704, 3524313087 }, { 3524591616, 3524722687 }, { 3524730880, 3524739071 }, { 3524853760, 3526361087 }, { 3526557696, 3526754303 }, { 3526934528, 3526942719 }, { 3527933952, 3528073983 }, { 3528074496, 3528392703 }, { 3528409088, 3528425471 }, { 3528450048, 3528458239 }, { 3528589312, 3528720383 }, { 3528949760, 3528966143 }, { 3535388672, 3535405055 }, { 3535822848, 3535831039 }, { 3544186880, 3544711167 }, { 3545235456, 3545759743 }, { 3545825280, 3546808319 }, { 3548905472, 3549434111 }, { 3549434368, 3549435135 }, { 3549435392, 3549435647 }, { 3549435904, 3549436415 }, { 3549436672, 3549437439 }, { 3549437952, 3549839359 }, { 3549847552, 3549847807 }, { 3549848064, 3549848319 }, { 3549848576, 3549848831 }, { 3549855744, 3549986815 }, { 3549991956, 3549992190 }, { 3549992451, 3549992607 }, { 3549994240, 3550011391 }, { 3550019584, 3550098431 }, { 3550098688, 3550437375 }, { 3550445568, 3551002623 }, { 3556786176, 3556794367 }, { 3556887176, 3556887551 }, { 3556892672, 3556900863 }, { 3556999168, 3557007359 }, { 3557113856, 3557130239 }, { 3557138432, 3557146623 }, { 3557154816, 3557171199 }, { 3557177344, 3557177599 }, { 3557253120, 3557261311 }, { 3557285888, 3557294079 }, { 3557351424, 3557352959 }, { 3557353472, 3557355519 }, { 3557357312, 3557357567 }, { 3557523456, 3557531647 }, { 3557556224, 3557564415 }, { 3557572608, 3557580799 }, { 3557621760, 3557629951 }, { 3557646336, 3557654527 }, { 3557728256, 3557744639 }, { 3557761024, 3557769215 }, { 3557777408, 3557785599 }, { 3557818368, 3557826559 }, { 3557867520, 3557875711 }, { 3557883904, 3557892095 }, { 3557974016, 3557974271 }, { 3557974528, 3557974783 }, { 3557975040, 3557975295 }, { 3557975808, 3557976063 }, { 3557979392, 3557979903 }, { 3557980160, 3557980415 }, { 3557980672, 3557980927 }, { 3557981696, 3557981951 }, { 3558014976, 3558023167 }, { 3558080512, 3558096895 }, { 3558146048, 3558154239 }, { 3558227968, 3558229247 }, { 3558229760, 3558230783 }, { 3558231040, 3558231551 }, { 3558231808, 3558232319 }, { 3558232576, 3558233855 }, { 3558234112, 3558236159 }, { 3558293504, 3558301695 }, { 3558350848, 3558359039 }, { 3558372096, 3558372351 }, { 3558373376, 3558373631 }, { 3558531072, 3558539263 }, { 3558768640, 3558785023 }, { 3558916096, 3558924287 }, { 3558932480, 3558940671 }, { 3558989824, 3558998015 }, { 3559006208, 3559014399 }, { 3559022592, 3559030783 }, { 3559104512, 3559112703 }, { 3559186432, 3559194623 }, { 3559284736, 3559285251 }, { 3559285504, 3559287343 }, { 3559287552, 3559288175 }, { 3559288320, 3559288575 }, { 3559288832, 3559290879 }, { 3559291136, 3559291295 }, { 3559291648, 3559291903 }, { 3559292160, 3559292487 }, { 3559292672, 3559292927 }, { 3559440384, 3559448575 }, { 3559456768, 3559473151 }, { 3559530496, 3559538687 }, { 3559669760, 3559677951 }, { 3559686144, 3559694335 }, { 3559718912, 3559727103 }, { 3559776256, 3559792895 }, { 3559793280, 3559793407 }, { 3559793792, 3559793919 }, { 3559796480, 3559796735 }, { 3559798272, 3559798527 }, { 3559833600, 3559849983 }, { 3559900008, 3559900031 }, { 3559923712, 3559931903 }, { 3559948288, 3559956479 }, { 3559964672, 3559976959 }, { 3560005632, 3560013823 }, { 3560178688, 3560179199 }, { 3560179456, 3560179711 }, { 3560180992, 3560181247 }, { 3560182272, 3560182527 }, { 3560251392, 3560259583 }, { 3560398848, 3560407039 }, { 3560529920, 3560554495 }, { 3560620032, 3560628223 }, { 3560660992, 3560669183 }, { 3560702976, 3560703999 }, { 3560707584, 3560707839 }, { 3560964096, 3560996863 }, { 3561046016, 3561054207 }, { 3561160704, 3561168895 }, { 3561316352, 3561324543 }, { 3561578496, 3561586687 }, { 3561668608, 3561684991 }, { 3561717760, 3561725951 }, { 3561734144, 3561750527 }, { 3561783296, 3561799679 }, { 3561848832, 3561857023 }, { 3562086400, 3562088447 }, { 3562209280, 3562217471 }, { 3562692608, 3562693631 }, { 3562782720, 3562790911 }, { 3562823680, 3562825215 }, { 3562831872, 3562832367 }, { 3562832384, 3562848255 }, { 3562930176, 3562938367 }, { 3562954752, 3562962943 }, { 3563085824, 3563094015 }, { 3563110400, 3563118591 }, { 3563356160, 3563364351 }, { 3563491328, 3563492095 }, { 3563493376, 3563493887 }, { 3563544576, 3563552767 }, { 3563601920, 3563610111 }, { 3563724800, 3563732991 }, { 3563788288, 3563788543 }, { 3563788800, 3563789311 }, { 3563831296, 3563847679 }, { 3563872256, 3563880447 }, { 3563913216, 3563921407 }, { 3563956224, 3563958271 }, { 3563962368, 3563970559 }, { 3564011520, 3564011775 }, { 3564013312, 3564013567 }, { 3564018944, 3564019711 }, { 3564060672, 3564068863 }, { 3564199936, 3564208127 }, { 3564232704, 3564240895 }, { 3564318720, 3564319487 }, { 3564320768, 3564321791 }, { 3564396544, 3564404735 }, { 3564511232, 3564517631 }, { 3564518400, 3564518655 }, { 3564518912, 3564519423 }, { 3564579328, 3564579839 }, { 3564593152, 3564601343 }, { 3564609536, 3564622079 }, { 3564622336, 3564634111 }, { 3564675072, 3564683263 }, { 3564765184, 3564773375 }, { 3564896256, 3564904447 }, { 3565248512, 3565256703 }, { 3565256704, 3565289471 }, { 3566739456, 3566747647 }, { 3567165440, 3567169535 }, { 3567420416, 3567422463 }, { 3567517696, 3567583231 }, { 3568304128, 3568309775 }, { 3568310016, 3568369663 }, { 3569090560, 3569123327 }, { 3569352704, 3569354751 }, { 3569355776, 3569356799 }, { 3569358848, 3569359871 }, { 3569360896, 3569361919 }, { 3569362944, 3569390591 }, { 3569392384, 3569405951 }, { 3569409536, 3569414143 }, { 3569418240, 3569419263 }, { 3569421312, 3569424383 }, { 3569426432, 3569444863 }, { 3569445120, 3569453055 }, { 3569455104, 3569456383 }, { 3569456640, 3569457919 }, { 3569458176, 3569458431 }, { 3569458944, 3569464319 }, { 3569465344, 3569483775 }, { 3570756192, 3570756351 }, { 3570760544, 3570760703 }, { 3571187712, 3571253247 }, { 3571974144, 3571978239 }, { 3571982336, 3571994623 }, { 3572002816, 3572004863 }, { 3572056064, 3572072447 }, { 3573022720, 3573055487 }, { 3573878784, 3573879807 }, { 3573880832, 3573882879 }, { 3573886976, 3573889023 }, { 3573893376, 3573897215 }, { 3573899264, 3573903359 }, { 3573905408, 3573907455 }, { 3573909248, 3573909503 }, { 3573915648, 3573917695 }, { 3573929984, 3573934079 }, { 3573936128, 3573938175 }, { 3574923264, 3574931455 }, { 3574935552, 3574939647 }, { 3575119872, 3575185407 }, { 3575316480, 3575349247 }, { 3575412992, 3575413247 }, { 3575742464, 3575748519 }, { 3575748608, 3575775231 }, { 3577413632, 3577417519 }, { 3577417600, 3577442303 }, { 3577446400, 3577479167 }, { 3578724352, 3578732543 }, { 3578740736, 3578757119 }, { 3578822656, 3578855423 }, { 3579117568, 3579132159 }, { 3579132416, 3579183103 }, { 3579248640, 3579346943 }, { 3580625920, 3580626943 }, { 3580628992, 3580631039 }, { 3580633088, 3580635135 }, { 3580657664, 3580658431 }, { 3580658944, 3580659199 }, { 3580659456, 3580663807 }, { 3580667904, 3580669951 }, { 3580672000, 3580674047 }, { 3580675072, 3580675583 }, { 3580676096, 3580682239 }, { 3580688384, 3580698623 }, { 3580702720, 3580706815 }, { 3580708864, 3580709887 }, { 3580710400, 3580710911 }, { 3580715008, 3580719103 }, { 3580727552, 3580727807 }, { 3580728064, 3580728319 }, { 3580729600, 3580729855 }, { 3580739840, 3580740095 }, { 3580740608, 3580740863 }, { 3580741888, 3580743423 }, { 3580755968, 3580772351 }, { 3580805120, 3580821503 }, { 3581935616, 3581943807 }, { 3581984768, 3581992959 }, { 3582009344, 3582017535 }, { 3582025728, 3582033919 }, { 3582132224, 3582140415 }, { 3582214144, 3582222335 }, { 3582377984, 3582386175 }, { 3582410752, 3582417919 }, { 3582418176, 3582435327 }, { 3582582784, 3582590975 }, { 3582607360, 3582615551 }, { 3582640128, 3582646271 }, { 3582647040, 3582648319 }, { 3582707712, 3582708223 }, { 3582709760, 3582710783 }, { 3582712832, 3582713855 }, { 3582715136, 3582715903 }, { 3582720000, 3582721023 }, { 3582746624, 3582754815 }, { 3582779392, 3582787583 }, { 3582820352, 3582828543 }, { 3582844928, 3582853119 }, { 3582861312, 3582869503 }, { 3582902272, 3582910463 }, { 3583049728, 3583066111 }, { 3583188992, 3583197183 }, { 3583229952, 3583238143 }, { 3583246336, 3583254527 }, { 3583287296, 3583295487 }, { 3583311872, 3583320063 }, { 3583393792, 3583401983 }, { 3583442944, 3583451135 }, { 3583541248, 3583549439 }, { 3583680512, 3583688703 }, { 3583709864, 3583709943 }, { 3583738624, 3583738879 }, { 3583745024, 3583745279 }, { 3583754240, 3583762431 }, { 3583803392, 3583804671 }, { 3583805952, 3583806207 }, { 3583810560, 3583810815 }, { 3583819776, 3583827967 }, { 3583901696, 3583909887 }, { 3583983616, 3583987711 }, { 3583991808, 3583992335 }, { 3583993600, 3583994111 }, { 3583994368, 3583994687 }, { 3583994880, 3583995135 }, { 3583995648, 3583996159 }, { 3583996928, 3583997199 }, { 3583997696, 3583997951 }, { 3583998720, 3583998975 }, { 3583999232, 3583999487 }, { 3583999744, 3583999999 }, { 3584016384, 3584018687 }, { 3584018944, 3584024575 }, { 3584299520, 3584299775 }, { 3584409600, 3584417791 }, { 3584442368, 3584443391 }, { 3584444416, 3584445439 }, { 3584446464, 3584446719 }, { 3584448512, 3584450047 }, { 3584450304, 3584450559 }, { 3584499712, 3584507903 }, { 3584540672, 3584548863 }, { 3584565248, 3584573439 }, { 3584589824, 3584598015 }, { 3584704512, 3584720895 }, { 3584737280, 3584738303 }, { 3584753664, 3584770047 }, { 3584819200, 3584827391 }, { 3585138688, 3585146879 }, { 3585171456, 3585179647 }, { 3585220608, 3585228799 }, { 3585251328, 3585251839 }, { 3585252096, 3585252351 }, { 3585392640, 3585396991 }, { 3585397248, 3585398015 }, { 3585398236, 3585400831 }, { 3585409024, 3585417215 }, { 3585515520, 3585523711 }, { 3585529088, 3585529343 }, { 3585548288, 3585548799 }, { 3585550400, 3585550847 }, { 3585551616, 3585551871 }, { 3585552384, 3585553151 }, { 3585553664, 3585555199 }, { 3585564672, 3585572863 }, { 3585597440, 3585605631 }, { 3585622016, 3585622783 }, { 3585638400, 3585646591 }, { 3585826816, 3585835007 }, { 3585982464, 3585998847 }, { 3586056192, 3586072575 }, { 3586195456, 3586203647 }, { 3586405376, 3586406399 }, { 3587219456, 3587227647 }, { 3587325952, 3587342335 }, { 3587768320, 3587769343 }, { 3587771136, 3587771391 }, { 3587948544, 3587963903 }, { 3588030464, 3588031615 }, { 3588031744, 3588036927 }, { 3588037120, 3588038319 }, { 3588038400, 3588046847 }, { 3588153344, 3588161535 }, { 3588353280, 3588353535 }, { 3588377600, 3588379647 }, { 3588384000, 3588384767 }, { 3588386816, 3588387583 }, { 3588388864, 3588390655 }, { 3588505600, 3588521983 }, { 3588768768, 3588769791 }, { 3588781056, 3588782079 }, { 3588800512, 3588800767 }, { 3588801024, 3588801535 }, { 3588802304, 3588802559 }, { 3588803584, 3588803839 }, { 3588804352, 3588806655 }, { 3588808960, 3588809215 }, { 3588809472, 3588810239 }, { 3588811008, 3588811263 }, { 3588812800, 3588813055 }, { 3588814080, 3588814335 }, { 3588815104, 3588815871 }, { 3588816384, 3588816639 }, { 3588882432, 3588890623 }, { 3588931584, 3588947967 }, { 3589390336, 3589423103 }, { 3589430080, 3589430271 }, { 3589437952, 3589438207 }, { 3589455872, 3589472255 }, { 3589488640, 3589505023 }, { 3589767168, 3589816319 }, { 3590045696, 3590047231 }, { 3590047488, 3590047743 }, { 3590049536, 3590062079 }, { 3590078464, 3590094847 }, { 3631096416, 3631096575 }, { 3631712800, 3631713023 }, { 3631920128, 3631921151 }, { 3631922176, 3631923199 }, { 3638852352, 3638852607 }, { 3641200640, 3641204735 }, { 3641210112, 3641210367 }, { 3641211904, 3641212927 }, { 3641237504, 3641241599 }, { 3641266176, 3641270271 }, { 3641282560, 3641286655 }, { 3641319424, 3641323519 }, { 3641450496, 3641454591 }, { 3641458688, 3641462783 }, { 3641466880, 3641470975 }, { 3641503744, 3641507839 }, { 3641561088, 3641565183 }, { 3641577472, 3641581567 }, { 3641585664, 3641589759 }, { 3641622528, 3641626623 }, { 3641634816, 3641638911 }, { 3641643008, 3641647103 }, { 3641651200, 3641655295 }, { 3641671680, 3641679871 }, { 3641688064, 3641692159 }, { 3641708544, 3641712639 }, { 3641798656, 3641802751 }, { 3641810944, 3641819135 }, { 3641850880, 3641851903 }, { 3641868288, 3641876479 }, { 3641925632, 3641933823 }, { 3641982976, 3641991167 }, { 3642003456, 3642007551 }, { 3642056704, 3642060799 }, { 3642085376, 3642089471 }, { 3642138624, 3642142719 }, { 3642167296, 3642171391 }, { 3642179584, 3642187775 }, { 3642195968, 3642200319 }, { 3642200576, 3642201343 }, { 3642201600, 3642204159 }, { 3642208256, 3642212351 }, { 3642257408, 3642261503 }, { 3642273792, 3642277887 }, { 3642314752, 3642315775 }, { 3642316800, 3642318591 }, { 3642331136, 3642335231 }, { 3642347520, 3642355711 }, { 3642359808, 3642367999 }, { 3642435584, 3642436607 }, { 3642439424, 3642439679 }, { 3642458112, 3642462207 }, { 3642509312, 3642511359 }, { 3642544128, 3642552319 }, { 3642553344, 3642553599 }, { 3642553762, 3642554367 }, { 3642568704, 3642572799 }, { 3642576896, 3642580991 }, { 3642601472, 3642605567 }, { 3642683392, 3642687487 }, { 3644882944, 3644887295 }, { 3644887488, 3644887807 }, { 3644889088, 3644890111 }, { 3644915712, 3644919807 }, { 3644936192, 3644940287 }, { 3644968960, 3644973055 }, { 3644985344, 3644989439 }, { 3644997632, 3645005823 }, { 3645018112, 3645022207 }, { 3645046784, 3645050879 }, { 3645075456, 3645079551 }, { 3645091840, 3645095935 }, { 3645210624, 3645214719 }, { 3645227008, 3645235199 }, { 3645247488, 3645251583 }, { 3645267968, 3645276159 }, { 3645341696, 3645345791 }, { 3645349888, 3645353983 }, { 3645366272, 3645370367 }, { 3645374464, 3645378047 }, { 3645378304, 3645378559 }, { 3645411328, 3645415423 }, { 3645454336, 3645456383 }, { 3645468672, 3645471231 }, { 3645471488, 3645471743 }, { 3645489152, 3645493247 }, { 3645513728, 3645517823 }, { 3645534208, 3645538303 }, { 3645546496, 3645550591 }, { 3645566976, 3645571071 }, { 3645644800, 3645648895 }, { 3645681664, 3645685759 }, { 3645714432, 3645718527 }, { 3645726720, 3645727999 }, { 3645728256, 3645728511 }, { 3645728768, 3645730815 }, { 3645812736, 3645816831 }, { 3645825024, 3645828607 }, { 3645833216, 3645841407 }, { 3645845504, 3645849599 }, { 3645890560, 3645894655 }, { 3647602688, 3647658751 }, { 3647659008, 3647665151 }, { 3647665408, 3647733759 }, { 3647948432, 3647948543 }, { 3647995904, 3648007935 }, { 3648090112, 3648094207 }, { 3648126976, 3648135423 }, { 3648137472, 3648138239 }, { 3648163840, 3648167935 }, { 3648172032, 3648176127 }, { 3648184320, 3648192511 }, { 3648212992, 3648217087 }, { 3648237568, 3648241663 }, { 3648270336, 3648274431 }, { 3648290816, 3648299007 }, { 3648344064, 3648348159 }, { 3648352256, 3648356351 }, { 3648368640, 3648372735 }, { 3648385024, 3648389119 }, { 3648405504, 3648413695 }, { 3648434176, 3648438271 }, { 3648458752, 3648462847 }, { 3648475136, 3648479231 }, { 3648487680, 3648488191 }, { 3648490240, 3648490495 }, { 3650117632, 3650119167 }, { 3650119424, 3650119679 }, { 3650134016, 3650142207 }, { 3650162688, 3650166783 }, { 3650195456, 3650199551 }, { 3650219008, 3650219263 }, { 3650232320, 3650234367 }, { 3650234880, 3650236415 }, { 3650291712, 3650292735 }, { 3650293760, 3650297855 }, { 3650367488, 3650371583 }, { 3650404352, 3650412543 }, { 3650424832, 3650428927 }, { 3650465792, 3650469887 }, { 3650486272, 3650502655 }, { 3650504704, 3650505983 }, { 3650506240, 3650506751 }, { 3650535424, 3650539519 }, { 3650555904, 3650559999 }, { 3650568192, 3650572287 }, { 3650584576, 3650588671 }, { 3650609264, 3650609663 }, { 3650609920, 3650613247 }, { 3651350016, 3651350271 }, { 3651367680, 3651367935 }, { 3651682304, 3651686399 }, { 3651727360, 3651729407 }, { 3651751936, 3651756031 }, { 3651813376, 3651821567 }, { 3651825664, 3651829759 }, { 3651850240, 3651854335 }, { 3651862528, 3651866623 }, { 3651899392, 3651899647 }, { 3651899904, 3651900415 }, { 3651901440, 3651903487 }, { 3651932160, 3651936255 }, { 3651997696, 3652001791 }, { 3652009984, 3652014079 }, { 3652059136, 3652063231 }, { 3652083712, 3652087807 }, { 3652100096, 3652107519 }, { 3652124672, 3652136959 }, { 3652157440, 3652165631 }, { 3652641280, 3652641535 }, { 3653431296, 3653435391 }, { 3653451776, 3653464063 }, { 3653488640, 3653492735 }, { 3653505856, 3653506047 }, { 3653525504, 3653529599 }, { 3653566464, 3653570559 }, { 3653595136, 3653599231 }, { 3653610496, 3653611519 }, { 3653615616, 3653619711 }, { 3653623808, 3653636095 }, { 3653652480, 3653656575 }, { 3653672960, 3653677055 }, { 3653750784, 3653755135 }, { 3653755648, 3653755903 }, { 3653756160, 3653756415 }, { 3653757184, 3653757439 }, { 3653758208, 3653763071 }, { 3656615680, 3656615935 }, { 3657433088, 3659415295 }, { 3659415552, 3659530239 }, { 3661103104, 3663874303 }, { 3663875328, 3663879167 }, { 3663880192, 3663986687 }, { 3664010240, 3664052223 }, { 3664248832, 3664642047 }, { 3669606400, 3669614591 }, { 3669618688, 3669619199 }, { 3669619712, 3669620735 }, { 3670016000, 3671064575 }, { 3673161728, 3673477119 }, { 3673481216, 3673522175 }, { 3673554944, 3673587711 }, { 3673587968, 3673591039 }, { 3673591808, 3673636863 }, { 3673645056, 3673686015 }, { 3673751552, 3673817087 }, { 3678928896, 3678994431 }, { 3679584256, 3679649791 }, { 3679682560, 3679715327 }, { 3680125952, 3680129023 }, { 3682598912, 3684696063 }, { 3688366080, 3689938943 }, { 3690070016, 3690463231 }, { 3697655808, 3697672191 }, { 3698327552, 3698589695 }, { 3700981760, 3701014527 }, { 3701080064, 3701211135 }, { 3701403648, 3701404671 }, { 3701473280, 3704619007 }, { 3706126336, 3706142719 }, { 3706159104, 3706191871 }, { 3706208256, 3706224639 }, { 3706322944, 3706388479 }, { 3706847232, 3706848511 }, { 3706848768, 3706849023 }, { 3706849280, 3706851327 }, { 3706851584, 3706880511 }, { 3706880768, 3706882815 }, { 3706883072, 3706884607 }, { 3706884864, 3706885631 }, { 3706885888, 3706887679 }, { 3706887936, 3706895103 }, { 3706895360, 3706900479 }, { 3706900736, 3706963199 }, { 3706963456, 3706968831 }, { 3706969088, 3706971903 }, { 3706972160, 3706974719 }, { 3706974976, 3706975999 }, { 3706976256, 3706978303 }, { 3707209728, 3707211775 }, { 3707240448, 3707568127 }, { 3707764736, 3708600319 }, { 3708616704, 3708813311 }, { 3715760128, 3715891199 }, { 3716186112, 3716187903 }, { 3716188160, 3716203775 }, { 3716204032, 3716415487 }, { 3716538368, 3716546559 }, { 3716677632, 3716808703 }, { 3719036928, 3719823359 }, { 3720347648, 3720859647 }, { 3720863744, 3723493375 }, { 3725590528, 3730833407 }, { 3732733952, 3732799487 }, { 3732832256, 3732865023 }, { 3732930560, 3733979135 }, { 3735027712, 3735289855 }, { 3735552000, 3739222015 }, { 3740270592, 3740925951 }, { 3741319168, 3742367743 }, { 3742629888, 3742760959 }, { 3743135744, 3743136767 }, { 3743272960, 3743273983 }, { 3745513472, 3749052415 }, { 3749216256, 3749249023 }, { 3749281792, 3749838847 }, { 3750756352, 3752067071 }, { 3752198144, 3752329215 }, { 3753902080, 3754033151 }, { 3754295296, 3754426367 }, { 3754491904, 3754557439 }, { 3754558464, 3754562559 }, { 3754563584, 3754591231 }, { 3754592256, 3754606591 }, { 3754608640, 3754610687 }, { 3754612736, 3754647551 }, { 3754649600, 3754688511 }, { 3754950656, 3755474943 }, { 3755737088, 3755868159 }, { 3755978752, 3755986943 }, { 3757047808, 3757834239 }, { 3757867008, 3757875519 }, { 3757875584, 3757876223 }, { 3757876480, 3757877759 }, { 3757878016, 3757879295 }, { 3757879552, 3757899775 }, { 3757965312, 3758063615 }, { 3758091264, 3758092287 }, { 3758095360, 3758095871 } };



////////// UEFI \\\\\\\\\\

#define FALSE ((BOOLEAN)0)
#define IN
#define OPTIONAL
#define OUT
#define TRUE ((BOOLEAN)1)

#define EFI_SUCCESS 0
#define EFI_LOAD_ERROR (1 | 0x8000000000000000)
#define EFI_INVALID_PARAMETER (2 | 0x8000000000000000)
#define EFI_UNSUPPORTED (3 | 0x8000000000000000)
#define EFI_BAD_BUFFER_SIZE (4 | 0x8000000000000000)
#define EFI_BUFFER_TOO_SMALL (5 | 0x8000000000000000)
#define EFI_NOT_READY (6 | 0x8000000000000000)
#define EFI_DEVICE_ERROR (7 | 0x8000000000000000)
#define EFI_WRITE_PROTECTED (8 | 0x8000000000000000)
#define EFI_OUT_OF_RESOURCES (9 | 0x8000000000000000)
#define EFI_VOLUME_CORRUPTED (10 | 0x8000000000000000)
#define EFI_VOLUME_FULL (11 | 0x8000000000000000)
#define EFI_NO_MEDIA (12 | 0x8000000000000000)
#define EFI_MEDIA_CHANGED (13 | 0x8000000000000000)
#define EFI_NOT_FOUND (14 | 0x8000000000000000)
#define EFI_ACCESS_DENIED (15 | 0x8000000000000000)
#define EFI_NO_RESPONSE (16 | 0x8000000000000000)
#define EFI_NO_MAPPING (17 | 0x8000000000000000)
#define EFI_TIMEOUT (18 | 0x8000000000000000)
#define EFI_NOT_STARTED (19 | 0x8000000000000000)
#define EFI_ALREADY_STARTED (20 | 0x8000000000000000)
#define EFI_ABORTED (21 | 0x8000000000000000)
#define EFI_ICMP_ERROR (22 | 0x8000000000000000)
#define EFI_TFTP_ERROR (23 | 0x8000000000000000)
#define EFI_PROTOCOL_ERROR (24 | 0x8000000000000000)
#define EFI_INCOMPATIBLE_VERSION (25 | 0x8000000000000000)
#define EFI_SECURITY_VIOLATION (26 | 0x8000000000000000)
#define EFI_CRC_ERROR (27 | 0x8000000000000000)
#define EFI_END_OF_MEDIA (28 | 0x8000000000000000)
#define EFI_END_OF_FILE (31 | 0x8000000000000000)
#define EFI_INVALID_LANGUAGE (32 | 0x8000000000000000)
#define EFI_COMPROMISED_DATA (33 | 0x8000000000000000)
#define EFI_IP_ADDRESS_CONFLICT (34 | 0x8000000000000000)
#define EFI_HTTP_ERROR (35 | 0x8000000000000000)

#define EFI_MP_SERVICES_PROTOCOL_GUID {0x3fdda605, 0xa76e, 0x4f46, {0xad, 0x29, 0x12, 0xf4, 0x53, 0x1b, 0x3d, 0x08}}
#define EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_GUID {0x0964e5b22, 0x6459, 0x11d2, {0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b}}
#define EFI_TCP4_PROTOCOL_GUID {0x65530BC7, 0xA359, 0x410f, {0xB0, 0x10, 0x5A, 0xAD, 0xC7, 0xEC, 0x2B, 0x62}}
#define EFI_TCP4_SERVICE_BINDING_PROTOCOL_GUID {0x00720665, 0x67EB, 0x4a99, {0xBA, 0xF7, 0xD3, 0xC3, 0x3A, 0x1C, 0x7C, 0xC9}}
#define EFI_UDP4_PROTOCOL_GUID {0x3ad9df29, 0x4501, 0x478d, {0xb1, 0xf8, 0x7f, 0x7f, 0xe7, 0x0e, 0x50, 0xf3}}
#define EFI_UDP4_SERVICE_BINDING_PROTOCOL_GUID {0x83f01464, 0x99bd, 0x45e5, {0xb3, 0x83, 0xaf, 0x63, 0x05, 0xd8, 0xe9, 0xe6}}

#define EFI_FILE_MODE_READ 0x0000000000000001
#define EFI_FILE_MODE_WRITE 0x0000000000000002
#define EFI_FILE_MODE_CREATE 0x8000000000000000
#define EFI_FILE_READ_ONLY 0x0000000000000001
#define EFI_FILE_HIDDEN 0x0000000000000002
#define EFI_FILE_SYSTEM 0x0000000000000004
#define EFI_FILE_RESERVED 0x0000000000000008
#define EFI_FILE_DIRECTORY 0x0000000000000010
#define EFI_FILE_ARCHIVE 0x0000000000000020
#define EFI_FILE_VALID_ATTR 0x0000000000000037
#define EFI_FILE_PROTOCOL_REVISION 0x00010000
#define EFI_FILE_PROTOCOL_REVISION2 0x00020000
#define EFI_FILE_PROTOCOL_LATEST_REVISION EFI_FILE_PROTOCOL_REVISION2
#define EFI_OPEN_PROTOCOL_BY_CHILD_CONTROLLER 0x00000008
#define EFI_OPEN_PROTOCOL_BY_DRIVER 0x00000010
#define EFI_OPEN_PROTOCOL_BY_HANDLE_PROTOCOL 0x00000001
#define EFI_OPEN_PROTOCOL_EXCLUSIVE 0x00000020
#define EFI_OPEN_PROTOCOL_GET_PROTOCOL 0x00000002
#define EFI_OPEN_PROTOCOL_TEST_PROTOCOL 0x00000004
#define EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_REVISION 0x00010000
#define EFI_UNSPECIFIED_TIMEZONE 0x07FF
#define END_OF_CPU_LIST 0xFFFFFFFF
#define EVT_NOTIFY_SIGNAL 0x00000200
#define EVT_NOTIFY_WAIT 0x00000100
#define EVT_RUNTIME 0x40000000
#define EVT_SIGNAL_EXIT_BOOT_SERVICES 0x00000201
#define EVT_SIGNAL_VIRTUAL_ADDRESS_CHANGE 0x60000202
#define EVT_TIMER 0x80000000
#define MAX_MCAST_FILTER_CNT 16
#define PROCESSOR_AS_BSP_BIT 0x00000001
#define PROCESSOR_ENABLED_BIT 0x00000002
#define PROCESSOR_HEALTH_STATUS_BIT 0x00000004
#define TPL_APPLICATION 4
#define TPL_CALLBACK 8
#define TPL_HIGH_LEVEL 31
#define TPL_NOTIFY 16

typedef unsigned char BOOLEAN;
typedef unsigned short CHAR16;
typedef void* EFI_EVENT;
typedef void* EFI_HANDLE;
typedef unsigned long long EFI_PHYSICAL_ADDRESS;
typedef unsigned long long EFI_STATUS;
typedef unsigned long long EFI_TPL;
typedef unsigned long long EFI_VIRTUAL_ADDRESS;

typedef enum
{
	AllocateAnyPages,
	AllocateMaxAddress,
	AllocateAddress,
	MaxAllocateType
} EFI_ALLOCATE_TYPE;

typedef enum
{
	EFI_NATIVE_INTERFACE
} EFI_INTERFACE_TYPE;

typedef enum
{
	AllHandles,
	ByRegisterNotify,
	ByProtocol
} EFI_LOCATE_SEARCH_TYPE;

typedef enum
{
	EfiReservedMemoryType,
	EfiLoaderCode,
	EfiLoaderData,
	EfiBootServicesCode,
	EfiBootServicesData,
	EfiRuntimeServicesCode,
	EfiRuntimeServicesData,
	EfiConventionalMemory,
	EfiUnusableMemory,
	EfiACPIReclaimMemory,
	EfiACPIMemoryNVS,
	EfiMemoryMappedIO,
	EfiMemoryMappedIOPortSpace,
	EfiPalCode,
	EfiPersistentMemory,
	EfiUnacceptedMemoryType,
	EfiMaxMemoryType
} EFI_MEMORY_TYPE;

typedef enum
{
	EfiResetCold,
	EfiResetWarm,
	EfiResetShutdown,
	EfiResetPlatformSpecific
} EFI_RESET_TYPE;

typedef enum
{
	Tcp4StateClosed = 0,
	Tcp4StateListen = 1,
	Tcp4StateSynSent = 2,
	Tcp4StateSynReceived = 3,
	Tcp4StateEstablished = 4,
	Tcp4StateFinWait1 = 5,
	Tcp4StateFinWait2 = 6,
	Tcp4StateClosing = 7,
	Tcp4StateTimeWait = 8,
	Tcp4StateCloseWait = 9,
	Tcp4StateLastAck = 10
} EFI_TCP4_CONNECTION_STATE;

typedef enum
{
	TimerCancel,
	TimerPeriodic,
	TimerRelative
} EFI_TIMER_DELAY;

typedef struct
{
	unsigned int Data1;
	unsigned short Data2;
	unsigned short Data3;
	unsigned char Data4[8];
} EFI_GUID;

typedef struct
{
	EFI_GUID CapsuleGuid;
	unsigned int HeaderSize;
	unsigned int Flags;
	unsigned int CapsuleImageSize;
} EFI_CAPSULE_HEADER;

typedef struct
{
	unsigned int Package;
	unsigned int Core;
	unsigned int Thread;
} EFI_CPU_PHYSICAL_LOCATION;

typedef struct
{
	unsigned char Type;
	unsigned char SubType;
	unsigned char Length[2];
} EFI_DEVICE_PATH_PROTOCOL;

typedef struct 
{
    EFI_EVENT Event;
    EFI_STATUS Status;
    unsigned long long BufferSize;
    void* Buffer;
} EFI_FILE_IO_TOKEN;

typedef struct
{
	unsigned short ScanCode;
	CHAR16 UnicodeChar;
} EFI_INPUT_KEY;

typedef struct
{
	unsigned char Addr[4];
} EFI_IPv4_ADDRESS;

typedef struct
{
	unsigned char DefaultProtocol;
	BOOLEAN AcceptAnyProtocol;
	BOOLEAN AcceptIcmpErrors;
	BOOLEAN AcceptBroadcast;
	BOOLEAN AcceptPromiscuous;
	BOOLEAN UseDefaultAddress;
	EFI_IPv4_ADDRESS StationAddress;
	EFI_IPv4_ADDRESS SubnetMask;
	unsigned char TypeOfService;
	unsigned char TimeToLive;
	BOOLEAN DoNotFragment;
	BOOLEAN RawData;
	unsigned int ReceiveTimeout;
	unsigned int TransmitTimeout;
} EFI_IP4_CONFIG_DATA;

typedef struct
{
	unsigned char Type;
	unsigned char Code;
} EFI_IP4_ICMP_TYPE;

typedef struct
{
	EFI_IPv4_ADDRESS SubnetAddress;
	EFI_IPv4_ADDRESS SubnetMask;
	EFI_IPv4_ADDRESS GatewayAddress;
} EFI_IP4_ROUTE_TABLE;

typedef struct
{
	BOOLEAN IsStarted;
	unsigned int MaxPacketSize;
	EFI_IP4_CONFIG_DATA ConfigData;
	BOOLEAN IsConfigured;
	unsigned int GroupCount;
	EFI_IPv4_ADDRESS* GroupTable;
	unsigned int RouteCount;
	EFI_IP4_ROUTE_TABLE* RouteTable;
	unsigned int IcmpTypeCount;
	EFI_IP4_ICMP_TYPE* IcmpTypeList;
} EFI_IP4_MODE_DATA;

typedef struct
{
	unsigned char Addr[32];
} EFI_MAC_ADDRESS;

typedef struct
{
	unsigned int ReceivedQueueTimeoutValue;
	unsigned int TransmitQueueTimeoutValue;
	unsigned short ProtocolTypeFilter;
	BOOLEAN EnableUnicastReceive;
	BOOLEAN EnableMulticastReceive;
	BOOLEAN EnableBroadcastReceive;
	BOOLEAN EnablePromiscuousReceive;
	BOOLEAN FlushQueuesOnReset;
	BOOLEAN EnableReceiveTimestamps;
	BOOLEAN DisableBackgroundPolling;
} EFI_MANAGED_NETWORK_CONFIG_DATA;

typedef struct
{
	unsigned int Type;
	EFI_PHYSICAL_ADDRESS PhysicalStart;
	EFI_VIRTUAL_ADDRESS VirtualStart;
	unsigned long long NumberOfPages;
	unsigned long long Attribute;
} EFI_MEMORY_DESCRIPTOR;

typedef struct
{
	EFI_HANDLE AgentHandle;
	EFI_HANDLE ControllerHandle;
	unsigned int Attributes;
	unsigned int OpenCount;
} EFI_OPEN_PROTOCOL_INFORMATION_ENTRY;

typedef struct
{
	unsigned long long ProcessorId;
	unsigned int StatusFlag;
	EFI_CPU_PHYSICAL_LOCATION Location;
} EFI_PROCESSOR_INFORMATION;

typedef struct
{
	unsigned int State;
	unsigned int HwAddressSize;
	unsigned int MediaHeaderSize;
	unsigned int MaxPacketSize;
	unsigned int NvRamSize;
	unsigned int NvRamAccessSize;
	unsigned int ReceiveFilterMask;
	unsigned int ReceiveFilterSetting;
	unsigned int MaxMCastFilterCount;
	unsigned int MCastFilterCount;
	EFI_MAC_ADDRESS MCastFilter[MAX_MCAST_FILTER_CNT];
	EFI_MAC_ADDRESS CurrentAddress;
	EFI_MAC_ADDRESS BroadcastAddress;
	EFI_MAC_ADDRESS PermanentAddress;
	unsigned char IfType;
	BOOLEAN MacAddressChangeable;
	BOOLEAN MultipleTxSupported;
	BOOLEAN MediaPresentSupported;
	BOOLEAN MediaPresent;
} EFI_SIMPLE_NETWORK_MODE;

typedef struct
{
	unsigned long long Signature;
	unsigned int Revision;
	unsigned int HeaderSize;
	unsigned int CRC32;
	unsigned int Reserved;
} EFI_TABLE_HEADER;

typedef struct
{
	BOOLEAN UseDefaultAddress;
	EFI_IPv4_ADDRESS StationAddress;
	EFI_IPv4_ADDRESS SubnetMask;
	unsigned short StationPort;
	EFI_IPv4_ADDRESS RemoteAddress;
	unsigned short RemotePort;
	BOOLEAN ActiveFlag;
} EFI_TCP4_ACCESS_POINT;

typedef struct
{
	EFI_EVENT Event;
	EFI_STATUS Status;
} EFI_TCP4_COMPLETION_TOKEN;

typedef struct
{
	EFI_TCP4_COMPLETION_TOKEN CompletionToken;
	BOOLEAN AbortOnClose;
} EFI_TCP4_CLOSE_TOKEN;

typedef struct
{
	unsigned int ReceiveBufferSize;
	unsigned int SendBufferSize;
	unsigned int MaxSynBackLog;
	unsigned int ConnectionTimeout;
	unsigned int DataRetries;
	unsigned int FinTimeout;
	unsigned int TimeWaitTimeout;
	unsigned int KeepAliveProbes;
	unsigned int KeepAliveTime;
	unsigned int KeepAliveInterval;
	BOOLEAN EnableNagle;
	BOOLEAN EnableTimeStamp;
	BOOLEAN EnableWindowScaling;
	BOOLEAN EnableSelectiveAck;
	BOOLEAN EnablePathMtuDiscovery;
} EFI_TCP4_OPTION;

typedef struct
{
	unsigned char TypeOfService;
	unsigned char TimeToLive;
	EFI_TCP4_ACCESS_POINT AccessPoint;
	EFI_TCP4_OPTION* ControlOption;
} EFI_TCP4_CONFIG_DATA;

typedef struct
{
	EFI_TCP4_COMPLETION_TOKEN CompletionToken;
} EFI_TCP4_CONNECTION_TOKEN;

typedef struct
{
	unsigned int FragmentLength;
	void* FragmentBuffer;
} EFI_TCP4_FRAGMENT_DATA;

typedef struct
{
	BOOLEAN UrgentFlag;
	unsigned int DataLength;
	unsigned int FragmentCount;
	EFI_TCP4_FRAGMENT_DATA FragmentTable[1];
} EFI_TCP4_RECEIVE_DATA;

typedef struct
{
	BOOLEAN Push;
	BOOLEAN Urgent;
	unsigned int DataLength;
	unsigned int FragmentCount;
	EFI_TCP4_FRAGMENT_DATA FragmentTable[1];
} EFI_TCP4_TRANSMIT_DATA;

typedef struct
{
	EFI_TCP4_COMPLETION_TOKEN CompletionToken;
	union
    {
		EFI_TCP4_RECEIVE_DATA* RxData;
		EFI_TCP4_TRANSMIT_DATA* TxData;
	} Packet;
} EFI_TCP4_IO_TOKEN;

typedef struct
{
	EFI_TCP4_COMPLETION_TOKEN CompletionToken;
	EFI_HANDLE NewChildHandle;
} EFI_TCP4_LISTEN_TOKEN;

typedef struct
{
	unsigned short Year;
	unsigned char Month;
	unsigned char Day;
	unsigned char Hour;
	unsigned char Minute;
	unsigned char Second;
	unsigned char Pad1;
	unsigned int Nanosecond;
	short TimeZone;
	unsigned char Daylight;
	unsigned char Pad2;
} EFI_TIME;

typedef struct
{
	unsigned int Resolution;
	unsigned int Accuracy;
	BOOLEAN SetsToZero;
} EFI_TIME_CAPABILITIES;

typedef struct
{
    EFI_IPv4_ADDRESS SourceAddress;
    unsigned short SourcePort;
    EFI_IPv4_ADDRESS DestinationAddress;
    unsigned short DestinationPort;
} EFI_UDP4_SESSION_DATA;

typedef struct
{
    unsigned int FragmentLength;
    void* FragmentBuffer;
} EFI_UDP4_FRAGMENT_DATA;

typedef struct
{
    EFI_TIME TimeStamp;
    EFI_EVENT RecycleSignal;
    EFI_UDP4_SESSION_DATA UdpSession;
    unsigned int DataLength;
    unsigned int FragmentCount;
    EFI_UDP4_FRAGMENT_DATA FragmentTable[1];
} EFI_UDP4_RECEIVE_DATA;

typedef struct
{
    EFI_UDP4_SESSION_DATA* UdpSessionData;
    EFI_IPv4_ADDRESS* GatewayAddress;
    unsigned int DataLength;
    unsigned int FragmentCount;
    EFI_UDP4_FRAGMENT_DATA FragmentTable[1];
} EFI_UDP4_TRANSMIT_DATA;

typedef struct
{
    EFI_EVENT Event;
    EFI_STATUS Status;
    union
    {
        EFI_UDP4_RECEIVE_DATA* RxData;
        EFI_UDP4_TRANSMIT_DATA* TxData;
    } Packet;
} EFI_UDP4_COMPLETION_TOKEN;

typedef struct
{
    BOOLEAN AcceptBroadcast;
    BOOLEAN AcceptPromiscuous;
    BOOLEAN AcceptAnyPort;
    BOOLEAN AllowDuplicatePort;
    unsigned char TypeOfService;
    unsigned char TimeToLive;
    BOOLEAN DoNotFragment;
    unsigned int ReceiveTimeout;
    unsigned int TransmitTimeout;
    BOOLEAN UseDefaultAddress;
    EFI_IPv4_ADDRESS StationAddress;
    EFI_IPv4_ADDRESS SubnetMask;
    unsigned short StationPort;
    EFI_IPv4_ADDRESS RemoteAddress;
    unsigned short RemotePort;
} EFI_UDP4_CONFIG_DATA;

typedef struct
{
	int MaxMode;
	int Mode;
	int Attribute;
	int CursorColumn;
	int CursorRow;
	BOOLEAN CursorVisible;
} SIMPLE_TEXT_OUTPUT_MODE;

typedef EFI_STATUS(__cdecl *EFI_ALLOCATE_PAGES) (IN EFI_ALLOCATE_TYPE Type, IN EFI_MEMORY_TYPE MemoryType, IN unsigned long long Pages, IN OUT EFI_PHYSICAL_ADDRESS* Memory);
typedef EFI_STATUS(__cdecl *EFI_ALLOCATE_POOL) (IN EFI_MEMORY_TYPE PoolType, IN unsigned long long Size, OUT void** Buffer);
typedef void(__cdecl *EFI_AP_PROCEDURE) (IN void* ProcedureArgument);
typedef EFI_STATUS(__cdecl *EFI_CALCULATE_CRC32) (IN void* Data, IN unsigned long long DataSize, OUT unsigned int* Crc32);
typedef EFI_STATUS(__cdecl *EFI_CHECK_EVENT) (IN EFI_EVENT Event);
typedef EFI_STATUS(__cdecl *EFI_CLOSE_EVENT) (IN EFI_EVENT Event);
typedef EFI_STATUS(__cdecl *EFI_CLOSE_PROTOCOL) (IN EFI_HANDLE Handle, IN EFI_GUID* Protocol, IN EFI_HANDLE AgentHandle, IN EFI_HANDLE ControllerHandle);
typedef EFI_STATUS(__cdecl *EFI_CONNECT_CONTROLLER) (IN EFI_HANDLE ControllerHandle, IN EFI_HANDLE* DriverImageHandle OPTIONAL, IN EFI_DEVICE_PATH_PROTOCOL* RemainingDevicePath OPTIONAL, IN BOOLEAN Recursive);
typedef EFI_STATUS(__cdecl *EFI_CONVERT_POINTER) (IN unsigned long long DebugDisposition, IN OUT void** Address);
typedef void(__cdecl *EFI_COPY_MEM) (IN void* Destination, IN void* Source, IN unsigned long long Length);
typedef EFI_STATUS(__cdecl *EFI_CREATE_EVENT) (IN unsigned int Type, IN EFI_TPL NotifyTpl, IN void* NotifyFunction, OPTIONAL IN void* NotifyContext, OPTIONAL OUT EFI_EVENT* Event);
typedef EFI_STATUS(__cdecl *EFI_CREATE_EVENT_EX) (IN unsigned int Type, IN EFI_TPL NotifyTpl, IN void* NotifyFunction OPTIONAL, IN const void* NotifyContext OPTIONAL, IN const EFI_GUID* EventGroup OPTIONAL, OUT EFI_EVENT* Event);
typedef EFI_STATUS(__cdecl *EFI_DISCONNECT_CONTROLLER) (IN EFI_HANDLE ControllerHandle, IN EFI_HANDLE DriverImageHandle OPTIONAL, IN EFI_HANDLE ChildHandle OPTIONAL);
typedef void(__cdecl *EFI_EVENT_NOTIFY) (IN EFI_EVENT Event, IN void* Context);
typedef EFI_STATUS(__cdecl *EFI_EXIT) (IN EFI_HANDLE ImageHandle, IN EFI_STATUS ExitStatus, IN unsigned long long ExitDataSize, IN CHAR16* ExitData OPTIONAL);
typedef EFI_STATUS(__cdecl *EFI_EXIT_BOOT_SERVICES) (IN EFI_HANDLE ImageHandle, IN unsigned long long MapKey);
typedef EFI_STATUS(__cdecl* EFI_FILE_CLOSE) (IN void* This);
typedef EFI_STATUS(__cdecl* EFI_FILE_DELETE) (IN void* This);
typedef EFI_STATUS(__cdecl* EFI_FILE_FLUSH) (IN void* This);
typedef EFI_STATUS(__cdecl* EFI_FILE_FLUSH_EX) (IN void* This, IN OUT EFI_FILE_IO_TOKEN* Token);
typedef EFI_STATUS(__cdecl* EFI_FILE_GET_INFO) (IN void* This, IN EFI_GUID* InformationType, IN OUT unsigned long long* BufferSize, OUT void* Buffer);
typedef EFI_STATUS(__cdecl* EFI_FILE_GET_POSITION) (IN void* This, OUT unsigned long long* Position);
typedef EFI_STATUS(__cdecl* EFI_FILE_OPEN) (IN void* This, OUT void** NewHandle, IN CHAR16* FileName, IN unsigned long long OpenMode, IN unsigned long long Attributes);
typedef EFI_STATUS(__cdecl* EFI_FILE_OPEN_EX) (IN void* This, OUT void** NewHandle, IN CHAR16* FileName, IN unsigned long long OpenMode, IN unsigned long long Attributes, IN OUT EFI_FILE_IO_TOKEN* Token);
typedef EFI_STATUS(__cdecl* EFI_FILE_READ) (IN void* This, IN OUT unsigned long long* BufferSize, OUT void* Buffer);
typedef EFI_STATUS(__cdecl* EFI_FILE_READ_EX) (IN void* This, IN OUT EFI_FILE_IO_TOKEN* Token);
typedef EFI_STATUS(__cdecl* EFI_FILE_SET_INFO) (IN void* This, IN EFI_GUID* InformationType, IN unsigned long long BufferSize, IN void* Buffer);
typedef EFI_STATUS(__cdecl* EFI_FILE_SET_POSITION) (IN void* This, IN unsigned long long Position);
typedef EFI_STATUS(__cdecl* EFI_FILE_WRITE) (IN void* This, IN OUT unsigned long long* BufferSize, IN void* Buffer);
typedef EFI_STATUS(__cdecl* EFI_FILE_WRITE_EX) (IN void* This, IN OUT EFI_FILE_IO_TOKEN* Token);
typedef EFI_STATUS(__cdecl *EFI_FREE_PAGES) (IN EFI_PHYSICAL_ADDRESS Memory, IN unsigned long long Pages);
typedef EFI_STATUS(__cdecl *EFI_FREE_POOL) (IN void* Buffer);
typedef EFI_STATUS(__cdecl *EFI_GET_MEMORY_MAP) (IN OUT unsigned long long* MemoryMapSize, OUT EFI_MEMORY_DESCRIPTOR* MemoryMap, OUT unsigned long long* MapKey, OUT unsigned long long* DescriptorSize, OUT unsigned int* DescriptorVersion);
typedef EFI_STATUS(__cdecl *EFI_GET_NEXT_HIGH_MONO_COUNT) (OUT unsigned int* HighCount);
typedef EFI_STATUS(__cdecl *EFI_GET_NEXT_MONOTONIC_COUNT) (OUT unsigned long long* Count);
typedef EFI_STATUS(__cdecl *EFI_GET_NEXT_VARIABLE_NAME) (IN OUT unsigned long long* VariableNameSize, IN OUT CHAR16* VariableName, IN OUT EFI_GUID* VendorGuid);
typedef EFI_STATUS(__cdecl *EFI_GET_TIME) (OUT EFI_TIME* Time, OUT EFI_TIME_CAPABILITIES* Capabilities OPTIONAL);
typedef EFI_STATUS(__cdecl *EFI_GET_VARIABLE) (IN CHAR16* VariableName, IN EFI_GUID* VendorGuid, OUT unsigned int* Attributes OPTIONAL, IN OUT unsigned long long* DataSize, OUT void* Data);
typedef EFI_STATUS(__cdecl *EFI_GET_WAKEUP_TIME) (OUT BOOLEAN* Enabled, OUT BOOLEAN* Pending, OUT EFI_TIME* Time);
typedef EFI_STATUS(__cdecl *EFI_HANDLE_PROTOCOL) (IN EFI_HANDLE Handle, IN EFI_GUID* Protocol, OUT void** Interface);
typedef EFI_STATUS(__cdecl *EFI_IMAGE_LOAD) (IN BOOLEAN BootPolicy, IN EFI_HANDLE ParentImageHandle, IN EFI_DEVICE_PATH_PROTOCOL* DevicePath, IN void* SourceBuffer OPTIONAL, IN unsigned long long SourceSize, OUT EFI_HANDLE* ImageHandle);
typedef EFI_STATUS(__cdecl *EFI_IMAGE_START) (IN EFI_HANDLE ImageHandle, OUT unsigned long long* ExitDataSize, OUT CHAR16** ExitData OPTIONAL);
typedef EFI_STATUS(__cdecl *EFI_IMAGE_UNLOAD) (IN EFI_HANDLE ImageHandle);
typedef EFI_STATUS(__cdecl *EFI_INPUT_READ_KEY) (IN void* This, OUT EFI_INPUT_KEY* Key);
typedef EFI_STATUS(__cdecl *EFI_INPUT_RESET) (IN void* This, IN BOOLEAN ExtendedVerification);
typedef EFI_STATUS(__cdecl *EFI_INSTALL_CONFIGURATION_TABLE) (IN EFI_GUID* Guid, IN void* Table);
typedef EFI_STATUS(__cdecl *EFI_INSTALL_MULTIPLE_PROTOCOL_INTERFACES) (IN OUT EFI_HANDLE* Handle, ...);
typedef EFI_STATUS(__cdecl *EFI_INSTALL_PROTOCOL_INTERFACE) (IN OUT EFI_HANDLE* Handle, IN EFI_GUID* Protocol, IN EFI_INTERFACE_TYPE InterfaceType, IN void* Interface);
typedef EFI_STATUS(__cdecl *EFI_LOCATE_DEVICE_PATH) (IN EFI_GUID* Protocol, IN OUT EFI_DEVICE_PATH_PROTOCOL** DevicePath, OUT EFI_HANDLE* Device);
typedef EFI_STATUS(__cdecl *EFI_LOCATE_HANDLE) (IN EFI_LOCATE_SEARCH_TYPE SearchType, IN EFI_GUID* Protocol OPTIONAL, IN void* SearchKey OPTIONAL, IN OUT unsigned long long* BufferSize, OUT EFI_HANDLE* Buffer);
typedef EFI_STATUS(__cdecl *EFI_LOCATE_HANDLE_BUFFER) (IN EFI_LOCATE_SEARCH_TYPE SearchType, IN EFI_GUID* Protocol OPTIONAL, IN void* SearchKey OPTIONAL, OUT unsigned long long* NoHandles, OUT EFI_HANDLE** Buffer);
typedef EFI_STATUS(__cdecl *EFI_LOCATE_PROTOCOL) (IN EFI_GUID* Protocol, IN void* Registration OPTIONAL, OUT void** Interface);
typedef EFI_STATUS(__cdecl *EFI_MP_SERVICES_ENABLEDISABLEAP) (IN void* This, IN unsigned long long ProcessorNumber, IN BOOLEAN EnableAP, IN unsigned int* HealthFlag OPTIONAL);
typedef EFI_STATUS(__cdecl *EFI_MP_SERVICES_GET_NUMBER_OF_PROCESSORS) (IN void* This, OUT unsigned long long* NumberOfProcessors, OUT unsigned long long* NumberOfEnabledProcessors);
typedef EFI_STATUS(__cdecl *EFI_MP_SERVICES_GET_PROCESSOR_INFO) (IN void* This, IN unsigned long long ProcessorNumber, OUT EFI_PROCESSOR_INFORMATION* ProcessorInfoBuffer);
typedef EFI_STATUS(__cdecl *EFI_MP_SERVICES_STARTUP_ALL_APS) (IN void* This, IN EFI_AP_PROCEDURE Procedure, IN BOOLEAN SingleThread, IN EFI_EVENT WaitEvent OPTIONAL, IN unsigned long long TimeoutInMicroSeconds, IN void* ProcedureArgument OPTIONAL, OUT unsigned long long** FailedCpuList OPTIONAL);
typedef EFI_STATUS(__cdecl *EFI_MP_SERVICES_STARTUP_THIS_AP) (IN void* This, IN EFI_AP_PROCEDURE Procedure, IN unsigned long long ProcessorNumber, IN EFI_EVENT WaitEvent OPTIONAL, IN unsigned long long TimeoutInMicroseconds, IN void* ProcedureArgument OPTIONAL, OUT BOOLEAN* Finished OPTIONAL);
typedef EFI_STATUS(__cdecl *EFI_MP_SERVICES_SWITCH_BSP) (IN void* This, IN unsigned long long ProcessorNumber, IN BOOLEAN EnableOldBSP);
typedef EFI_STATUS(__cdecl *EFI_MP_SERVICES_WHOAMI) (IN void* This, OUT unsigned long long* ProcessorNumber);
typedef EFI_STATUS(__cdecl *EFI_OPEN_PROTOCOL) (IN EFI_HANDLE Handle, IN EFI_GUID* Protocol, OUT void** Interface OPTIONAL, IN EFI_HANDLE AgentHandle, IN EFI_HANDLE ControllerHandle, IN unsigned int Attributes);
typedef EFI_STATUS(__cdecl *EFI_OPEN_PROTOCOL_INFORMATION) (IN EFI_HANDLE Handle, IN EFI_GUID* Protocol, OUT EFI_OPEN_PROTOCOL_INFORMATION_ENTRY** EntryBuffer, OUT unsigned long long* EntryCount);
typedef EFI_STATUS(__cdecl *EFI_PROTOCOLS_PER_HANDLE) (IN EFI_HANDLE Handle, OUT EFI_GUID*** ProtocolBuffer, OUT unsigned long long* ProtocolBufferCount);
typedef EFI_STATUS(__cdecl *EFI_QUERY_CAPSULE_CAPABILITIES) (IN EFI_CAPSULE_HEADER** CapsuleHeaderArray, IN unsigned long long CapsuleCount, OUT unsigned long long* MaximumCapsuleSize, OUT EFI_RESET_TYPE* ResetType);
typedef EFI_STATUS(__cdecl *EFI_QUERY_VARIABLE_INFO) (IN unsigned int Attributes, OUT unsigned long long* MaximumVariableStorageSize, OUT unsigned long long* RemainingVariableStorageSize, OUT unsigned long long* MaximumVariableSize);
typedef EFI_TPL(__cdecl *EFI_RAISE_TPL) (IN EFI_TPL NewTpl);
typedef EFI_STATUS(__cdecl *EFI_REGISTER_PROTOCOL_NOTIFY) (IN EFI_GUID* Protocol, IN EFI_EVENT Event, OUT void** Registration);
typedef EFI_STATUS(__cdecl *EFI_REINSTALL_PROTOCOL_INTERFACE) (IN EFI_HANDLE Handle, IN EFI_GUID* Protocol, IN void* OldInterface, IN void* NewInterface);
typedef EFI_STATUS(__cdecl *EFI_RESET_SYSTEM) (IN EFI_RESET_TYPE ResetType, IN EFI_STATUS ResetStatus, IN unsigned long long DataSize, IN CHAR16* ResetData OPTIONAL);
typedef void(__cdecl *EFI_RESTORE_TPL) (IN EFI_TPL OldTpl);
typedef EFI_STATUS(__cdecl *EFI_SERVICE_BINDING_CREATE_CHILD) (IN void* This, IN OUT EFI_HANDLE* ChildHandle);
typedef EFI_STATUS(__cdecl *EFI_SERVICE_BINDING_DESTROY_CHILD) (IN void* This, IN EFI_HANDLE ChildHandle);
typedef void(__cdecl *EFI_SET_MEM) (IN void* Buffer, IN unsigned long long Size, IN unsigned char Value);
typedef EFI_STATUS(__cdecl *EFI_SET_TIME) (IN EFI_TIME* Time);
typedef EFI_STATUS(__cdecl *EFI_SET_TIMER) (IN EFI_EVENT Event, IN EFI_TIMER_DELAY Type, IN unsigned long long TriggerTime);
typedef EFI_STATUS(__cdecl *EFI_SET_VARIABLE) (IN CHAR16* VariableName, IN EFI_GUID* VendorGuid, IN unsigned int Attributes, IN unsigned long long DataSize, IN void* Data);
typedef EFI_STATUS(__cdecl *EFI_SET_VIRTUAL_ADDRESS_MAP) (IN unsigned long long MemoryMapSize, IN unsigned long long DescriptorSize, IN unsigned int DescriptorVersion, IN EFI_MEMORY_DESCRIPTOR* VirtualMap);
typedef EFI_STATUS(__cdecl *EFI_SET_WAKEUP_TIME) (IN BOOLEAN Enable, IN EFI_TIME* Time OPTIONAL);
typedef EFI_STATUS(__cdecl *EFI_SET_WATCHDOG_TIMER) (IN unsigned long long Timeout, IN unsigned long long WatchdogCode, IN unsigned long long DataSize, IN CHAR16* WatchdogData OPTIONAL);
typedef EFI_STATUS(__cdecl *EFI_SIGNAL_EVENT) (IN EFI_EVENT Event);
typedef EFI_STATUS(__cdecl* EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_OPEN_VOLUME) (IN void* This, OUT void** Root);
typedef EFI_STATUS(__cdecl *EFI_STALL) (IN unsigned long long Microseconds);
typedef EFI_STATUS(__cdecl *EFI_TCP4_ACCEPT) (IN void* This, IN EFI_TCP4_LISTEN_TOKEN* ListenToken);
typedef EFI_STATUS(__cdecl *EFI_TCP4_CANCEL)(IN void* This, IN EFI_TCP4_COMPLETION_TOKEN* Token OPTIONAL);
typedef EFI_STATUS(__cdecl *EFI_TCP4_CLOSE)(IN void* This, IN EFI_TCP4_CLOSE_TOKEN* CloseToken);
typedef EFI_STATUS(__cdecl *EFI_TCP4_CONFIGURE) (IN void* This, IN EFI_TCP4_CONFIG_DATA* TcpConfigData OPTIONAL);
typedef EFI_STATUS(__cdecl *EFI_TCP4_CONNECT) (IN void* This, IN EFI_TCP4_CONNECTION_TOKEN* ConnectionToken);
typedef EFI_STATUS(__cdecl *EFI_TCP4_GET_MODE_DATA) (IN void* This, OUT EFI_TCP4_CONNECTION_STATE* Tcp4State OPTIONAL, OUT EFI_TCP4_CONFIG_DATA* Tcp4ConfigData OPTIONAL, OUT EFI_IP4_MODE_DATA* Ip4ModeData OPTIONAL, OUT EFI_MANAGED_NETWORK_CONFIG_DATA* MnpConfigData OPTIONAL, OUT EFI_SIMPLE_NETWORK_MODE* SnpModeData OPTIONAL);
typedef EFI_STATUS(__cdecl *EFI_TCP4_POLL) (IN void* This);
typedef EFI_STATUS(__cdecl *EFI_TCP4_RECEIVE) (IN void* This, IN EFI_TCP4_IO_TOKEN* Token);
typedef EFI_STATUS(__cdecl *EFI_TCP4_ROUTES) (IN void* This, IN BOOLEAN DeleteRoute, IN EFI_IPv4_ADDRESS* SubnetAddress, IN EFI_IPv4_ADDRESS* SubnetMask, IN EFI_IPv4_ADDRESS* GatewayAddress);
typedef EFI_STATUS(__cdecl *EFI_TCP4_TRANSMIT) (IN void* This, IN EFI_TCP4_IO_TOKEN* Token);
typedef EFI_STATUS(__cdecl *EFI_TEXT_CLEAR_SCREEN) (IN void* This);
typedef EFI_STATUS(__cdecl *EFI_TEXT_ENABLE_CURSOR) (IN void* This, IN BOOLEAN Visible);
typedef EFI_STATUS(__cdecl *EFI_TEXT_QUERY_MODE) (IN void* This, IN unsigned long long ModeNumber, OUT unsigned long long* Columns, OUT unsigned long long* Rows);
typedef EFI_STATUS(__cdecl *EFI_TEXT_RESET) (IN void* This, IN BOOLEAN ExtendedVerification);
typedef EFI_STATUS(__cdecl *EFI_TEXT_SET_ATTRIBUTE) (IN void* This, IN unsigned long long Attribute);
typedef EFI_STATUS(__cdecl *EFI_TEXT_SET_CURSOR_POSITION) (IN void* This, IN unsigned long long Column, IN unsigned long long Row);
typedef EFI_STATUS(__cdecl *EFI_TEXT_SET_MODE) (IN void* This, IN unsigned long long ModeNumber);
typedef EFI_STATUS(__cdecl *EFI_TEXT_STRING) (IN void* This, IN CHAR16* String);
typedef EFI_STATUS(__cdecl *EFI_TEXT_TEST_STRING) (IN void* This, IN CHAR16* String);
typedef EFI_STATUS(__cdecl *EFI_UDP4_CANCEL)(IN void* This, IN EFI_UDP4_COMPLETION_TOKEN* Token OPTIONAL);
typedef EFI_STATUS(__cdecl *EFI_UDP4_CONFIGURE) (IN void* This, IN EFI_UDP4_CONFIG_DATA* UdpConfigData OPTIONAL);
typedef EFI_STATUS(__cdecl *EFI_UDP4_GET_MODE_DATA) (IN void* This, OUT EFI_UDP4_CONFIG_DATA* Udp4ConfigData OPTIONAL, OUT EFI_IP4_MODE_DATA* Ip4ModeData OPTIONAL, OUT EFI_MANAGED_NETWORK_CONFIG_DATA* MnpConfigData OPTIONAL, OUT EFI_SIMPLE_NETWORK_MODE* SnpModeData OPTIONAL);
typedef EFI_STATUS(__cdecl *EFI_UDP4_GROUPS) (IN void* This, IN BOOLEAN JoinFlag, IN EFI_IPv4_ADDRESS* MulticastAddress OPTIONAL);
typedef EFI_STATUS(__cdecl *EFI_UDP4_POLL) (IN void* This);
typedef EFI_STATUS(__cdecl *EFI_UDP4_RECEIVE) (IN void* This, IN EFI_UDP4_COMPLETION_TOKEN* Token);
typedef EFI_STATUS(__cdecl *EFI_UDP4_ROUTES) (IN void* This, IN BOOLEAN DeleteRoute, IN EFI_IPv4_ADDRESS* SubnetAddress, IN EFI_IPv4_ADDRESS* SubnetMask, IN EFI_IPv4_ADDRESS* GatewayAddress);
typedef EFI_STATUS(__cdecl *EFI_UDP4_TRANSMIT) (IN void* This, IN EFI_UDP4_COMPLETION_TOKEN* Token);
typedef EFI_STATUS(__cdecl *EFI_UNINSTALL_MULTIPLE_PROTOCOL_INTERFACES) (IN EFI_HANDLE Handle, ...);
typedef EFI_STATUS(__cdecl *EFI_UNINSTALL_PROTOCOL_INTERFACE) (IN EFI_HANDLE Handle, IN EFI_GUID* Protocol, IN void* Interface);
typedef EFI_STATUS(__cdecl *EFI_UPDATE_CAPSULE) (IN EFI_CAPSULE_HEADER** CapsuleHeaderArray, IN unsigned long long CapsuleCount, IN EFI_PHYSICAL_ADDRESS ScatterGatherList OPTIONAL);
typedef EFI_STATUS(__cdecl *EFI_WAIT_FOR_EVENT) (IN unsigned long long NumberOfEvents, IN EFI_EVENT* Event, OUT unsigned long long* Index);

typedef struct
{
	EFI_TABLE_HEADER Hdr;
	EFI_RAISE_TPL RaiseTPL;
	EFI_RESTORE_TPL RestoreTPL;
	EFI_ALLOCATE_PAGES AllocatePages;
	EFI_FREE_PAGES FreePages;
	EFI_GET_MEMORY_MAP GetMemoryMap;
	EFI_ALLOCATE_POOL AllocatePool;
	EFI_FREE_POOL FreePool;
	EFI_CREATE_EVENT CreateEvent;
	EFI_SET_TIMER SetTimer;
	EFI_WAIT_FOR_EVENT WaitForEvent;
	EFI_SIGNAL_EVENT SignalEvent;
	EFI_CLOSE_EVENT CloseEvent;
	EFI_CHECK_EVENT CheckEvent;
	EFI_INSTALL_PROTOCOL_INTERFACE InstallProtocolInterface;
	EFI_REINSTALL_PROTOCOL_INTERFACE ReinstallProtocolInterface;
	EFI_UNINSTALL_PROTOCOL_INTERFACE UninstallProtocolInterface;
	EFI_HANDLE_PROTOCOL HandleProtocol;
	void* Reserved;
	EFI_REGISTER_PROTOCOL_NOTIFY RegisterProtocolNotify;
	EFI_LOCATE_HANDLE LocateHandle;
	EFI_LOCATE_DEVICE_PATH LocateDevicePath;
	EFI_INSTALL_CONFIGURATION_TABLE InstallConfigurationTable;
	EFI_IMAGE_LOAD LoadImage;
	EFI_IMAGE_START StartImage;
	EFI_EXIT Exit;
	EFI_IMAGE_UNLOAD UnloadImage;
	EFI_EXIT_BOOT_SERVICES ExitBootServices;
	EFI_GET_NEXT_MONOTONIC_COUNT GetNextMonotonicCount;
	EFI_STALL Stall;
	EFI_SET_WATCHDOG_TIMER SetWatchdogTimer;
	EFI_CONNECT_CONTROLLER ConnectController;
	EFI_DISCONNECT_CONTROLLER DisconnectController;
	EFI_OPEN_PROTOCOL OpenProtocol;
	EFI_CLOSE_PROTOCOL CloseProtocol;
	EFI_OPEN_PROTOCOL_INFORMATION OpenProtocolInformation;
	EFI_PROTOCOLS_PER_HANDLE ProtocolsPerHandle;
	EFI_LOCATE_HANDLE_BUFFER LocateHandleBuffer;
	EFI_LOCATE_PROTOCOL LocateProtocol;
	EFI_INSTALL_MULTIPLE_PROTOCOL_INTERFACES InstallMultipleProtocolInterfaces;
	EFI_UNINSTALL_MULTIPLE_PROTOCOL_INTERFACES UninstallMultipleProtocolInterfaces;
	EFI_CALCULATE_CRC32 CalculateCrc32;
	EFI_COPY_MEM CopyMem;
	EFI_SET_MEM SetMem;
	EFI_CREATE_EVENT_EX CreateEventEx;
} EFI_BOOT_SERVICES;

typedef struct
{
	EFI_GUID VendorGuid;
	void* VendorTable;
} EFI_CONFIGURATION_TABLE;

typedef struct
{
    unsigned long long Revision;
    EFI_FILE_OPEN Open;
    EFI_FILE_CLOSE Close;
    EFI_FILE_DELETE Delete;
    EFI_FILE_READ Read;
    EFI_FILE_WRITE Write;
    EFI_FILE_GET_POSITION GetPosition;
    EFI_FILE_SET_POSITION SetPosition;
    EFI_FILE_GET_INFO GetInfo;
    EFI_FILE_SET_INFO SetInfo;
    EFI_FILE_FLUSH Flush;
    EFI_FILE_OPEN_EX OpenEx;
    EFI_FILE_READ_EX ReadEx;
    EFI_FILE_WRITE_EX WriteEx;
    EFI_FILE_FLUSH_EX FlushEx;
} EFI_FILE_PROTOCOL;

typedef struct
{
	EFI_MP_SERVICES_GET_NUMBER_OF_PROCESSORS GetNumberOfProcessors;
	EFI_MP_SERVICES_GET_PROCESSOR_INFO GetProcessorInfo;
	EFI_MP_SERVICES_STARTUP_ALL_APS StartupAllAPs;
	EFI_MP_SERVICES_STARTUP_THIS_AP StartupThisAP;
	EFI_MP_SERVICES_SWITCH_BSP SwitchBSP;
	EFI_MP_SERVICES_ENABLEDISABLEAP EnableDisableAP;
	EFI_MP_SERVICES_WHOAMI WhoAmI;
} EFI_MP_SERVICES_PROTOCOL;

typedef struct
{
	EFI_TABLE_HEADER Hdr;
	EFI_GET_TIME GetTime;
	EFI_SET_TIME SetTime;
	EFI_GET_WAKEUP_TIME GetWakeupTime;
	EFI_SET_WAKEUP_TIME SetWakeupTime;
	EFI_SET_VIRTUAL_ADDRESS_MAP SetVirtualAddressMap;
	EFI_CONVERT_POINTER ConvertPointer;
	EFI_GET_VARIABLE GetVariable;
	EFI_GET_NEXT_VARIABLE_NAME GetNextVariableName;
	EFI_SET_VARIABLE SetVariable;
	EFI_GET_NEXT_HIGH_MONO_COUNT GetNextHighMonotonicCount;
	EFI_RESET_SYSTEM ResetSystem;
	EFI_UPDATE_CAPSULE UpdateCapsule;
	EFI_QUERY_CAPSULE_CAPABILITIES QueryCapsuleCapabilities;
	EFI_QUERY_VARIABLE_INFO QueryVariableInfo;
} EFI_RUNTIME_SERVICES;

typedef struct
{
	EFI_SERVICE_BINDING_CREATE_CHILD CreateChild;
	EFI_SERVICE_BINDING_DESTROY_CHILD DestroyChild;
} EFI_SERVICE_BINDING_PROTOCOL;

typedef struct
{
    unsigned long long Revision;
    EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_OPEN_VOLUME OpenVolume;
} EFI_SIMPLE_FILE_SYSTEM_PROTOCOL;

typedef struct
{
	EFI_INPUT_RESET Reset;
	EFI_INPUT_READ_KEY ReadKeyStroke;
	EFI_EVENT WaitForKey;
} EFI_SIMPLE_TEXT_INPUT_PROTOCOL;

typedef struct
{
	EFI_TEXT_RESET Reset;
	EFI_TEXT_STRING OutputString;
	EFI_TEXT_TEST_STRING TestString;
	EFI_TEXT_QUERY_MODE QueryMode;
	EFI_TEXT_SET_MODE SetMode;
	EFI_TEXT_SET_ATTRIBUTE SetAttribute;
	EFI_TEXT_CLEAR_SCREEN ClearScreen;
	EFI_TEXT_SET_CURSOR_POSITION SetCursorPosition;
	EFI_TEXT_ENABLE_CURSOR EnableCursor;
	SIMPLE_TEXT_OUTPUT_MODE* Mode;
} EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL;

typedef struct
{
	EFI_TABLE_HEADER Hdr;
	CHAR16* FirmwareVendor;
	unsigned int FirmwareRevision;
	EFI_HANDLE ConsoleInHandle;
	EFI_SIMPLE_TEXT_INPUT_PROTOCOL* ConIn;
	EFI_HANDLE ConsoleOutHandle;
	EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL* ConOut;
	EFI_HANDLE StandardErrorHandle;
	EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL* StdErr;
	EFI_RUNTIME_SERVICES* RuntimeServices;
	EFI_BOOT_SERVICES* BootServices;
	unsigned long long NumberOfTableEntries;
	EFI_CONFIGURATION_TABLE* ConfigurationTable;
} EFI_SYSTEM_TABLE;

typedef struct
{
	EFI_TCP4_GET_MODE_DATA GetModeData;
	EFI_TCP4_CONFIGURE Configure;
	EFI_TCP4_ROUTES Routes;
	EFI_TCP4_CONNECT Connect;
	EFI_TCP4_ACCEPT Accept;
	EFI_TCP4_TRANSMIT Transmit;
	EFI_TCP4_RECEIVE Receive;
	EFI_TCP4_CLOSE Close;
	EFI_TCP4_CANCEL Cancel;
	EFI_TCP4_POLL Poll;
} EFI_TCP4_PROTOCOL;

typedef struct
{
    EFI_UDP4_GET_MODE_DATA GetModeData;
    EFI_UDP4_CONFIGURE Configure;
    EFI_UDP4_GROUPS Groups;
    EFI_UDP4_ROUTES Routes;
    EFI_UDP4_TRANSMIT Transmit;
    EFI_UDP4_RECEIVE Receive;
    EFI_UDP4_CANCEL Cancel;
    EFI_UDP4_POLL Poll;
} EFI_UDP4_PROTOCOL;

static EFI_HANDLE ih;
static EFI_SYSTEM_TABLE* st;
static EFI_RUNTIME_SERVICES* rs;
static EFI_BOOT_SERVICES* bs;

static void appendText(CHAR16* dst, const CHAR16* src)
{
    unsigned short dstIndex = 0;
    while (dst[dstIndex] != 0)
    {
        dstIndex++;
    }
    unsigned short srcIndex = 0;
    while ((dst[dstIndex++] = src[srcIndex++]) != 0)
    {
    }
}

static void setText(CHAR16* dst, const CHAR16* src)
{
    dst[0] = 0;
    appendText(dst, src);
}

static void appendNumber(CHAR16* dst, unsigned long long number, BOOLEAN separate)
{
    CHAR16 text[27];
    char textLength = 0;
    do
    {
        text[textLength++] = number % 10 + '0';
    } while ((number /= 10) > 0);
    unsigned short dstIndex = 0;
    while (dst[dstIndex] != 0)
    {
        dstIndex++;
    }
    while (--textLength >= 0)
    {
        dst[dstIndex++] = text[textLength];
        if (separate && textLength % 3 == 0 && textLength != 0)
        {
            dst[dstIndex++] = '\'';
        }
    }
    dst[dstIndex] = 0;
}

static void setNumber(CHAR16* dst, const unsigned long long number, BOOLEAN separate)
{
    dst[0] = 0;
    appendNumber(dst, number, separate);
}

static void appendBoolean(CHAR16* dst, const BOOLEAN value)
{
    appendText(dst, value ? L"TRUE" : L"FALSE");
}

static void appendIPv4Address(CHAR16* dst, EFI_IPv4_ADDRESS address)
{
    appendNumber(dst, address.Addr[0], FALSE);
    appendText(dst, L".");
    appendNumber(dst, address.Addr[1], FALSE);
    appendText(dst, L".");
    appendNumber(dst, address.Addr[2], FALSE);
    appendText(dst, L".");
    appendNumber(dst, address.Addr[3], FALSE);
}
static void appendErrorStatus(CHAR16* dst, const EFI_STATUS status)
{
    switch (status)
    {
    case EFI_LOAD_ERROR:			appendText(dst, L"EFI_LOAD_ERROR");				break;
    case EFI_INVALID_PARAMETER:		appendText(dst, L"EFI_INVALID_PARAMETER");		break;
    case EFI_UNSUPPORTED:			appendText(dst, L"EFI_UNSUPPORTED");			break;
    case EFI_BAD_BUFFER_SIZE:		appendText(dst, L"EFI_BAD_BUFFER_SIZE");		break;
    case EFI_BUFFER_TOO_SMALL:		appendText(dst, L"EFI_BUFFER_TOO_SMALL");		break;
    case EFI_NOT_READY:				appendText(dst, L"EFI_NOT_READY");				break;
    case EFI_DEVICE_ERROR:			appendText(dst, L"EFI_DEVICE_ERROR");			break;
    case EFI_WRITE_PROTECTED:		appendText(dst, L"EFI_WRITE_PROTECTED");		break;
    case EFI_OUT_OF_RESOURCES:		appendText(dst, L"EFI_OUT_OF_RESOURCES");		break;
    case EFI_VOLUME_CORRUPTED:		appendText(dst, L"EFI_VOLUME_CORRUPTED");		break;
    case EFI_VOLUME_FULL:			appendText(dst, L"EFI_VOLUME_FULL");			break;
    case EFI_NO_MEDIA:				appendText(dst, L"EFI_NO_MEDIA");				break;
    case EFI_MEDIA_CHANGED:			appendText(dst, L"EFI_MEDIA_CHANGED");			break;
    case EFI_NOT_FOUND:				appendText(dst, L"EFI_NOT_FOUND");				break;
    case EFI_ACCESS_DENIED:			appendText(dst, L"EFI_ACCESS_DENIED");			break;
    case EFI_NO_RESPONSE:			appendText(dst, L"EFI_NO_RESPONSE");			break;
    case EFI_NO_MAPPING:			appendText(dst, L"EFI_NO_MAPPING");				break;
    case EFI_TIMEOUT:				appendText(dst, L"EFI_TIMEOUT");				break;
    case EFI_NOT_STARTED:			appendText(dst, L"EFI_NOT_STARTED");			break;
    case EFI_ALREADY_STARTED:		appendText(dst, L"EFI_ALREADY_STARTED");		break;
    case EFI_ABORTED:				appendText(dst, L"EFI_ABORTED");				break;
    case EFI_ICMP_ERROR:			appendText(dst, L"EFI_ICMP_ERROR");				break;
    case EFI_TFTP_ERROR:			appendText(dst, L"EFI_TFTP_ERROR");				break;
    case EFI_PROTOCOL_ERROR:		appendText(dst, L"EFI_PROTOCOL_ERROR");			break;
    case EFI_INCOMPATIBLE_VERSION:	appendText(dst, L"EFI_INCOMPATIBLE_VERSION");	break;
    case EFI_SECURITY_VIOLATION:	appendText(dst, L"EFI_SECURITY_VIOLATION");		break;
    case EFI_CRC_ERROR:				appendText(dst, L"EFI_CRC_ERROR");				break;
    case EFI_END_OF_MEDIA:			appendText(dst, L"EFI_END_OF_MEDIA");			break;
    case EFI_END_OF_FILE:			appendText(dst, L"EFI_END_OF_FILE");			break;
    case EFI_INVALID_LANGUAGE:		appendText(dst, L"EFI_INVALID_LANGUAGE");		break;
    case EFI_COMPROMISED_DATA:		appendText(dst, L"EFI_COMPROMISED_DATA");		break;
    case EFI_IP_ADDRESS_CONFLICT:	appendText(dst, L"EFI_IP_ADDRESS_CONFLICT");	break;
    case EFI_HTTP_ERROR:			appendText(dst, L"EFI_HTTP_ERROR");				break;
    default: appendNumber(dst, status, FALSE);
    }
}

static void log(const CHAR16* message)
{
    CHAR16 timestampedMessage[256];

    EFI_TIME time;
    rs->GetTime(&time, NULL);
    timestampedMessage[0] = time.Year / 1000 + L'0';
    timestampedMessage[1] = (time.Year %= 1000) / 100 + L'0';
    timestampedMessage[2] = (time.Year %= 100) / 10 + L'0';
    timestampedMessage[3] = time.Year % 10 + L'0';
    timestampedMessage[4] = '-';
    timestampedMessage[5] = time.Month / 10 + L'0';
    timestampedMessage[6] = time.Month % 10 + L'0';
    timestampedMessage[7] = '-';
    timestampedMessage[8] = time.Day / 10 + L'0';
    timestampedMessage[9] = time.Day % 10 + L'0';
    timestampedMessage[10] = ' ';
    timestampedMessage[11] = time.Hour / 10 + L'0';
    timestampedMessage[12] = time.Hour % 10 + L'0';
    timestampedMessage[13] = ':';
    timestampedMessage[14] = time.Minute / 10 + L'0';
    timestampedMessage[15] = time.Minute % 10 + L'0';
    timestampedMessage[16] = ':';
    timestampedMessage[17] = time.Second / 10 + L'0';
    timestampedMessage[18] = time.Second % 10 + L'0';
    timestampedMessage[19] = ' ';
    timestampedMessage[20] = '|';
    timestampedMessage[21] = ' ';
    timestampedMessage[22] = 0;

    appendText(timestampedMessage, message);
    appendText(timestampedMessage, L"\r\n");

    st->ConOut->OutputString(st->ConOut, timestampedMessage);
}

static void logStatus(const CHAR16* message, const EFI_STATUS status)
{
    CHAR16 extendedMessage[256];
    setText(extendedMessage, message);
    appendText(extendedMessage, L" (");
    appendErrorStatus(extendedMessage, status);
    appendText(extendedMessage, L")!");
    log(extendedMessage);
}



////////// KangarooTwelve \\\\\\\\\\

#if defined(_MSC_VER)
#define ROL64(a, offset) _rotl64(a, offset)
#else
#define ROL64(a, offset) ((((unsigned long long)a) << offset) ^ (((unsigned long long)a) >> (64 - offset)))
#endif

#define KeccakF1600RoundConstant0   0x000000008000808bULL
#define KeccakF1600RoundConstant1   0x800000000000008bULL
#define KeccakF1600RoundConstant2   0x8000000000008089ULL
#define KeccakF1600RoundConstant3   0x8000000000008003ULL
#define KeccakF1600RoundConstant4   0x8000000000008002ULL
#define KeccakF1600RoundConstant5   0x8000000000000080ULL
#define KeccakF1600RoundConstant6   0x000000000000800aULL
#define KeccakF1600RoundConstant7   0x800000008000000aULL
#define KeccakF1600RoundConstant8   0x8000000080008081ULL
#define KeccakF1600RoundConstant9   0x8000000000008080ULL
#define KeccakF1600RoundConstant10  0x0000000080000001ULL

#define declareABCDE \
    unsigned long long Aba, Abe, Abi, Abo, Abu; \
    unsigned long long Aga, Age, Agi, Ago, Agu; \
    unsigned long long Aka, Ake, Aki, Ako, Aku; \
    unsigned long long Ama, Ame, Ami, Amo, Amu; \
    unsigned long long Asa, Ase, Asi, Aso, Asu; \
    unsigned long long Bba, Bbe, Bbi, Bbo, Bbu; \
    unsigned long long Bga, Bge, Bgi, Bgo, Bgu; \
    unsigned long long Bka, Bke, Bki, Bko, Bku; \
    unsigned long long Bma, Bme, Bmi, Bmo, Bmu; \
    unsigned long long Bsa, Bse, Bsi, Bso, Bsu; \
    unsigned long long Ca, Ce, Ci, Co, Cu; \
    unsigned long long Da, De, Di, Do, Du; \
    unsigned long long Eba, Ebe, Ebi, Ebo, Ebu; \
    unsigned long long Ega, Ege, Egi, Ego, Egu; \
    unsigned long long Eka, Eke, Eki, Eko, Eku; \
    unsigned long long Ema, Eme, Emi, Emo, Emu; \
    unsigned long long Esa, Ese, Esi, Eso, Esu; \

#define thetaRhoPiChiIotaPrepareTheta(i, A, E) \
    Da = Cu^ROL64(Ce, 1); \
    De = Ca^ROL64(Ci, 1); \
    Di = Ce^ROL64(Co, 1); \
    Do = Ci^ROL64(Cu, 1); \
    Du = Co^ROL64(Ca, 1); \
    A##ba ^= Da; \
    Bba = A##ba; \
    A##ge ^= De; \
    Bbe = ROL64(A##ge, 44); \
    A##ki ^= Di; \
    Bbi = ROL64(A##ki, 43); \
    A##mo ^= Do; \
    Bbo = ROL64(A##mo, 21); \
    A##su ^= Du; \
    Bbu = ROL64(A##su, 14); \
    E##ba =   Bba ^((~Bbe)&  Bbi ); \
    E##ba ^= KeccakF1600RoundConstant##i; \
    Ca = E##ba; \
    E##be =   Bbe ^((~Bbi)&  Bbo ); \
    Ce = E##be; \
    E##bi =   Bbi ^((~Bbo)&  Bbu ); \
    Ci = E##bi; \
    E##bo =   Bbo ^((~Bbu)&  Bba ); \
    Co = E##bo; \
    E##bu =   Bbu ^((~Bba)&  Bbe ); \
    Cu = E##bu; \
    A##bo ^= Do; \
    Bga = ROL64(A##bo, 28); \
    A##gu ^= Du; \
    Bge = ROL64(A##gu, 20); \
    A##ka ^= Da; \
    Bgi = ROL64(A##ka, 3); \
    A##me ^= De; \
    Bgo = ROL64(A##me, 45); \
    A##si ^= Di; \
    Bgu = ROL64(A##si, 61); \
    E##ga =   Bga ^((~Bge)&  Bgi ); \
    Ca ^= E##ga; \
    E##ge =   Bge ^((~Bgi)&  Bgo ); \
    Ce ^= E##ge; \
    E##gi =   Bgi ^((~Bgo)&  Bgu ); \
    Ci ^= E##gi; \
    E##go =   Bgo ^((~Bgu)&  Bga ); \
    Co ^= E##go; \
    E##gu =   Bgu ^((~Bga)&  Bge ); \
    Cu ^= E##gu; \
    A##be ^= De; \
    Bka = ROL64(A##be, 1); \
    A##gi ^= Di; \
    Bke = ROL64(A##gi, 6); \
    A##ko ^= Do; \
    Bki = ROL64(A##ko, 25); \
    A##mu ^= Du; \
    Bko = ROL64(A##mu, 8); \
    A##sa ^= Da; \
    Bku = ROL64(A##sa, 18); \
    E##ka =   Bka ^((~Bke)&  Bki ); \
    Ca ^= E##ka; \
    E##ke =   Bke ^((~Bki)&  Bko ); \
    Ce ^= E##ke; \
    E##ki =   Bki ^((~Bko)&  Bku ); \
    Ci ^= E##ki; \
    E##ko =   Bko ^((~Bku)&  Bka ); \
    Co ^= E##ko; \
    E##ku =   Bku ^((~Bka)&  Bke ); \
    Cu ^= E##ku; \
    A##bu ^= Du; \
    Bma = ROL64(A##bu, 27); \
    A##ga ^= Da; \
    Bme = ROL64(A##ga, 36); \
    A##ke ^= De; \
    Bmi = ROL64(A##ke, 10); \
    A##mi ^= Di; \
    Bmo = ROL64(A##mi, 15); \
    A##so ^= Do; \
    Bmu = ROL64(A##so, 56); \
    E##ma =   Bma ^((~Bme)&  Bmi ); \
    Ca ^= E##ma; \
    E##me =   Bme ^((~Bmi)&  Bmo ); \
    Ce ^= E##me; \
    E##mi =   Bmi ^((~Bmo)&  Bmu ); \
    Ci ^= E##mi; \
    E##mo =   Bmo ^((~Bmu)&  Bma ); \
    Co ^= E##mo; \
    E##mu =   Bmu ^((~Bma)&  Bme ); \
    Cu ^= E##mu; \
    A##bi ^= Di; \
    Bsa = ROL64(A##bi, 62); \
    A##go ^= Do; \
    Bse = ROL64(A##go, 55); \
    A##ku ^= Du; \
    Bsi = ROL64(A##ku, 39); \
    A##ma ^= Da; \
    Bso = ROL64(A##ma, 41); \
    A##se ^= De; \
    Bsu = ROL64(A##se, 2); \
    E##sa =   Bsa ^((~Bse)&  Bsi ); \
    Ca ^= E##sa; \
    E##se =   Bse ^((~Bsi)&  Bso ); \
    Ce ^= E##se; \
    E##si =   Bsi ^((~Bso)&  Bsu ); \
    Ci ^= E##si; \
    E##so =   Bso ^((~Bsu)&  Bsa ); \
    Co ^= E##so; \
    E##su =   Bsu ^((~Bsa)&  Bse ); \
    Cu ^= E##su; \

#define copyFromState(state) \
    Aba = state[ 0]; \
    Abe = state[ 1]; \
    Abi = state[ 2]; \
    Abo = state[ 3]; \
    Abu = state[ 4]; \
    Aga = state[ 5]; \
    Age = state[ 6]; \
    Agi = state[ 7]; \
    Ago = state[ 8]; \
    Agu = state[ 9]; \
    Aka = state[10]; \
    Ake = state[11]; \
    Aki = state[12]; \
    Ako = state[13]; \
    Aku = state[14]; \
    Ama = state[15]; \
    Ame = state[16]; \
    Ami = state[17]; \
    Amo = state[18]; \
    Amu = state[19]; \
    Asa = state[20]; \
    Ase = state[21]; \
    Asi = state[22]; \
    Aso = state[23]; \
    Asu = state[24]; \

#define copyToState(state) \
    state[ 0] = Aba; \
    state[ 1] = Abe; \
    state[ 2] = Abi; \
    state[ 3] = Abo; \
    state[ 4] = Abu; \
    state[ 5] = Aga; \
    state[ 6] = Age; \
    state[ 7] = Agi; \
    state[ 8] = Ago; \
    state[ 9] = Agu; \
    state[10] = Aka; \
    state[11] = Ake; \
    state[12] = Aki; \
    state[13] = Ako; \
    state[14] = Aku; \
    state[15] = Ama; \
    state[16] = Ame; \
    state[17] = Ami; \
    state[18] = Amo; \
    state[19] = Amu; \
    state[20] = Asa; \
    state[21] = Ase; \
    state[22] = Asi; \
    state[23] = Aso; \
    state[24] = Asu; \

#define rounds12 \
    Ca = Aba^Aga^Aka^Ama^Asa; \
    Ce = Abe^Age^Ake^Ame^Ase; \
    Ci = Abi^Agi^Aki^Ami^Asi; \
    Co = Abo^Ago^Ako^Amo^Aso; \
    Cu = Abu^Agu^Aku^Amu^Asu; \
    thetaRhoPiChiIotaPrepareTheta(0, A, E) \
    thetaRhoPiChiIotaPrepareTheta(1, E, A) \
    thetaRhoPiChiIotaPrepareTheta(2, A, E) \
    thetaRhoPiChiIotaPrepareTheta(3, E, A) \
    thetaRhoPiChiIotaPrepareTheta(4, A, E) \
    thetaRhoPiChiIotaPrepareTheta(5, E, A) \
    thetaRhoPiChiIotaPrepareTheta(6, A, E) \
    thetaRhoPiChiIotaPrepareTheta(7, E, A) \
    thetaRhoPiChiIotaPrepareTheta(8, A, E) \
    thetaRhoPiChiIotaPrepareTheta(9, E, A) \
    thetaRhoPiChiIotaPrepareTheta(10, A, E) \
    Da = Cu^ROL64(Ce, 1); \
    De = Ca^ROL64(Ci, 1); \
    Di = Ce^ROL64(Co, 1); \
    Do = Ci^ROL64(Cu, 1); \
    Du = Co^ROL64(Ca, 1); \
    Eba ^= Da; \
    Bba = Eba; \
    Ege ^= De; \
    Bbe = ROL64(Ege, 44); \
    Eki ^= Di; \
    Bbi = ROL64(Eki, 43); \
    Emo ^= Do; \
    Bbo = ROL64(Emo, 21); \
    Esu ^= Du; \
    Bbu = ROL64(Esu, 14); \
    Aba =   Bba ^((~Bbe)&  Bbi ); \
    Aba ^= 0x8000000080008008ULL; \
    Abe =   Bbe ^((~Bbi)&  Bbo ); \
    Abi =   Bbi ^((~Bbo)&  Bbu ); \
    Abo =   Bbo ^((~Bbu)&  Bba ); \
    Abu =   Bbu ^((~Bba)&  Bbe ); \
    Ebo ^= Do; \
    Bga = ROL64(Ebo, 28); \
    Egu ^= Du; \
    Bge = ROL64(Egu, 20); \
    Eka ^= Da; \
    Bgi = ROL64(Eka, 3); \
    Eme ^= De; \
    Bgo = ROL64(Eme, 45); \
    Esi ^= Di; \
    Bgu = ROL64(Esi, 61); \
    Aga =   Bga ^((~Bge)&  Bgi ); \
    Age =   Bge ^((~Bgi)&  Bgo ); \
    Agi =   Bgi ^((~Bgo)&  Bgu ); \
    Ago =   Bgo ^((~Bgu)&  Bga ); \
    Agu =   Bgu ^((~Bga)&  Bge ); \
    Ebe ^= De; \
    Bka = ROL64(Ebe, 1); \
    Egi ^= Di; \
    Bke = ROL64(Egi, 6); \
    Eko ^= Do; \
    Bki = ROL64(Eko, 25); \
    Emu ^= Du; \
    Bko = ROL64(Emu, 8); \
    Esa ^= Da; \
    Bku = ROL64(Esa, 18); \
    Aka =   Bka ^((~Bke)&  Bki ); \
    Ake =   Bke ^((~Bki)&  Bko ); \
    Aki =   Bki ^((~Bko)&  Bku ); \
    Ako =   Bko ^((~Bku)&  Bka ); \
    Aku =   Bku ^((~Bka)&  Bke ); \
    Ebu ^= Du; \
    Bma = ROL64(Ebu, 27); \
    Ega ^= Da; \
    Bme = ROL64(Ega, 36); \
    Eke ^= De; \
    Bmi = ROL64(Eke, 10); \
    Emi ^= Di; \
    Bmo = ROL64(Emi, 15); \
    Eso ^= Do; \
    Bmu = ROL64(Eso, 56); \
    Ama =   Bma ^((~Bme)&  Bmi ); \
    Ame =   Bme ^((~Bmi)&  Bmo ); \
    Ami =   Bmi ^((~Bmo)&  Bmu ); \
    Amo =   Bmo ^((~Bmu)&  Bma ); \
    Amu =   Bmu ^((~Bma)&  Bme ); \
    Ebi ^= Di; \
    Bsa = ROL64(Ebi, 62); \
    Ego ^= Do; \
    Bse = ROL64(Ego, 55); \
    Eku ^= Du; \
    Bsi = ROL64(Eku, 39); \
    Ema ^= Da; \
    Bso = ROL64(Ema, 41); \
    Ese ^= De; \
    Bsu = ROL64(Ese, 2); \
    Asa =   Bsa ^((~Bse)&  Bsi ); \
    Ase =   Bse ^((~Bsi)&  Bso ); \
    Asi =   Bsi ^((~Bso)&  Bsu ); \
    Aso =   Bso ^((~Bsu)&  Bsa ); \
    Asu =   Bsu ^((~Bsa)&  Bse ); \

#define K12_security        128
#define K12_capacity        (2 * K12_security)
#define K12_capacityInBytes (K12_capacity / 8)
#define K12_rate            (1600 - K12_capacity)
#define K12_rateInBytes     (K12_rate / 8)
#define K12_rateInLanes     (K12_rate / 64)
#define K12_chunkSize       8192
#define K12_suffixLeaf      0x0B

typedef struct
{
    unsigned char state[200];
    unsigned char byteIOIndex;
    unsigned char squeezing;
} KangarooTwelve_F;

typedef struct
{
    KangarooTwelve_F queueNode;
    KangarooTwelve_F finalNode;
    unsigned long long blockNumber;
    unsigned int queueAbsorbedLen;
} KangarooTwelve_Instance;

static void KeccakP1600_Permute_12rounds(void* state)
{
    declareABCDE
    unsigned long long* stateAsLanes = (unsigned long long*)state;
    copyFromState(stateAsLanes)
    rounds12
    copyToState(stateAsLanes)
}

static void KeccakP1600_ExtractBytes(const void* state, unsigned char* data, unsigned int offset, unsigned int length)
{
    if (!offset)
    {
        bs->CopyMem(data, (void*)state, length & 0xFFFFFFF8);
        bs->CopyMem(data + (length & 0xFFFFFFF8), &((unsigned long long*)state)[length >> 3], length & 7);
    }
    else
    {
        unsigned int _sizeLeft = length;
        unsigned int _lanePosition = offset >> 3;
        unsigned int _offsetInLane = offset & 7;
        unsigned char* _curData = data;
        while (_sizeLeft > 0)
        {
            unsigned int _bytesInLane = 8 - _offsetInLane;
            if (_bytesInLane > _sizeLeft)
            {
                _bytesInLane = _sizeLeft;
            }
            bs->CopyMem(_curData, (unsigned char*)(&(((unsigned long long*)state)[_lanePosition])) + _offsetInLane, _bytesInLane);
            _sizeLeft -= _bytesInLane;
            _lanePosition++;
            _offsetInLane = 0;
            _curData += _bytesInLane;
        }
    }
}

static void KangarooTwelve_F_Absorb(KangarooTwelve_F* instance, unsigned char* data, unsigned long long dataByteLen)
{
    unsigned long long i = 0;
    while (i < dataByteLen)
    {
        if (!instance->byteIOIndex && dataByteLen >= i + K12_rateInBytes)
        {
            declareABCDE
            unsigned long long* stateAsLanes = (unsigned long long*)instance->state;
            copyFromState(stateAsLanes)
            unsigned long long modifiedDataByteLen = dataByteLen - i;
            while (modifiedDataByteLen >= K12_rateInBytes)
            {
                Aba ^= ((unsigned long long*)data)[0];
                Abe ^= ((unsigned long long*)data)[1];
                Abi ^= ((unsigned long long*)data)[2];
                Abo ^= ((unsigned long long*)data)[3];
                Abu ^= ((unsigned long long*)data)[4];
                Aga ^= ((unsigned long long*)data)[5];
                Age ^= ((unsigned long long*)data)[6];
                Agi ^= ((unsigned long long*)data)[7];
                Ago ^= ((unsigned long long*)data)[8];
                Agu ^= ((unsigned long long*)data)[9];
                Aka ^= ((unsigned long long*)data)[10];
                Ake ^= ((unsigned long long*)data)[11];
                Aki ^= ((unsigned long long*)data)[12];
                Ako ^= ((unsigned long long*)data)[13];
                Aku ^= ((unsigned long long*)data)[14];
                Ama ^= ((unsigned long long*)data)[15];
                Ame ^= ((unsigned long long*)data)[16];
                Ami ^= ((unsigned long long*)data)[17];
                Amo ^= ((unsigned long long*)data)[18];
                Amu ^= ((unsigned long long*)data)[19];
                Asa ^= ((unsigned long long*)data)[20];
                rounds12
                data += K12_rateInBytes;
                modifiedDataByteLen -= K12_rateInBytes;
            }
            copyToState(stateAsLanes)
            i = dataByteLen - modifiedDataByteLen;
        }
        else
        {
            unsigned char partialBlock;
            if ((dataByteLen - i) + instance->byteIOIndex > K12_rateInBytes)
            {
                partialBlock = K12_rateInBytes - instance->byteIOIndex;
            }
            else
            {
                partialBlock = (unsigned char)(dataByteLen - i);
            }
            i += partialBlock;

            if (!instance->byteIOIndex)
            {
                unsigned int j = 0;
                for (; (j + 8) <= (unsigned int)(partialBlock >> 3); j += 8)
                {
                    ((unsigned long long*)instance->state)[j + 0] ^= ((unsigned long long*)data)[j + 0];
                    ((unsigned long long*)instance->state)[j + 1] ^= ((unsigned long long*)data)[j + 1];
                    ((unsigned long long*)instance->state)[j + 2] ^= ((unsigned long long*)data)[j + 2];
                    ((unsigned long long*)instance->state)[j + 3] ^= ((unsigned long long*)data)[j + 3];
                    ((unsigned long long*)instance->state)[j + 4] ^= ((unsigned long long*)data)[j + 4];
                    ((unsigned long long*)instance->state)[j + 5] ^= ((unsigned long long*)data)[j + 5];
                    ((unsigned long long*)instance->state)[j + 6] ^= ((unsigned long long*)data)[j + 6];
                    ((unsigned long long*)instance->state)[j + 7] ^= ((unsigned long long*)data)[j + 7];
                }
                for (; (j + 4) <= (unsigned int)(partialBlock >> 3); j += 4)
                {
                    ((unsigned long long*)instance->state)[j + 0] ^= ((unsigned long long*)data)[j + 0];
                    ((unsigned long long*)instance->state)[j + 1] ^= ((unsigned long long*)data)[j + 1];
                    ((unsigned long long*)instance->state)[j + 2] ^= ((unsigned long long*)data)[j + 2];
                    ((unsigned long long*)instance->state)[j + 3] ^= ((unsigned long long*)data)[j + 3];
                }
                for (; (j + 2) <= (unsigned int)(partialBlock >> 3); j += 2)
                {
                    ((unsigned long long*)instance->state)[j + 0] ^= ((unsigned long long*)data)[j + 0];
                    ((unsigned long long*)instance->state)[j + 1] ^= ((unsigned long long*)data)[j + 1];
                }
                if (j < (unsigned int)(partialBlock >> 3))
                {
                    ((unsigned long long*)instance->state)[j + 0] ^= ((unsigned long long*)data)[j + 0];
                }
                if (partialBlock & 7)
                {
                    if ((partialBlock & 7) == 1)
                    {
                        ((unsigned long long*)instance->state)[partialBlock >> 3] ^= ((unsigned long long)data[partialBlock & 0xFFFFFFF8]);
                    }
                    else
                    {
                        unsigned long long lane = 0;
                        bs->CopyMem(&lane, data + (partialBlock & 0xFFFFFFF8), partialBlock & 7);
                        ((unsigned long long*)instance->state)[partialBlock >> 3] ^= lane;
                    }
                }
            }
            else
            {
                unsigned int _sizeLeft = partialBlock;
                unsigned int _lanePosition = instance->byteIOIndex >> 3;
                unsigned int _offsetInLane = instance->byteIOIndex & 7;
                const unsigned char* _curData = data;
                while (_sizeLeft > 0)
                {
                    unsigned int _bytesInLane = 8 - _offsetInLane;
                    if (_bytesInLane > _sizeLeft)
                    {
                        _bytesInLane = _sizeLeft;
                    }
                    if (_bytesInLane)
                    {
                        if (_bytesInLane == 1)
                        {
                            ((unsigned long long*)instance->state)[_lanePosition] ^= (((unsigned long long)_curData[0]) << (_offsetInLane << 3));
                        }
                        else
                        {
                            unsigned long long lane = 0;
                            bs->CopyMem(&lane, (void*)_curData, _bytesInLane);
                            ((unsigned long long*)instance->state)[_lanePosition] ^= (lane << (_offsetInLane << 3));
                        }
                    }
                    _sizeLeft -= _bytesInLane;
                    _lanePosition++;
                    _offsetInLane = 0;
                    _curData += _bytesInLane;
                }
            }

            data += partialBlock;
            instance->byteIOIndex += partialBlock;
            if (instance->byteIOIndex == K12_rateInBytes)
            {
                KeccakP1600_Permute_12rounds(instance->state);
                instance->byteIOIndex = 0;
            }
        }
    }
}

static void KangarooTwelve_F_AbsorbLastFewBits(KangarooTwelve_F* instance, unsigned char delimitedData)
{
    instance->state[instance->byteIOIndex] ^= delimitedData;
    if ((delimitedData >= 0x80) && (instance->byteIOIndex == (K12_rateInBytes - 1)))
    {
        KeccakP1600_Permute_12rounds(instance->state);
    }
    instance->state[K12_rateInBytes - 1] ^= 0x80;
    KeccakP1600_Permute_12rounds(instance->state);
    instance->byteIOIndex = 0;
    instance->squeezing = 1;
}

static void KangarooTwelve_F_Squeeze(KangarooTwelve_F* instance, unsigned char* data, unsigned long long dataByteLen)
{
    if (!instance->squeezing)
    {
        KangarooTwelve_F_AbsorbLastFewBits(instance, 0x01);
    }

    unsigned long long i = 0;
    unsigned char* curData = data;
    while (i < dataByteLen)
    {
        if ((instance->byteIOIndex == K12_rateInBytes) && (dataByteLen >= (i + K12_rateInBytes)))
        {
            unsigned long long j;
            for (j = dataByteLen - i; j >= K12_rateInBytes; j -= K12_rateInBytes)
            {
                KeccakP1600_Permute_12rounds(instance->state);
                KeccakP1600_ExtractBytes(instance->state, curData, 0, K12_rateInBytes);
                curData += K12_rateInBytes;
            }
            i = dataByteLen - j;
        }
        else
        {
            if (instance->byteIOIndex == K12_rateInBytes)
            {
                KeccakP1600_Permute_12rounds(instance->state);
                instance->byteIOIndex = 0;
            }
            unsigned int partialBlock = (unsigned int)(dataByteLen - i);
            if (partialBlock + instance->byteIOIndex > K12_rateInBytes)
            {
                partialBlock = K12_rateInBytes - instance->byteIOIndex;
            }
            i += partialBlock;

            KeccakP1600_ExtractBytes(instance->state, curData, instance->byteIOIndex, partialBlock);
            curData += partialBlock;
            instance->byteIOIndex += partialBlock;
        }
    }
}

static void KangarooTwelve_Update(KangarooTwelve_Instance* ktInstance, unsigned char* input, unsigned long long inputByteLen)
{
    if (!ktInstance->blockNumber)
    {
        unsigned int len = (inputByteLen < (K12_chunkSize - ktInstance->queueAbsorbedLen)) ? (unsigned int)inputByteLen : (K12_chunkSize - ktInstance->queueAbsorbedLen);
        KangarooTwelve_F_Absorb(&ktInstance->finalNode, input, len);
        input += len;
        inputByteLen -= len;
        ktInstance->queueAbsorbedLen += len;
        if ((ktInstance->queueAbsorbedLen == K12_chunkSize) && inputByteLen)
        {
            unsigned char padding = 0x03;
            ktInstance->queueAbsorbedLen = 0;
            ktInstance->blockNumber = 1;
            KangarooTwelve_F_Absorb(&ktInstance->finalNode, &padding, 1);
            ktInstance->finalNode.byteIOIndex = (ktInstance->finalNode.byteIOIndex + 7) & ~7;
        }
    }
    else
    {
        if (ktInstance->queueAbsorbedLen)
        {
            unsigned int len = (inputByteLen < (K12_chunkSize - ktInstance->queueAbsorbedLen)) ? (unsigned int)inputByteLen : (K12_chunkSize - ktInstance->queueAbsorbedLen);
            KangarooTwelve_F_Absorb(&ktInstance->queueNode, input, len);
            input += len;
            inputByteLen -= len;
            ktInstance->queueAbsorbedLen += len;
            if (ktInstance->queueAbsorbedLen == K12_chunkSize)
            {
                unsigned char intermediate[K12_capacityInBytes];
                ktInstance->queueAbsorbedLen = 0;
                ++ktInstance->blockNumber;
                KangarooTwelve_F_AbsorbLastFewBits(&ktInstance->queueNode, K12_suffixLeaf);
                KangarooTwelve_F_Squeeze(&ktInstance->queueNode, intermediate, K12_capacityInBytes);
                KangarooTwelve_F_Absorb(&ktInstance->finalNode, intermediate, K12_capacityInBytes);
            }
        }
    }

    while (inputByteLen > 0)
    {
        unsigned int len = (inputByteLen < K12_chunkSize) ? (unsigned int)inputByteLen : K12_chunkSize;
        bs->SetMem(&ktInstance->queueNode, sizeof(KangarooTwelve_F), 0);
        KangarooTwelve_F_Absorb(&ktInstance->queueNode, input, len);
        input += len;
        inputByteLen -= len;
        if (len == K12_chunkSize)
        {
            unsigned char intermediate[K12_capacityInBytes];
            ++ktInstance->blockNumber;
            KangarooTwelve_F_AbsorbLastFewBits(&ktInstance->queueNode, K12_suffixLeaf);
            KangarooTwelve_F_Squeeze(&ktInstance->queueNode, intermediate, K12_capacityInBytes);
            KangarooTwelve_F_Absorb(&ktInstance->finalNode, intermediate, K12_capacityInBytes);
        }
        else
        {
            ktInstance->queueAbsorbedLen = len;
        }
    }
}

static void KangarooTwelve(unsigned char* input, unsigned long long inputByteLen, unsigned char* output, unsigned long long outputByteLen)
{
    KangarooTwelve_Instance ktInstance;

    ktInstance.queueAbsorbedLen = 0;
    ktInstance.blockNumber = 0;
    bs->SetMem(&ktInstance.finalNode, sizeof(KangarooTwelve_F), 0);

    KangarooTwelve_Update(&ktInstance, input, inputByteLen);

    unsigned char encbuf[sizeof(unsigned long long) + 1 + 2];

    encbuf[0] = 0;
    KangarooTwelve_Update(&ktInstance, encbuf, 1);

    unsigned char padding;
    if (!ktInstance.blockNumber)
    {
        padding = 0x07;
    }
    else
    {
        if (ktInstance.queueAbsorbedLen)
        {
            unsigned char intermediate[K12_capacityInBytes];
            ++ktInstance.blockNumber;
            KangarooTwelve_F_AbsorbLastFewBits(&ktInstance.queueNode, K12_suffixLeaf);
            KangarooTwelve_F_Squeeze(&ktInstance.queueNode, intermediate, K12_capacityInBytes);
            KangarooTwelve_F_Absorb(&ktInstance.finalNode, intermediate, K12_capacityInBytes);
        }
        --ktInstance.blockNumber;
        unsigned int n = 0;
        for (unsigned long long v = ktInstance.blockNumber; v && (n < sizeof(unsigned long long)); ++n, v >>= 8)
        {
        }
        for (unsigned int i = 1; i <= n; ++i)
        {
            encbuf[i - 1] = (unsigned char)(ktInstance.blockNumber >> (8 * (n - i)));
        }
        encbuf[n] = (unsigned char)n;
        encbuf[++n] = 0xFF;
        encbuf[++n] = 0xFF;
        KangarooTwelve_F_Absorb(&ktInstance.finalNode, encbuf, ++n);
        padding = 0x06;
    }
    KangarooTwelve_F_AbsorbLastFewBits(&ktInstance.finalNode, padding);
    KangarooTwelve_F_Squeeze(&ktInstance.finalNode, output, outputByteLen);
}



////////// FourQ \\\\\\\\\\

#define CURVE_ORDER_0 0x2FB2540EC7768CE7
#define CURVE_ORDER_1 0xDFBD004DFE0F7999
#define CURVE_ORDER_2 0xF05397829CBC14E5
#define CURVE_ORDER_3 0x0029CBC14E5E0A72

// Fixed integer constants for the decomposition
// Close "offset" vector
#define C1 0x72482C5251A4559C
#define C2 0x59F95B0ADD276F6C
#define C3 0x7DD2D17C4625FA78
#define C4 0x6BC57DEF56CE8877

// Optimal basis vectors 
#define B11 0x0906FF27E0A0A196
#define B12 0x1363E862C22A2DA0
#define B13 0x07426031ECC8030F
#define B14 0x084F739986B9E651
#define B21 0x1D495BEA84FCC2D4
#define B24 0x25DBC5BC8DD167D0
#define B31 0x17ABAD1D231F0302
#define B32 0x02C4211AE388DA51
#define B33 0x2E4D21C98927C49F
#define B34 0x0A9E6F44C02ECD97
#define B41 0x136E340A9108C83F
#define B42 0x3122DF2DC3E0FF32
#define B43 0x068A49F02AA8A9B5
#define B44 0x18D5087896DE0AEA

typedef unsigned long long felm_t[2]; // Datatype for representing 128-bit field elements
typedef felm_t f2elm_t[2]; // Datatype for representing quadratic extension field elements

typedef struct
{ // Point representation in affine coordinates
    f2elm_t x;
    f2elm_t y;
} point_affine;
typedef point_affine point_t[1];

typedef struct
{ // Point representation in extended coordinates
    f2elm_t x;
    f2elm_t y;
    f2elm_t z;
    f2elm_t ta;
    f2elm_t tb;
} point_extproj;
typedef point_extproj point_extproj_t[1];

typedef struct
{ // Point representation in extended coordinates (for precomputed points)
    f2elm_t xy;
    f2elm_t yx;
    f2elm_t z2;
    f2elm_t t2;
} point_extproj_precomp;
typedef point_extproj_precomp point_extproj_precomp_t[1];

typedef struct
{ // Point representation in extended affine coordinates (for precomputed points)
    f2elm_t xy;
    f2elm_t yx;
    f2elm_t t2;
} point_precomp;
typedef point_precomp point_precomp_t[1];

static const unsigned long long PARAMETER_d[4] = { 0x0000000000000142, 0x00000000000000E4, 0xB3821488F1FC0C8D, 0x5E472F846657E0FC };
static const unsigned long long curve_order[4] = { 0x2FB2540EC7768CE7, 0xDFBD004DFE0F7999, 0xF05397829CBC14E5, 0x0029CBC14E5E0A72 };
static const unsigned long long Montgomery_Rprime[4] = { 0xC81DB8795FF3D621, 0x173EA5AAEA6B387D, 0x3D01B7C72136F61C, 0x0006A5F16AC8F9D3 };
static const unsigned long long Montgomery_rprime[4] = { 0xE12FE5F079BC3929, 0xD75E78B8D1FCDCF3, 0xBCE409ED76B5DB21, 0xF32702FDAFC1C074 };
static const unsigned long long ONE[4] = { 1, 0, 0, 0 };

// Fixed GF(p^2) constants for the endomorphisms 
static unsigned long long ctau1[4] = { 0x74DCD57CEBCE74C3, 0x1964DE2C3AFAD20C, 0x12, 0x0C };
static unsigned long long ctaudual1[4] = { 0x9ECAA6D9DECDF034, 0x4AA740EB23058652, 0x11, 0x7FFFFFFFFFFFFFF4 };
static unsigned long long cphi0[4] = { 0xFFFFFFFFFFFFFFF7, 0x05, 0x4F65536CEF66F81A, 0x2553A0759182C329 };
static unsigned long long cphi1[4] = { 0x07, 0x05, 0x334D90E9E28296F9, 0x62C8CAA0C50C62CF };
static unsigned long long cphi2[4] = { 0x15, 0x0F, 0x2C2CB7154F1DF391, 0x78DF262B6C9B5C98 };
static unsigned long long cphi3[4] = { 0x03, 0x02, 0x92440457A7962EA4, 0x5084C6491D76342A };
static unsigned long long cphi4[4] = { 0x03, 0x03, 0xA1098C923AEC6855, 0x12440457A7962EA4 };
static unsigned long long cphi5[4] = { 0x0F, 0x0A, 0x669B21D3C5052DF3, 0x459195418A18C59E };
static unsigned long long cphi6[4] = { 0x18, 0x12, 0xCD3643A78A0A5BE7, 0x0B232A8314318B3C };
static unsigned long long cphi7[4] = { 0x23, 0x18, 0x66C183035F48781A, 0x3963BC1C99E2EA1A };
static unsigned long long cphi8[4] = { 0xF0, 0xAA, 0x44E251582B5D0EF0, 0x1F529F860316CBE5 };
static unsigned long long cphi9[4] = { 0xBEF, 0x870, 0x14D3E48976E2505, 0xFD52E9CFE00375B };
static unsigned long long cpsi1[4] = { 0xEDF07F4767E346EF, 0x2AF99E9A83D54A02, 0x13A, 0xDE };
static unsigned long long cpsi2[4] = { 0x143, 0xE4, 0x4C7DEB770E03F372, 0x21B8D07B99A81F03 };
static unsigned long long cpsi3[4] = { 0x09, 0x06, 0x3A6E6ABE75E73A61, 0x4CB26F161D7D6906 };
static unsigned long long cpsi4[4] = { 0xFFFFFFFFFFFFFFF6, 0x7FFFFFFFFFFFFFF9, 0xC59195418A18C59E, 0x334D90E9E28296F9 };

// Precomputed integers for fast-Babai rounding
static unsigned long long ell1[4] = { 0x259686E09D1A7D4F, 0xF75682ACE6A6BD66, 0xFC5BB5C5EA2BE5DF, 0x07 };
static unsigned long long ell2[4] = { 0xD1BA1D84DD627AFB, 0x2BD235580F468D8D, 0x8FD4B04CAA6C0F8A, 0x03 };
static unsigned long long ell3[4] = { 0x9B291A33678C203C, 0xC42BD6C965DCA902, 0xD038BF8D0BFFBAF6, 0x00 };
static unsigned long long ell4[4] = { 0x12E5666B77E7FDC0, 0x81CBDC3714983D82, 0x1B073877A22D8410, 0x03 };

// The table below was generated using window width W = 5 and table parameter V = 5 (see http://eprint.iacr.org/2013/158). 
// Number of point entries = 5 * 2^4 = 80 points, where each point (x,y) is represented using coordinates (x+y,y-x,2*d*t).
// Table size = 80 * 3 * 256 = 7.5KB
static const unsigned long long FIXED_BASE_TABLE[960] = {
  0xe18a34f3a703e631, 0x287460bf1d502b5f, 0xe02e62f7e4f90353, 0x0c3ba0378b86acde, 0x90bf0f98b0937edc, 0x740b7c7824f0c555, 0xb321239123a01366, 0x4ffcf5b93a9557a5, 0x297afccbabda42bb, 0x5948d137556c97c6, 0xa8189a393330684c, 0x0caf2b720a341f27
, 0x3a8ba018fd188787, 0x5546128188dd12a8, 0xb0b3cc33c09f9b77, 0x1baeeaf8b84d2049, 0x006425a611faf900, 0x18f7cd12e1a6f789, 0x6dccf09a12556066, 0x448e05eeace7b6eb, 0xbf2f33689d2829b0, 0x6d911dcb2957bdb4, 0x9f2353dbdc3c03ee, 0x06c54305babee501
, 0x2eaf45713dafa125, 0x72963058648a364d, 0x61b7771f9d313ef2, 0x4f41c7f8bfe2b069, 0x408623ae599790ac, 0x4d33858644330a42, 0xfc5696649cdd7487, 0x74df72e0e598e114, 0xc9a06325913c110b, 0x076bd4115fe4b0d8, 0x76619e65d6bff3d9, 0x249240147cee3a08
, 0xd695b96148965a73, 0x28aac8a28829f706, 0x41f1c05329f7a57b, 0x441ca9e89f03e00e, 0xe1aa38ab8bf7241e, 0x58f28cafc832b7f4, 0xcadaf8b8fa5400c6, 0x34b6d106284e863e, 0xf5498cab3af15097, 0x6dbe7790017d9c49, 0x63bf76a81448e8bc, 0x6371925bf23ae006
, 0xc5e2c721bded81fa, 0x4ede70eed68056ab, 0x8f3cd9b5b4975810, 0x4752fd192f0a9aa8, 0x318794eb1f734414, 0x11ddf7d2c8468662, 0x2613b06f72b1a34e, 0x465575b37ab06770, 0x40b9845f82638d2b, 0x48894050790298ce, 0xbedb93a501b4f131, 0x04f3560d2889b2fb
, 0x457dd875115b278b, 0x56f25ee54d92858a, 0x92d4c1cdce0c977e, 0x078fca4187d74996, 0x3bbb2ded76cc22a1, 0x117b28853ddc2bf6, 0x43f3767cb9c2baa2, 0x73079e25e0ea8a8f, 0x0177992b5a15796d, 0x2e77721480d9ef92, 0xbe09883567372916, 0x258f176b7af7576d
, 0x308338fd6168391b, 0x7285925f9a7353a4, 0x862c0fd04fe85114, 0x53259ee7423aeb51, 0xfe0031a84b3b1a68, 0x1a4f1d661fa071fc, 0x2ddd54168dc928a7, 0x60185c1adf196a6a, 0x49809717dc6da9b4, 0x6062094b4dcffc03, 0xa41ea6fa05fa7e8d, 0x4a4fe06f277148a0
, 0x7bb253a9ee9e80f0, 0x419a928bccb11733, 0x84323be66a9a039e, 0x01b2d1ae972814bb, 0xa7588584d3051231, 0x54df1e20cc979dd7, 0x91d906fe3e2f22dd, 0x4e36e9975fdf1a0f, 0xd81871746b747634, 0x3e5e31baeee13433, 0xe4da80979573baa3, 0x4b852ad97cfe77c6
, 0xe08b346714418b9e, 0x283d719b2fe6ef88, 0xb7339d2de45c180b, 0x75acfcef11d2d5c8, 0x8f40777a8c561876, 0x0c54ac40a7134c4b, 0xb92e287d66baee08, 0x6f357e5006a188bf, 0xc5903319ed1e6971, 0x747c45ef91dafd40, 0xde4086a91d2f816e, 0x5dcb27edb3b3ef7d
, 0x43fdc46cfa1dd2ee, 0x51551f9f70966498, 0xb54534f761ed9bdc, 0x453455b3073fb07f, 0xf24773e383cab70b, 0x679be25e758cf4df, 0xda17edf2943eee29, 0x3dc9e5b8d6dc0f66, 0x56a50cba413fb75b, 0x1e65315bc5a8537f, 0x5ff90242802c7213, 0x73c9d8c8f425252e
, 0x3c637b8633198c8f, 0x534f84b3ed414f33, 0xad313e72dedd6902, 0x5ed57e941cdf33af, 0x5a6fe01d2a57306e, 0x73b63dea344713f9, 0x39cb70570f1c2bf3, 0x2df8c6e49f1a18db, 0x661bc349677797e4, 0x501ae7cbbebe9062, 0x5b52a88de8959643, 0x0372752811c01d51
, 0x010c57a2301bb928, 0x378b317155554fc6, 0xf883fa4229a02cf1, 0x5f0047b850d7db29, 0x4d247ae328402daa, 0x0d030627a850a2bc, 0xb4e65d9a88a443f5, 0x6ec9686b2d6db089, 0xde202e08fea1d987, 0x5c64e1d3f28d7600, 0x157d17bef661bfb7, 0x56392d36dd75334c
, 0xe25478d8bd19155c, 0x146d4f2d3d336afd, 0x9bfbe00bf94e15e8, 0x2b185a9a6adf10c0, 0x926527b3ed52ab7b, 0x67997e1473101e80, 0xb58f4ff4947cc541, 0x36f800c7fac99a7a, 0xd0302e32400456d9, 0x4372e43640bc697b, 0x9144cabb4750d898, 0x75d25afac9a23cbf
, 0x794591767655cbfe, 0x74db216617fc4b07, 0x7057b2242566d0c9, 0x1d543b5908417b23, 0x19c280b444428783, 0x352309fd8b6cc3ef, 0x37833d6ac068ae72, 0x4ec0671a23c019f4, 0x9d9836e1a3d05bb5, 0x44fe1adff224efe3, 0xa296bc3ce57efb4a, 0x2efec86835a14150
, 0x2fe19c09fb194bca, 0x18cc07d3953cd206, 0x5bdff217c9c0b9e0, 0x671aa756581abcee, 0xe1cc33ae28f7d1a2, 0x1b6f254937a0a3fe, 0x51503d1665babb83, 0x74b95636d5889211, 0xbdb97ae4ea96f869, 0x1507ce189e2510bd, 0x796e4d54fab93b13, 0x6a81765f05960929
, 0x2e940521e5a833ed, 0x3bdea532b245f644, 0xbea76975ffd52693, 0x64b94848ba6d4ed6, 0x9db52d0194e33ec7, 0x71cf65da55639f25, 0xede73b1fdb5a8138, 0x12e4d13b6c62dc22, 0x9d19b0c265185517, 0x77a011d257b5fdd0, 0x1fedc5caaecd84e4, 0x46844e151e3492d1
, 0x7a423a31904220df, 0x5b3165c747e8f099, 0x1c665eeadf35e22e, 0x7802b556fc45595b, 0x85a2def4015bd2de, 0x17f2ab87957166ad, 0x19cf6d352060c1e5, 0x122a7ad1be408e6a, 0x5b79bbc8645bf766, 0x20fb009d4d0adacf, 0x97526a272ba28538, 0x7041b4e90d420bde
, 0x3b30113358dab057, 0x3d398b66f0d24243, 0x91a5999a03cd4708, 0x1eae2409cd938096, 0x66dd6b604c36108c, 0x1713083789081968, 0x57cad6917125dcfd, 0x34b06cb89704f1ca, 0xdcafe8e71f35abf2, 0x698331198d544db9, 0x6287676643af075b, 0x200950e5559d2b6d
, 0xd4f63fc3ecdd9074, 0x7473317142ac13a2, 0x96b0030805319356, 0x2c20ffe0244378ba, 0x4889511ad26ac01a, 0x4ee327219997fcf6, 0x15ffe6e70f0bf8ea, 0x6b617fb4a6d0a6d7, 0x4916dca1c52f7324, 0x3c8269f086468277, 0xc24210c4c837e04b, 0x4e480b4f915a542c
, 0xc5fef3b09a7fe35e, 0x31a501de44fd84b2, 0x79f29e4940a407b9, 0x0ba7e03ca5cce5ab, 0xa7a8b2058a74d8ea, 0x46f4c7810e26dadc, 0x46171ace94a1128a, 0x44db55025495a811, 0x7f889e1a4bf18d5c, 0x4d4f172a43f306b2, 0x33a99766bb1cffad, 0x6254775924d39aca
, 0xd855230ec225136e, 0x1c544dd078d9211d, 0x12fe9969f63f63ba, 0x069af1dc949dd382, 0x305bcf40cfe5c256, 0x63ae90924bbbb595, 0xe451097793b7de06, 0x09780cf39fc0043e, 0x827af8e7eb798871, 0x3ace8a6c77577a37, 0x79df061332e055ba, 0x561dc07aaacea92b
, 0x7e4422d9820d2673, 0x6b85df83e0af5348, 0x1f151ac1ded8526b, 0x35ead8e5157142bd, 0x6da6ef6c33c79dd4, 0x5f2ea04d2594fde4, 0x91037d0cc027d5fa, 0x53b5401007b0331b, 0x810f198a3d4ba5a3, 0x4463bd259ba94195, 0x32b894acec2acf9e, 0x78711761d64349ce
, 0x253ae1b3f51fe211, 0x409e4b3f535b6463, 0x3a236d10da5e49de, 0x19d2b1029c21336a, 0x2835f40436aadd90, 0x0942a31505190b19, 0xc189131876828279, 0x3afe96c3ca8e1f9c, 0x9f1801b491230693, 0x39e28db8625fd091, 0x9fab50355dd44c8e, 0x145155da729b280d
, 0xd3ccf8101d4d76d5, 0x5a0faa1a8c2b6c68, 0x3cc66c84cb54ea8a, 0x51052ce3f566c773, 0x3bee14de65ae9ff5, 0x7586118a01ccf024, 0x089e791c896bf15e, 0x35ff022d261d93d6, 0xcd3ce13d8f7d1cf9, 0x4f1de98f95b7b8f6, 0x51e68a2462dc41b4, 0x61ad9e3c23f6dd29
, 0x584fea6480ebdb51, 0x5d52fe073f9decf3, 0x9afe483eadf336d5, 0x1dfa03c980b1696a, 0x55f73d47ff819a19, 0x697bf55d361100ed, 0xded4804446399419, 0x618c94467fce259f, 0xf2597ff1f08ef50c, 0x07c935b98dd933c0, 0xbb758cbc78ded5f6, 0x1e9a0d06af13148f
, 0x879ce1457f4cd4db, 0x28396ca1962d4994, 0xf5095a3dc57605c3, 0x1e570f3da4c527b1, 0x2af69a3904935787, 0x591ee376fdd01cce, 0xf77b58df88bc8633, 0x5464d651b2f395d1, 0xafbc096b1e9a86ae, 0x6ce2df4bf65b6b28, 0x3b3a828d2e9d3e08, 0x6382011d8d2d66d0
, 0x94987ca64d3d193d, 0x50ddf70d3b6d56af, 0x8d5df67cc8ad15a9, 0x39208098bc5b1f92, 0xce99f520dfd5a4fb, 0x323bbc87b86a7ba9, 0xe13f88a8d803c789, 0x56ffdcbdf2200055, 0x3aff0da31b24c72d, 0x70011566460c0c16, 0x76f7b7f53ac46a13, 0x1c069bfeb7077bc2
, 0x8f47193ca14a3c36, 0x6d73e34af088de3d, 0x634b2bd9317d6634, 0x5b404738b77f1ec8, 0xf34fabb71ca1cb1d, 0x054abbcaca546a46, 0xe8cdcadd08eda660, 0x6971abbf958bdef1, 0x41338557dddb4eaf, 0x1e158585b079b67c, 0xd2270474cfa26068, 0x53b36d32b3cea469
, 0x011523c16c543d08, 0x4668e92c5f73314e, 0xbaef3ebe4117acd1, 0x04037d1aa713931a, 0x68e118e4e390c68d, 0x6b80cd55a44c1575, 0x7307ea8a5729c032, 0x5cc5475feee99ab2, 0x34450e424c14ac75, 0x3f09157e5db3dcd8, 0x62ce2b1b50588052, 0x27a899c54e652f8f
, 0x0acd039f2fc2a5ed, 0x4b4044ddd5813eec, 0xc04d189e90a75958, 0x242551bce71d33a1, 0xd95af96b51f87f05, 0x02988820f809d815, 0xb27f65f73b9483c5, 0x2ef60745f4364b43, 0xcb66bdc93f4fb8b9, 0x2b86c9b48756bb8a, 0xf8ebdae09b9867a1, 0x441e70184e6fe9aa
, 0xfdc2530330cc1289, 0x47d8d65a8b4d6992, 0x8c03b6fa30ae74be, 0x1ca8693cc3bd99d5, 0x699eb1511018f2a6, 0x3da04764d9f4fff5, 0x361720433d3aab59, 0x2fa911612cb857ff, 0xa4057da10c2f1cac, 0x48a219b933a5c619, 0x42341020d15f0bc5, 0x73f8895046a09dad
, 0x1bad5312c67421b8, 0x4194771b368e622e, 0x8cc71a79e44e0dff, 0x4b4564e45467f1c2, 0x7759f16aafe52093, 0x391b71dcd75fbea9, 0x2a1c0694ab4ef798, 0x023087545444130d, 0x4b7ae1ffcfaa1aa1, 0x64e26f32d73361e7, 0x8da47038bd0b54b9, 0x148cfa6feaecee15
, 0x3756d4d479c2cc3d, 0x25d44ea8d31543de, 0xd82c8bef26bb2c43, 0x2c2047033d27f37f, 0x5bd33d9837dad260, 0x77943117a3383b7d, 0x12071d697ea583f2, 0x3c7c41272a225bf2, 0x92ebbdfaf1f03ad3, 0x5d61030c68b63704, 0xca6e2853baee75d1, 0x12404b34771a3636
, 0xbe13c46326667e4f, 0x2bd261916f9be3b0, 0x86e3f8cbadc80f89, 0x74520d8a1794cb48, 0x1e15c745024cf97e, 0x5cee741e1e53eb02, 0x8d088de0af99cda1, 0x625812961cc0862c, 0x4313437321c0e934, 0x60bbc768c424f7a4, 0xaba71fbf3c10e143, 0x37b8ea9f14a915b8
, 0x8d96ec65c40213ff, 0x74a08828ff77845c, 0xbedb7194daf607a3, 0x17e86671161c8706, 0xaceb98e0524059cf, 0x68552ac494916f09, 0x4cd2971baf1b3c47, 0x68442ebcdde21b70, 0x19629b8c0e867595, 0x6a6955d3635fa47a, 0x6fab45e0f2e393ad, 0x66dd3ef4fcf050c4
, 0xbb0b7abcfddc7df1, 0x14eb5b751b0bcf9c, 0x1cf79f9ca2fd411d, 0x5c496f73fff0600a, 0x49648d8555426d70, 0x46c1016a2322d8a9, 0xb57fdb870d9b6d4f, 0x609eb65209ddb633, 0xe70f9166bedc82c5, 0x772fb5b5c8afaf27, 0x79a294d9b0227a20, 0x7f75b141112dbc8d
, 0x98d1c7f88e070020, 0x5953d0aac48217b1, 0xe28253ebe15f33ff, 0x267d1dc11e614c45, 0xbe64f50ab99e2246, 0x4eaaab5c82fe5495, 0x927d5ac07e60bed0, 0x67d3786de6aa1b4d, 0xa71962bf0f6e2945, 0x63d93844a35eea9b, 0xb34228c7d26640ac, 0x169c38d2eb28f5a1
, 0x4b7972b33439dc22, 0x71478457cdaa1e14, 0x5226e125ec1d58c7, 0x669d8796e78fd4f1, 0x750dd1aaaa44a07f, 0x327c62b55aebbecf, 0x006b8e95b54fbd25, 0x2ab3f95d01eb364e, 0xfcbe5080c0d5e196, 0x2a1b9bd75a57e725, 0x1d2b2b6758139b5d, 0x751cf4af849b7a73
, 0x164a7d2e337d00a5, 0x00cee3a4cb83a4bc, 0x3498e0366dbe28f9, 0x053d899148d28502, 0x01665d64cab0fb69, 0x4a99132208d68e74, 0xba44bbd4bd3f915d, 0x1d34b0f9172122bb, 0x5d114dc729e8a9f3, 0x08e7a43dd5334b60, 0x28db8e9232f0f3e8, 0x5cb7be1b80264f62
, 0x9af2c78782508f23, 0x336ae7ccf7e3a1b2, 0x7fe2d4ee2dd194be, 0x573d2e1b2b8a6872, 0x3332ea3363b2ea36, 0x200bc1375b1f4243, 0x65c47c8c06b3260d, 0x42021fca53995c5e, 0x2f7e6cf49bb19946, 0x311fba6a23196d2c, 0xc30c13b62be0d70d, 0x61eeac142711b0dc
, 0x88526996597d35d4, 0x70169bcbe6bd21d7, 0xa0f1b2d0ad29a510, 0x2ade531472c1b94d, 0x11e320dc189873e7, 0x2d2a1794e85cdb38, 0xa0a8c453a6f621e3, 0x4b06d5b54525f6f7, 0xf42916691848ec1c, 0x1d4216555d578730, 0xf8c60da7290a5b4e, 0x66dd9f39a1f3565f
, 0x55ac29d937b474a0, 0x4291967a4a369ee4, 0x918dacaa12e6bc89, 0x3d46e8900651c310, 0xaf055430a00e90b1, 0x16f62bf56da5ca39, 0x1a021c33488c51e6, 0x0d64dadf63fbbcd5, 0x0918ece59dbfea7c, 0x3b3319d7dd74203a, 0x1d88545b8b9fa90c, 0x13b792dc908c59e6
, 0x0a2d939a9c3d0979, 0x321a5dbeb74bf127, 0x5e5947fff66d8470, 0x22ec9ecafd26bc99, 0xde17ca8293b10536, 0x593f56c0559dd846, 0x1148373375485023, 0x23c6b0fdf7448b1c, 0x377904458a27804f, 0x573e91962726ea70, 0x35e1b24f3235ac70, 0x51ba082049f4f85e
, 0x4bc4918160d47194, 0x5d29a21e3308e1dd, 0x7e15894b3e6e4e33, 0x50dbbd2f4f31d0fb, 0xef248bd235a9c9de, 0x3418add21b634710, 0x96c7233a52363bd2, 0x7c8414ad9a08c99f, 0xbc6acb4a54e6c05c, 0x5729021a1193579a, 0x0627c3e00b08fa1c, 0x3d0b4ff9e17c2a73
, 0xd507e8755990317f, 0x75b27bb3bc7bfe48, 0x44a80f2c6ce651f5, 0x7b9795fc1b706e46, 0x9de75bdefdf9a640, 0x75ade50ababffaa8, 0xce0ab116870889a0, 0x6f3ddcfcdd59ec6c, 0x6e36833588de0674, 0x291d1129ea28a073, 0xf8b8e53864884d61, 0x706ef8f1ae854d76
, 0x137a8c6583753069, 0x01e45f1cc620f966, 0xe28e1ff82f76c7ba, 0x36d29eace3e89c54, 0x83379f157f0b49cb, 0x65e9c39e2bacb937, 0x9b323c45070cda3e, 0x16e02f31ab7e2de5, 0x53bcf346635122b7, 0x1fd7e207d6c2de09, 0x3a5f5f94ea1e57ac, 0x0cba06e8d0f0b4df
, 0x70b440c387a9c392, 0x1e7dc143dee1d800, 0x5498ba6d7239912b, 0x332870a017182d14, 0x6be306fc672d794c, 0x2c2ce211245b2b4e, 0x109b722c8d2ba79f, 0x268520fa9c5f727a, 0x515b300524fe78ee, 0x736201eccbaea698, 0x4608ac113210bf78, 0x32d8fd919c441843
, 0xc9557e1b04b8f2d8, 0x775437f798dc7459, 0x1200f5585ba417f5, 0x2e00ec5f3e7ad304, 0xfc873d5f2b446288, 0x32270a93624876e4, 0xc646a47c08789b22, 0x2370d9fe925616be, 0x430afa3619e671c4, 0x156468ceac1f5fb2, 0x3b84dec2f2417635, 0x31140e9017c0e58f
, 0x5c85f88ccb7443fa, 0x0da75f5d64d864ac, 0x295ff44871b0fb84, 0x1b79e10bad3336c3, 0xffdf9942dd2977b3, 0x4c1b198d0f9a1a23, 0xba778a24c112864e, 0x74f66897f26d48d0, 0x3fd5c06e867ab611, 0x4b98ce33ff7878b9, 0xf7db4dce75cb9165, 0x11665aa099ec5163
, 0x2a498f16ae7118b9, 0x265ec3dbb4eb509a, 0x3da4230668ce2c86, 0x36e62baab2e33385, 0x99507d4a79ab4478, 0x25bfb2fc411e8875, 0xd7ac1ec933022ce1, 0x23d341ae033d0466, 0xd295b465e962bc00, 0x23d0211ba2d73180, 0xa03ccd7aff922d4d, 0x1e767148de301514
, 0xc241ab36a894efab, 0x1c9fc2f343fc1e58, 0xca3b96562bd27a87, 0x53623e2285dd7015, 0x557411f01c219420, 0x19265577096b42f9, 0xd3312d941b23592f, 0x30a9a9a1c3c51c06, 0x3d89b0b3ea6e8f79, 0x7eab751dc5c77cb2, 0xc0a9b186e6df6e36, 0x4f844d583f155694
, 0x419018232793dffa, 0x2add440b6bd3854d, 0xd55480f131df6e32, 0x318ce3846ae3e417, 0x0565062d1a0984f4, 0x6ebaec63d2bff9f6, 0x77075fe729e79790, 0x0dd9434624c8a4e7, 0xbf8f11e2dfa9b062, 0x1b17d8255ee8b364, 0x62c2150cf72c6344, 0x28106880d081e8dc
, 0xf4a4af0ddfec91c1, 0x1a8f0e6c977e1f2e, 0x72a7a3a738b9316f, 0x323716728c4e22ec, 0xc14069065ba4af3b, 0x081514248911d367, 0x51bd4afaa8b6c337, 0x50e77a9b513400e7, 0x46c0051b2a822548, 0x024886e41a5edcfc, 0xa06b0efa41cac17f, 0x336a30b01b9c5675
, 0x74fb2c10ca097626, 0x2b204caa48e90981, 0x6902c952b9a17b74, 0x39c2e9b6b922303b, 0xb9216b9b3c597419, 0x6d92930264f15f76, 0x7b1297d5eeae1427, 0x0f0744adfe1bd307, 0x33b57e265be6a89d, 0x282fa2e533356c10, 0x3a03995c61dc772c, 0x4f5d8f5e893dcff5
, 0x4bfc927efc48023f, 0x596f2241d6a685ae, 0x3cb3e0afec29b8a2, 0x31018e0d10653842, 0x2fd00fe944575626, 0x1241d8704982e011, 0x970d56664e6781a7, 0x1b05f49d0f3de2ce, 0xa994ffdf63717e66, 0x416374a76ba88e98, 0x8b082ced53f1579a, 0x56781dfab5d2aa4b
, 0x8151defd1865b318, 0x64669b840d6081f7, 0xe436f4bb5f38e14e, 0x43d438410a974b40, 0x5832ceb3d666be02, 0x06347d9e1ae1828e, 0x6979471b39e3ea86, 0x2cf2cf61cb4b5ae4, 0xb7ab29eada5a6ee4, 0x12e75cb29aca5768, 0xe65b1109d30d1ffc, 0x71f9becd6b320e5a
, 0xdc8289026647eed9, 0x31d62d050ca5458f, 0xea2bbf523a54c1e5, 0x602bf0b9e3ee5491, 0x25aa73622380ad4b, 0x2b6b1e3271df5f58, 0xdbc5efd86aa0470d, 0x05353c24b8c4354b, 0xa3c7db3cf5e06bca, 0x288a1c8f2b4ea5f7, 0xd6152f5e12ce7ca1, 0x59d4c1b436673c7d
, 0x1e02554e521fcb95, 0x66d3980f240ad440, 0xabf16f6b39a4d9d1, 0x7fea351ca94c2f62, 0x3d62b6f3389163ba, 0x0fc6b44f2e7895ea, 0xd5c64403cda7c669, 0x2e4099090e603193, 0x9b5c0faf15fa4c2f, 0x46295c9d8e12b639, 0x5ce4add63a5b331b, 0x5fa7bd736c4c5879
, 0x47b3471447d1aef2, 0x28004c1c22325739, 0xd588437d9a3c5299, 0x2ab19c1812cd27e8, 0x3ae700f680037802, 0x1ad163800b422b36, 0x45b7ef36fabc2139, 0x44bcdeff21dcbd1d, 0x41c6da2171e11c7b, 0x2c35ee79f7c4cc14, 0x4852942759c13849, 0x6492d26f10be050a
, 0xa6f54e988c50f0d9, 0x6a2db2b6dd62181b, 0xf7d9806b2a5e57a3, 0x57526bdb3ba53d20, 0x17ce6cb1f500e650, 0x05d841b042f8f345, 0xaa800a6c698de970, 0x04f4b559abe2cb8e, 0xc050dfd7259ce49d, 0x213839bdf94db935, 0xb371258655306204, 0x7d323b8b19f9705a
, 0x26d4502b16b6c618, 0x79717069aa89595b, 0xf867c0e36db41872, 0x13d601d86c76e1d0, 0x2dfc8b0d331b7383, 0x185472f3e42e8075, 0x05bd13e72b10eba0, 0x519a387490f79b95, 0x8d09c1b2d3ad2500, 0x045da45d2cf0f733, 0x640181956862426c, 0x728d57f59bfe1b09
, 0xf9a99f878da2c585, 0x4fc4831e61dc4e10, 0x6dc602cc54394fe0, 0x0484566b67e9e8ae, 0xc5fcf0474a93809b, 0x71c0c23a58f3e2bb, 0xb400fabe36fe6c43, 0x614c2f3eaee4c0a7, 0x7610a980d0e1c6c1, 0x1ce8197c88885dcc, 0xeade1c9f3ac2cb2b, 0x471ad07baf2f341e
, 0xd67a837c6b01121b, 0x2a8e64281f59cb59, 0x52e701e42f3262ca, 0x19e0a27dece50580, 0xb5691c17a7bda6ac, 0x43484c311b9df1f2, 0xa68155549bae49ea, 0x43a2c5dda225fae5, 0xfa5e992aed700eef, 0x58911f5623918856, 0x648b81a1e48c4da9, 0x66e6e30cbdd0c3bd
, 0xf3ba209c169d266b, 0x20f7a86230447685, 0xd1bb5aaa1a0c3d2e, 0x366c29843d1111f1, 0x06c78b642dcc9013, 0x27484a64e109e3fb, 0x8f8eacbca4677464, 0x0b6cb31b1dc24cc1, 0xdf69c84f898f0fa0, 0x2dd426744920f2a2, 0xc0912a197d4c5c69, 0x489ade7f6a98d8d6
, 0x458769f47f203e28, 0x124f4123fc05ac97, 0x3bb936f4ad6d7d67, 0x330954fed4f00ff8, 0xc2ce650046f90eaf, 0x7bf94762d4f9debd, 0x2e93172a586dfb83, 0x3c7a6062b4113d96, 0x5ddb0397147f0d93, 0x08e3596fc6839034, 0x374e67ff67639bfa, 0x19021c2119888232
, 0x002f5d04fdd55efa, 0x05b4c6e079e1baa3, 0xe5678ea3ad74c84c, 0x1c42f7826a58a77d, 0xe054668bd2cafacd, 0x237668d3ede4261c, 0xedf46a6374aebb32, 0x31ec8c5931cf0ef4, 0x955c2e95c35b5825, 0x27d8b0ea68259603, 0xb7a8976e427d1ec0, 0x6b6cc5c07152bd13
, 0x03d88f0ca0b244cd, 0x001cae9a8cfed897, 0xa844b3a1f693a7fd, 0x676c9acb7abdec96, 0x631b6bd5e0cdbd33, 0x29f289dc0cddd9b8, 0x0947d57536fb2eff, 0x1eb2ce650e3eb059, 0x2139b3a40e8bf405, 0x4165edfb39f4ae8d, 0xe061eda67a70d6a6, 0x2e3cc0328c9084f6
, 0x1ef8329ed056063f, 0x6d4d01ce49e8b3d5, 0x0110c92f1656d34b, 0x6dad1c4e170829e0, 0x584c56c590b477be, 0x597e5f0ad525e935, 0x6008264d8eb7d36d, 0x3f586754999c829e, 0x3d7ea89df5546a1d, 0x41754f7d9a3f4364, 0x3b0796822ef879a7, 0x1ab2779598262872
, 0xdc37c9f0bbef7923, 0x256ec818ec35a097, 0x4a72da5c09dd5846, 0x51df6c61edcad45c, 0xaef24fcdcf5ce819, 0x0ba6bb959ae689f1, 0xe667bd65a57b3a9e, 0x71ffd591a28a8e4a, 0x06c325fa53a7fadf, 0x6667f2986b2dcf13, 0x3ef751a6d52a09e4, 0x517a104240b8c74a
, 0xd08cddfd8c8183f5, 0x59237cc71b8147f1, 0xfff94fd188395933, 0x538acc592d10ef67, 0xac51ce386ff0eb1d, 0x69d42b8114c5fe65, 0xa17eda3995bfe8b9, 0x5dc6d98fdf05a341, 0xf2304d375ce8be78, 0x31b58521ecc483ca, 0x04d2d8140780222a, 0x3dc18b2be3ed95c9
, 0xa48e1639f2d70d2b, 0x4ffd54a6bc0f38d0, 0x8ae3c65ba6b7143b, 0x482eb41f9178fa9d, 0x240b8b4e87ad4f1d, 0x6d8532420059eb40, 0xc135f77e44275132, 0x6261076a0daae349, 0x35316bdb3842765c, 0x246165ba3a8bfd92, 0x1c2d774bd5177a75, 0x045a2f991647e3b6
, 0xed3b5923594671a8, 0x0514fada5acd4db5, 0xe8297fc358a0f50f, 0x7cd2badcf2952a91, 0x0da45130ea9ac266, 0x26a0d43c1e14c979, 0xbb62b729fe93a390, 0x360357aff7f67ccb, 0x3ad4835d1c7c59e8, 0x570daffd86fa470b, 0xd7c4be698fa3bd96, 0x17e4bdec2ad76ffc
, 0x43ce4ea9ead7dc51, 0x58ba7ae0d64a518e, 0xe014cc7e64680555, 0x03abc953ce2630b8, 0xa318620c7799be57, 0x2b258fa2e84da952, 0xdd88fdc5063b2ffd, 0x17371dd79a3aa556, 0x927b837578981299, 0x554552101d90ab2d, 0xb45306218ce54bd0, 0x59109b65ffdb6235
, 0x8663e0c4a180a515, 0x41467fe41c6604f4, 0xae2c1aa4dcb73878, 0x19d3cb02c6c07517, 0xaa147c97ea6745f1, 0x70dac71a31cac43c, 0xb9213ec26af87dfa, 0x67f228e9f60e7b25, 0xbfb59b8cf78df3df, 0x36687792a4256fa3, 0xe1be5c1f23177544, 0x786a9e1b644b1c90
, 0x4172f47393ca7f5b, 0x62ae5bb4b8aaeb59, 0xbcd9c431fa631b6f, 0x1fbe20b2edc9cc6d, 0x5fdd829fbc0ee085, 0x241dd315adc5dd59, 0xb4b688d625f7dbb6, 0x595a82fee5bed2d4, 0x69653ae0cc11880d, 0x2b9e85fefc402f76, 0xbb2495b507770a81, 0x05d20c575fb34731
, 0x9d9e623436485ab2, 0x27012a9665f3febb, 0x586cfef484c04ff7, 0x44a5860cc0eabfbe, 0x6fbfe6e2f3532e80, 0x05abeabaaf3220fe, 0x1bed21f2cb809678, 0x2aa62112b7eafed2, 0xe298837cf610190b, 0x1ec8fbbcef9158f8, 0x1efe9b3aa4f96f6b, 0x6a3b842a068b0ef3
, 0x92dd4b7cd7f827f7, 0x605175bbf3fd1c97, 0x139bb6419c1f6d98, 0x3a3ab2e9978db310, 0xc5c95941c9d5dd0b, 0x34c6c76025b2bce0, 0x0d44115a49bb8126, 0x7622cbeb11daf619, 0x785bff93164ef5ad, 0x7191647d355cb45d, 0x117f255c4cce6e5c, 0x581b448b0e9aae3e
, 0x54a4f3cb36225414, 0x790180c539bc4685, 0x47064043b7c6b96f, 0x43cccf5b3a2c010b, 0x1dfbf3afc14c3731, 0x1c368f3195572574, 0x00bc2ed3b5070b5a, 0x0332d8dd63b37f60, 0x0744b1908c9bd8f0, 0x2d258e628dacb9ce, 0xbba5b4bdb9c61e14, 0x0bca12295a34e996
, 0x059c84c66f2175d4, 0x1a3bed438790be78, 0xdf394f577dabb5b0, 0x304777e63b3c33e4, 0x59a29d4fe82c5a6a, 0x72e421d1e88e77a4, 0x69e6230313312959, 0x2da03aad8cf2bbb8, 0x2858d8608fecb0b6, 0x343099e7a40243a6, 0xba29b675d29a8f63, 0x3d2028a4f6f15886
, 0xf068e2d286047d0a, 0x14999b5d6c770e20, 0xd1874a592385da79, 0x78aeb552c15a1cd9, 0x482dcccc23e9c06e, 0x7b18a19fb54b5745, 0x036c896efe9a7a06, 0x2f2c2ce0d1871c13, 0x3b2d9b9ed65492c7, 0x0649c7e50819d077, 0xcdab66ea7b65e3cb, 0x49b15b40c4aaf03f };

// The table below consists of four mini-tables each generated using window width W = 8. 
// Number of point entries = 4 * 2^6 = 256 points, where each point (x,y) is represented using coordinates (x+y,y-x,2*d*t).
// Table size = 256 * 3 * 256 = 24KB
static const unsigned long long DOUBLE_SCALAR_TABLE[3072] = {
  0xe18a34f3a703e631, 0x287460bf1d502b5f, 0xe02e62f7e4f90353, 0x0c3ba0378b86acde, 0x90bf0f98b0937edc, 0x740b7c7824f0c555, 0xb321239123a01366, 0x4ffcf5b93a9557a5, 0x297afccbabda42bb, 0x5948d137556c97c6, 0xa8189a393330684c, 0x0caf2b720a341f27
, 0x892756b15bcf68c4, 0x5742f77c98a526ba, 0x340a5a1de9f89f9b, 0x14ef680aee75d0f7, 0x84e770e14043a41f, 0x0212c41116c33c95, 0x35b791e6de4dc0e2, 0x5949df08518d5d28, 0x6a0e120744ed10db, 0x5a5183ce844391d3, 0x6f618b158afdba50, 0x2ce2037e470e2088
, 0x1f49fa149a64ba3c, 0x5f9876d519670451, 0x030105056f55586b, 0x020f1a557d8fd726, 0xdf4cb175b06d86c8, 0x694fbcbe7fe58390, 0x7933294a756a1b67, 0x09dbe9924b58f8ec, 0x590f4403cdf197b6, 0x1c07969fc87a0ba7, 0xc496477712252367, 0x5508976022f1b096
, 0xefda361e452e1775, 0x7a0a0cccacc838fb, 0xb07e791c0be5dc5f, 0x24d9b6b418cbcb93, 0x497970f3c6117e03, 0x3986a158cb96d595, 0x8f80586ce692612b, 0x305cafda7e4df9d6, 0xc1a1c2e06452914a, 0x7ef989c0eb583079, 0x3a765b1f7364b099, 0x4fee236d58299c6b
, 0x6f81095f770e8419, 0x53bbd86b7396bc09, 0x2b72ba726b2b4210, 0x625dda1d2901c78b, 0x0ff5bc7b18cd2b3e, 0x0556598c7358d332, 0x0991245f20ff50d7, 0x0e7f58e5e919a97e, 0x5a0561373b758756, 0x6447bc93f87c198a, 0xf9230604c34c7520, 0x6b214425475c1bfa
, 0xe93de62d6a7f9497, 0x2129459d86f4493c, 0x456394c7c464cfe4, 0x612434fec3f4a1b3, 0x1ed91eddf44261f3, 0x0c6d3854f9e0a3ff, 0xd3fd153188a7e4e3, 0x24691fbdca16910c, 0xbe97465cd7625c9d, 0x2aa61cd373f759f4, 0x824d5763a326d62b, 0x1a0ae39e50da20ba
, 0x32d0c8481ee4c3b9, 0x6c3687109cdd18c6, 0xe52717142fbf95da, 0x67bfa41fb52ce9c6, 0x4e24d6a088a01474, 0x49a6ca0ae3fb6626, 0xd67f8faa9103191e, 0x674888f5aa6d3062, 0x4ba73824c2e85a99, 0x406b2fd18d35b314, 0xa7087b1bea728ac1, 0x11d2f222317b160e
, 0xf8946e007e23a469, 0x22a196fabbce31a2, 0x5309ee1bdc1216ba, 0x240fe9953827a324, 0xf9fcb89b63aeb5c7, 0x603b8149ed16b1b0, 0xb1f1876c02cf61fb, 0x4a5e32af612f948b, 0xfc491aede69a8813, 0x1ad9379136e53aa5, 0x5da50db1d5e6c123, 0x2f4014f7fe2c12ca
, 0xe4f6791d7685c3f5, 0x4c218521c3745a9b, 0x0c0521af98555f97, 0x1462a12953cada7b, 0x0bb2ab63d6452c1b, 0x5783c531ec98bb87, 0x737def53605dbc9c, 0x49f982b930e86719, 0x75b16790cb5211e3, 0x45ad6574cdbae99e, 0x1062b72dfeec9851, 0x45029a09cc468c88
, 0x532240de77f3a1f2, 0x17bd291eaa9ad0ea, 0xe0a2d7efc2f8a0a0, 0x3a7412052021778e, 0xb0dfb0976acc90df, 0x7fd603b689a7b1f3, 0x1152579ccb00d6c6, 0x6340743b631849a3, 0xebaa47290e0cda01, 0x143265a6d53fef0b, 0x45325d6fd981e75a, 0x0e9780cc39586f2a
, 0xa4f68d207a8628dd, 0x50d230b51893e841, 0xf3bd769a4bb504b6, 0x55975c063969292e, 0x07727ba25fb8756f, 0x07ff86cf8ed731fd, 0xef57fa40cc35a1f0, 0x70753a70874218fc, 0x615954e2342b973c, 0x5aa9d68f1a59df86, 0x3b8e9e9ff5e44468, 0x2e749114d60a3d23
, 0x14a1b91ec176db4b, 0x55f91a63d69aae6d, 0xf42382327b1b6d27, 0x2acf1f475facaafd, 0xfd9069b479b58968, 0x3baaf4e5c4a45f77, 0xa2ac9ab98a7aaab6, 0x5466cb5018f50981, 0x3e6ba27771ba3205, 0x31ea90cdea1bbbe4, 0x0000416b5c557393, 0x464cb0415a510d7d
, 0xd02087d206ff2bbf, 0x2b9c8ecd7fabe736, 0xb2b56d3842caab0d, 0x046ea0b7767700a7, 0x113a7a889e317310, 0x5992a354bef7d0ca, 0x3edda94ed50388bd, 0x052661f767839154, 0x4c28edf6e19e28e0, 0x1d19c2f2d2f644e5, 0x5d732148db35ab3d, 0x680c4714b83580f5
, 0xa374f282bb80ccec, 0x789e609bc77ae11c, 0x10d2577d599b45f2, 0x1c548b5b857721b1, 0x7baea726b4543fdf, 0x3c1562912d1b4ed2, 0xd6362203b7e82082, 0x1414e523d3c7a900, 0x7ca349951c1d23a9, 0x4da4265e3ce80fb4, 0x7981ebbcaca9ef36, 0x4ebac9e5b5bf980b
, 0xabd2c1dcf49cb5a4, 0x3f54acfc25c6340f, 0x202eeffabbd11cbd, 0x67216b7cb3695e8c, 0xff7cbcf9b23fc9f1, 0x2eebebdff7fa7afb, 0x71156befa111f85e, 0x1b8fd98df522902c, 0x6b28ebad62519791, 0x6cf0ea960e01d8ed, 0xb4617bc2006967d5, 0x323da065cb3df0ad
, 0x31687d0741e24d9c, 0x02db8f2b509a7cc2, 0x9243f85924320527, 0x68c360f01d6e6d2b, 0x2351c5e877d5306a, 0x6f56ccfc85c5f3a9, 0x1b09652837c4928f, 0x0b3337554c83f971, 0xe2931be2ccc783ec, 0x46829694ba08c64f, 0x9f35e36358e2c6ac, 0x1474b333b000d170
, 0x24d792756fc96640, 0x618fda9fef868c5e, 0xb7ff5b125afd9375, 0x778dd97e0440c258, 0xfbff314886219627, 0x3417e1e1e2a7e811, 0x21e959a88f7b7bdc, 0x3508c2eb8c3c8672, 0x827ecdde111c430f, 0x21bcb19fb07aa134, 0xe0c1fa50ab2f5746, 0x401e680b4e6658fa
, 0x2cc24bab313693cc, 0x20541c12b964447a, 0x374975b6fb81c3cc, 0x52905efb344e17f7, 0x79c5c9b56d8b5f9e, 0x3390bf75d2b9a3ec, 0x7ef3807d895bf4e4, 0x2814165a42046b51, 0x7f8cfd09326fe158, 0x3232fb4f4c9762ec, 0x5678d6dacc194d25, 0x6f7caffb0a7545e8
, 0xbd981637b23e7963, 0x691d7b7cb88a0ef5, 0x10ba319ae2062914, 0x06fb144f8295a85b, 0x80e620976bf62f8f, 0x2a425971ec73d6b4, 0x800aa9e741d10b1c, 0x230d7d8bd1a0469b, 0x65aace37428dfe8c, 0x0fcab5297f58b667, 0xcf0e9526943af7b8, 0x7d90915b75d4dae7
, 0x7455a46156259d6b, 0x29bcc06374cce1b5, 0xf2fb0ed3aa87aefd, 0x211a06af0e54dd58, 0x6c0c95c5723de9bc, 0x6299b6ed25008ca7, 0x7fd63e784d4dfb18, 0x2cc93b4d9bc1db30, 0xebc7e2d44c5d13ea, 0x3278e18d4d3d11a0, 0x349e3dd25a215f79, 0x7eb2a7150b30416d
, 0x05f3d7d5f6a094cb, 0x2a3771d48e331405, 0x08ef39e9dc96f009, 0x012248373a364992, 0xf758f92fc9fd4d33, 0x2339d8c6dfd3ca6c, 0x8b000965962673b4, 0x746ff43eb99d9054, 0x47ecdc054a422eff, 0x33d8f7c8267b7f0c, 0x22fe00ac921a42ae, 0x31e57f3d31fcd8e6
, 0xbb912315a1c50869, 0x4ac8cdb0fa7ebbaf, 0x0541d74a60973edf, 0x7234900334b2c5d7, 0xf2e545f730adfa33, 0x224e44e63db5ac96, 0xfcba3d005c6fdeb9, 0x2c93a4e6559936b5, 0x7727a0d7ad88d758, 0x2e33100216719cdd, 0x7b2ef89aeb2c0254, 0x1f6de5b74758afb4
, 0x6ae89047114fb321, 0x3d605e9a6ec6d80d, 0x18e915c727a874d8, 0x699088b5e9d0912f, 0xaf9344618e056f10, 0x1b9169df8245e0b3, 0x5eb8c33d70f4c891, 0x1609ddfb222b13c3, 0x8131c885d1b366ed, 0x7bc3cf9d9cb1a7b0, 0xd297478d2fc93968, 0x13cbb4573a4ea7f5
, 0xdd37b5cc64d5986b, 0x7ed3d1d7d81ab5dc, 0xac53485f23973c9e, 0x0705675d333b91d7, 0xade5d213c43186c1, 0x6a8bdf57b4bfdf14, 0xa87f88a1de717963, 0x17f29220b519bce2, 0x7af2d7fb0f95c610, 0x28d1d3923b144a7c, 0x8e73c3d8972813e1, 0x00100b40c62e72c1
, 0x84de7a81fa1f50da, 0x4fa391d6589d8244, 0xbcc3596f0834b285, 0x4d4acbd60a24e9ce, 0x97fa98b8c1835a0d, 0x33abcf8e29901d0b, 0x60a73d1975b3d082, 0x60666aa4325b948d, 0xad54adb769284a39, 0x227a98d113609b28, 0x4a1e1ffcae6a3872, 0x1e4ee44bd67f818c
, 0x5a74c6bb4387d315, 0x019428c0b1b18795, 0x5cc153e270bbb055, 0x2b3cabdf00dc4a61, 0x834110c026924b57, 0x2d30e985f2d9f217, 0x47116979333389f5, 0x53e3fd6a18202417, 0xb1393cd79c2e5864, 0x58d92935e4112e82, 0x86989a7ec8305b6d, 0x42a8fe4eee28f37a
, 0x74e212ef01591901, 0x3277917a0397b1b9, 0x7bbcbe6e3d687544, 0x0b8957701d09afb6, 0x6cfbc8ee74503668, 0x48a9925ada9f8348, 0x57045753ba2d0f4e, 0x7d69ca3866223d66, 0xc7054ce22917271f, 0x41bce1e1133b51de, 0x3a3ae42df81ec35e, 0x7eaada0f42d47cc3
, 0x13b138f1048a57cc, 0x64f98abd7e915a8f, 0x7af195eb16a0c732, 0x11be81a791d634d2, 0x97d8df47430f61b8, 0x0767c7b381271004, 0x3e949136fb940aa6, 0x3bdee340cd956dba, 0xb250ec4ff91d2602, 0x4cde2454d47f59db, 0xaf5e749530d978cb, 0x5a8e2f2119d4d835
, 0xdf1cb5425a0744df, 0x3d3b08a7bf35d055, 0xc6335e832de4719c, 0x6eb8d97e09154d42, 0x2f6a3f8de3d20dd9, 0x13f23cfd276233da, 0xb4a6b80dfc0fa41c, 0x58d876403acfd7d7, 0x2ad422078b8e139b, 0x73dbee2abbaf494d, 0x09a2758891eca3c8, 0x6ef9a9f1178b0938
, 0xfc7e9ecb90c637da, 0x3a04345fc10b1a7c, 0xc024e9cb62f9ff1f, 0x6c4f9c3aa4aa33d8, 0x049d6995b95ac1f0, 0x2243845195763a1b, 0xa1466a31700ac276, 0x600fb7123a325905, 0x9d391a64a0d35a24, 0x3b093b550641f108, 0x2275de5bfd2e221f, 0x25f5e7465963db1e
, 0x3e220107f7e7fb84, 0x6f06a23bc1b85a8e, 0xb4198d19f6eb0e48, 0x5dc11761dad45fda, 0xba303e492ab52a0d, 0x127c69c73da9f528, 0xd3a5b70cf6c790be, 0x0d72b0c50819da5c, 0x193f90d62ec2cdf7, 0x67f7d0cfc4f46daf, 0x7aec083d52f380ea, 0x7c0a1dda4a28bf4d
, 0x46fd20fe6008cba7, 0x7a588c914115d595, 0x8fb1d3daecf45f78, 0x0851dac094e7b036, 0xcae0a76e2a32a892, 0x104f861322dddb2f, 0xb79d81e46e1f9006, 0x1e4d28d7a2498912, 0xaf3175d3974b89bf, 0x613d00f9a69c55c2, 0x23f6883e8e65226f, 0x072f7ed65c6def05
, 0x6690e643bb38e243, 0x1a81c4a7c9189b15, 0x1056d1669e4749ae, 0x0137f2a7418f190c, 0xed3192796e699d16, 0x3ed76db45c38a37c, 0x78e86d1475a88243, 0x45985aacc495b16e, 0x47d5c8208e8f1030, 0x6dbe5f68b4d0e782, 0x08d3d0182cf7f26b, 0x64c375ce172fadbd
, 0xba0f6db3a20c2875, 0x57e1d90a53241250, 0x0315433fddf8e63e, 0x33344750e37dad9b, 0x62cc0d28ae69b016, 0x435fe80f6100d547, 0x5874aea8669d3df5, 0x3b96913f8264d4a9, 0x738067d6bb1314b0, 0x48cccf24cc6f4ccf, 0x6f5e2bbd68b777af, 0x34c2c37ba9635d66
, 0xd731534900fdbe5b, 0x4e4f9d97afe11d43, 0x81b41214351b73d7, 0x1d48d100ad11a5ae, 0x2a4ee76628e2b151, 0x34902e901877efb8, 0xb5a8561a0fd45394, 0x44317af6d5cd5ac0, 0x354c2469e9068bad, 0x0771fe2761cad022, 0xfda76ee8212d0f2b, 0x76cdeec6d4435495
, 0x55c98575b3e825fd, 0x2983325ed5d73a1b, 0x563c4c4fb3f466e7, 0x731b0fa413338bb0, 0xdeb519ca57a05240, 0x7a7e909b5c4f7351, 0xefb7c153dd2ab28e, 0x11ca1c865dee30b3, 0x013ca8348d9d7de1, 0x575e0bdaeee8cf9a, 0x464c98a21083af7f, 0x683ddcd85c212ee3
, 0x1171f0ab4cd02019, 0x22c7e01c7f4d64c8, 0x972ec0ef3f2e2ed3, 0x623f83c2611a476c, 0x99b3f16be9aa25a1, 0x2d3ebc5468990e0b, 0x5d5fba8546a4d5f2, 0x4716e6919d2986e3, 0x3ab2f2bc183f5d6c, 0x5f6257d3910cd4be, 0x341c6f2a78f94f2b, 0x6ee8390b8a5064f5
, 0x9d8640b9b83ca8e7, 0x033c5ad24466be3d, 0x6f6cd68db30dfd59, 0x52aa6b1c0f90f3f6, 0xfe7bcd4c97403646, 0x11ab3fc960b05fb0, 0x24584b77575896da, 0x427f8deb932da137, 0x928a28cb505306f0, 0x04ae916fe863820e, 0xaabaa98911b9cd3f, 0x59e588ba994d9145
, 0x9b8f1afabeee9e9f, 0x04ffc7ef3476ff8e, 0xe9cf53ce9937b146, 0x73fe42a801524448, 0x224bda3cf3bbaaad, 0x5fa85056d59884a4, 0x8e6eead48345726b, 0x09230936d41736d2, 0xe679eb58d1ad6be7, 0x08bb759b530b1eaf, 0x9688eb527860e24b, 0x13704d2daf9af278
, 0xd9273ac71b906f14, 0x57ee05fbbd40deb5, 0xb7788e19ba9e61eb, 0x7967b6dc1c5d9699, 0x36e043fc230127c0, 0x2a716598bb2d519c, 0xc017b2840d4d1b07, 0x1d3bfa489f756a3f, 0x4ad73abf24318d36, 0x1915e6f53e12625d, 0xb219a7c941f89084, 0x2280087a8f4762fc
, 0x8eb280345fd1b4e7, 0x55b8d4ee5772fd79, 0xc9e63a787e2ce2e1, 0x685741adbda93885, 0xffb830ab11a3b491, 0x7e891121f9356428, 0xc03aea271a629078, 0x71c45932930a2639, 0xe7df192a6bf81795, 0x704aee8f183aadf1, 0x06ddb55a8a7a63d7, 0x52556d8763f3033c
, 0xb76b458c6f0c33a7, 0x28666b87c362b95a, 0x365ae575a4c27b9b, 0x36ef35110562adfd, 0x89955dd8d927f9c7, 0x526e787d6a586c9e, 0x762e0bc4eff988c1, 0x6c9523b4b5ae4946, 0xe90a909688cfe95f, 0x658a7dc8b3ffada3, 0xbee148ba7a58520f, 0x6819007d8573d1cf
, 0x75d3b5ec141be9c5, 0x4bc236ae634f3c27, 0x1192fa9b8b30e894, 0x4129d43e1d092cbf, 0xfcac068558bbea45, 0x513e8d87b8116534, 0x5377a179a155ecd4, 0x6c93531e5545572f, 0x727df81ba09aad91, 0x07527139dbc96250, 0x150320b1d8ba172a, 0x2281e85f60a1809b
, 0x7164b7d524eba6af, 0x50d387163fea4ca8, 0xe90de17d62aebe78, 0x6ab369ba28c0410d, 0x17d07e315a95d138, 0x58b496352453fefd, 0xb87a04dbbc101b92, 0x40a8f0fb757e9b0e, 0x2148b48a696e64d1, 0x4e004a3a350c17d7, 0x17927e9f386b563e, 0x29da9cd441e3e3c5
, 0x883d2dc357417213, 0x2e94653ff7862644, 0x53a37af548453df1, 0x04475db3c300b93b, 0x2d65fa4d815e7204, 0x231a2db74c2c3ccd, 0x1fd734c0cf4d97cd, 0x32d255c105f6d122, 0xbb74fd9201eb07b0, 0x12e33f1c81ac6f60, 0xfb9a6439bea97072, 0x52e14b7db9cdcbc1
, 0x637ac1a91ae374cb, 0x1c8622c35adc8224, 0xeb786c50a64b7d33, 0x362823a7232a5893, 0xf22dafca688d472a, 0x18598f0e0237f7c4, 0x97b8497bfff4bcf1, 0x7abf4cb27a9c5b7f, 0xea47c44e3b3d95d3, 0x58728fe3e1827a43, 0x7fd3681a6df902c8, 0x6db1dbbdc413de79
, 0xbc4effed1ac3007f, 0x7f31a54744887cab, 0xe6559b4f8bd2519a, 0x18a78ec5b0c241db, 0xf6e10285b15d2030, 0x5c1323ea219a8ff4, 0x134b6f20dd116b47, 0x5d0abddbc8998733, 0xa3c993938702e151, 0x0ab6aeb494f6ad5d, 0x8cf3b4beda1815e6, 0x546ce323008c2fdc
, 0xa10eb5a6a78dbe39, 0x26d2e8a8b8457da4, 0x026ccbe31517d806, 0x2a35174b812f562c, 0x57d70499dd7a374d, 0x3368f951acd3c5e5, 0x490b2515f901062c, 0x316109e7c315c377, 0x32e20eba569535cf, 0x496a8c39d667d709, 0x5578096dc44d5e0f, 0x608a162ce73903b0
, 0x6b2e65852cb37cab, 0x75b09a2e6ed609a9, 0x7ac84b3082602455, 0x7690cbb594e84b94, 0xfc85dad9511973fb, 0x738a74b08c9006d0, 0x83233fc939d5883e, 0x7fbfc08b5db3c9f4, 0x81a0e493fb5f7749, 0x2c255ef7e69a77c1, 0x234f02e609cc656f, 0x5960cf0b961f3cec
, 0xac72940237b1f17a, 0x434e038a29d446ac, 0xca6a090e00d8b0c6, 0x1f1aad24001e473e, 0x6d64b6dc133399fe, 0x0899ba41e9dd4607, 0xca590b3f25bbf5df, 0x57217978b0d8ce11, 0xd6b4cb13da6de9ac, 0x3c88520cf564f75d, 0x649fbd5075a7757f, 0x3f2593b90fe72161
, 0xe1bee53e91dcc9a8, 0x010069dce4c74a92, 0xef83968978aa855c, 0x6cd8848183b53d73, 0x0b3df59610e403eb, 0x713225d446180a7f, 0xcc23112cc59850e2, 0x105796b670a3730c, 0xa147f4ec7a2fa4cf, 0x32da1f072d75b253, 0x4e7007455e85f560, 0x76a5376a771fdd60
, 0x47eb4fabdcc699f7, 0x4e45db6334c6ed96, 0x36066f2bab72546f, 0x04f48065593ecdec, 0x3fec02793fbb5601, 0x122f74626b64a526, 0x21d0f66ff83b4dbd, 0x1370610ede647f1c, 0x57b82242b88172c9, 0x527dcbadfdc65ade, 0x5e9c9a04385c93f5, 0x64d1cf9e52548a6c
, 0xba0073337865c994, 0x633ee14e50bcd615, 0xf840228ec4251095, 0x49bb96812a98f08d, 0x82f57d0422f96678, 0x06d7e43bffe7e0e1, 0x33910cca752ae863, 0x04d46e7c66087e38, 0xf14935c4167017c3, 0x3f22e2f44d03c9ac, 0xa6196244f2cd6164, 0x15a2b4ce514fa4db
, 0x5191a04c4abbd0c4, 0x0e763360ecc8a19d, 0xfef583c184a673c0, 0x75c2f30a7c7433e7, 0xe947a55547c7c099, 0x245c7ae44f6e7a83, 0x67a666f9e6bec2d4, 0x5de0b922fa645ac8, 0xdd9b3e4a5cb72e22, 0x0139c2c857adba8e, 0xa7feb68e863ac231, 0x501381ef88ec2da0
, 0xb2b8c6a470f40b01, 0x051d65bdb8363062, 0x4ce90414a6d65714, 0x1e510b525d19df0c, 0x569e723f5d374cf6, 0x4bfe02fd38fde1f0, 0xae7459ebc50f9aa2, 0x0f7e2cb170dfde32, 0x3c3da2326a7407cb, 0x0cfc50a85ffd1842, 0x62ab34c85e85c3c8, 0x22b4d9644bb37333
, 0x57d313b3d87c2d98, 0x4f432c1cba49133f, 0x6163d11fa4befc0c, 0x1ab94e122fddf12e, 0xfb7c9358aefc85a8, 0x5b20068f81d949b1, 0xcf8ed6ff2145c810, 0x5794afc021932d00, 0x5c8987ad9b6e35d5, 0x6bb1f4b836fda03e, 0x794f1fed4a3ea1d7, 0x0cf6d128deb0e7bf
, 0x54ec3e1c65878cf5, 0x002811763ba2200e, 0x382d917051e77b71, 0x49e00cbd013a9e7f, 0xccf576e9a4cf019c, 0x4b4a66287970333a, 0xf772168915edfc1f, 0x278eb5eca6479685, 0x8a95c8b9cf41cf06, 0x6e58c9c7826d39db, 0x478e119889f2fe75, 0x73ecd21991bd98d4
, 0x26e751fe9fbb9502, 0x29825b71b0632e95, 0x21668f96ef8bb5c5, 0x2f2a899e53c9a004, 0x2803292ed4345ce8, 0x72731055c7c65dec, 0x3aaaca9c4b6fe9a5, 0x6228d3ceda8bd671, 0x773e2c5effc48eaf, 0x017ab19e0fea9ac9, 0x9609e10496c8d766, 0x121e89f9b302c30f
, 0x4e87d00a0be96480, 0x09bd8d170ba9dbab, 0xc6756f947ecd4e52, 0x2c9e40bbbccd0f5b, 0x42a5b77669fd812e, 0x66aba9583b080d9e, 0xee55df99d16e77c1, 0x4cc00c5c5eff2509, 0x8c84d5e20ab7c16b, 0x00ae5c96184ffefb, 0xb295e90346dcef54, 0x5d1bda0a39dc3b72
, 0x75f92d72a89b5ef2, 0x259d998c9ff9ac0e, 0x8a1cfb72a6c433c1, 0x23f5b71d49d67604, 0x478d8f30914f62ef, 0x08fe61135218eca9, 0x4da2ce9bc6488c4a, 0x15f1eafd35283e2e, 0xc2d2be3ebc42ea0f, 0x2a5216539d6ee902, 0xa1e99052e7bdeeb2, 0x3a8f2631ec78290c
, 0xb71518a82ebfbfe4, 0x24700671c46ebddc, 0x6ef52d591a221f75, 0x4794614db6a67d92, 0x761f5c8ee4bab607, 0x31d9dd8f2361b5d5, 0x1a45593be8db3b29, 0x7f06c365eb116260, 0x9d305a66e52eb65b, 0x5edcfcb5613eac18, 0xef34fd28154adb75, 0x790f805753b9d742
, 0x6ecd5ac255dfb797, 0x0cbe14db5d9a88db, 0xc1c86c5efa815528, 0x2c636133ba59d887, 0xc75d42c2d9f52297, 0x4bd3540c21e2ebd3, 0x32e7cdf790de6903, 0x1aae3c9837d3e30a, 0xeed028e49d436f09, 0x779ae12351efed1c, 0x6e0145587d9797a5, 0x25156e4cee9a407b
, 0xac2fd82f2ac57119, 0x7f8c026f1d182ed2, 0xeacc0d8fb3241611, 0x5968db65d2d7545a, 0x7d525846b1121dbe, 0x57949fd7b80339cf, 0x471fe9bec9b66c01, 0x5c270057f1268efa, 0xce092463083f656e, 0x16e8241cdc862cf9, 0xb7cb2bbcaa06b312, 0x3c25936bd8863416
, 0x19b8ca966c4a3827, 0x1ae43badfd21e63e, 0x1dfd002b95a6ac6a, 0x4708e27f6d98e997, 0xb5fd6322dc31ac7d, 0x53baf4d9a16dd550, 0x025aa2ea5463960c, 0x5b5b33c7a3cfa54f, 0xdba287866ee96b90, 0x4748c1f3f3a6dc4f, 0x2333ec05a80c154b, 0x4a47745d5b99fb96
, 0x44955b062a6ecded, 0x7791feea9015f170, 0x736bf603d12fc35a, 0x2632adbca5388026, 0x956e4c48e1697c4f, 0x4ee9adfe8600e32d, 0xa584042a0da56406, 0x34a3d7f4bf457353, 0x8d4fd4fe00176fab, 0x15321ee855941f4e, 0x670701ef81f340a4, 0x0c7d7c618aed0ba8
, 0x73283131d9bfd9d6, 0x34935a39e31bac65, 0x466cfbbcaae8b991, 0x250dd54e18478ac6, 0x659e46c51e40de4f, 0x618ea014fec50e04, 0xfe64d883080b877c, 0x572cabbb6688c4f7, 0xa2c817493a834146, 0x06cd734876378120, 0xe3de0b717336a849, 0x36942f5191db53c4
, 0xa3f9adf66abf4d88, 0x2a9a144b8087fa96, 0xfe49fefcb78a5b4f, 0x1be40a8616928bab, 0x07a901975521f7aa, 0x1fc66ea683693510, 0x4dbf0084ba42380e, 0x1f374495b918c737, 0xb8346956a380a00a, 0x1346f4766fcdaa07, 0xb4db5689d46312c1, 0x775e7f3274dc1316
, 0x07898828f32341c0, 0x144390a33b3e86df, 0x70bc604ce1e9c5e4, 0x127652de00220873, 0x2874bc669df50d45, 0x236f4585150161f4, 0x3bfa4ffd318214e2, 0x7cc92a6165059745, 0x2fae0e92090ef72a, 0x26676bd59c4fcc3b, 0x220c030974d1d447, 0x66455887e98686e7
, 0x4164b8e4d8760ddc, 0x5517a86f840feb63, 0xd9b42c6c9371cade, 0x3a7f03ceecc160b9, 0xdd4086d64cae366c, 0x1b6290c327842533, 0x144efcd2a7a0e82b, 0x16621925ca10d31e, 0xa9dcd13118e208f1, 0x5a90f97edcb1c54e, 0x80c47331c8749d99, 0x6f061a3569a80b55
, 0x0f6abf619e2a15c5, 0x29106c98122245f4, 0x5860b10985c9b47f, 0x4f379a379e15f410, 0x2dd6f45df68e1678, 0x2c475167ad9b283c, 0x23b7aa00952a6a3a, 0x5532bc26a40c5365, 0xa5c0a8be3596ce22, 0x4fa3127a9aefa56f, 0x944e843aa973e67f, 0x3c7727d45ae87854
, 0x48fa2ce675117ea4, 0x7bca8e04ad3bbb9c, 0xd57439e4726f88e5, 0x3337d3a6a03b2286, 0xb0b6172902005953, 0x514bd76734e6c0a1, 0xf97f8934eed7c6b4, 0x0abe13cee7f1b75e, 0x6c88107a120e54a7, 0x634f966d7a6e11df, 0x5044c53109b94097, 0x68d49fc65522b73a
, 0x69e295cd8c444666, 0x542c4c5fd999a224, 0x13ff89418b5da76f, 0x7133fa786a87ecb4, 0x2f180926456402b4, 0x52ddada7931c4dcc, 0x6eaf0d2130c71590, 0x014ec2a2ec231826, 0xac05b61443b34dd6, 0x157acbfab118b219, 0xe4e2f4b84ad01099, 0x0abf4a4da29a0eb8
, 0x5f852b85b59eab1f, 0x1bd259c4726869ed, 0xce565d9287790a15, 0x17a48442bcf58a00, 0x01e519522381363b, 0x2336d07a710da07a, 0xcfebf2fbdc714cb2, 0x2f7a51474c23b8a9, 0x77db2a07d4e3716c, 0x40e8d8d2d0a09806, 0x644363ce6d401ae4, 0x53f9cae0470172fd
, 0x58d96ecd8ddadc53, 0x15028204f3d6d696, 0x6f40a09214439ce2, 0x738c5371236c3e56, 0x64f87ee7a28bf9fc, 0x4f1899449a810fee, 0xd0aa95f4bf21e376, 0x6170cc24283856bc, 0x9dfc4927d764ff75, 0x227ea1563fa2e012, 0xaddd3665622ce087, 0x473d3bea07a5285e
, 0xc0b986ee0d2b0eb2, 0x78e584c740dd18ed, 0xd5adbf30a04fd508, 0x1c6aed5ab59bedbb, 0x25d05fccbddb5ba1, 0x4a58fb6b3f896319, 0xdb2f6343fd8144fa, 0x46a445de6d5b07e5, 0xf67a06684fe9e1da, 0x57b2515923b15c9f, 0x50439940820a2a0c, 0x62f4b9b26f04dab5
, 0xe79ea601d01b033d, 0x009bc6176f10fffb, 0x333bff2f907ed39a, 0x253d0a9e626dd400, 0x7a9bbedcfcbef06a, 0x2d1b6a7a5b39342d, 0xbadfb462a124cc9a, 0x2e8cde9d82c15cb0, 0x7c3f81bcd6f1b2a1, 0x04cb0b8fa4075294, 0xfa36d3db38cbd304, 0x59fef93442883553
, 0x91982a741cb9342e, 0x7b9d63ac17b01982, 0x530b4ec25a293ece, 0x611069ad9fa0f0a4, 0x7a262a59b656a79d, 0x6fe6f8f4d6d015b0, 0x2c2fd7641a5d4e50, 0x24b0c507058c911c, 0x834882e492fe45ae, 0x68d0b01b13432761, 0x0eacaaaf94178b8c, 0x123e3a93006d7d01
, 0xecf2fe69377ff33c, 0x4fc960ab4408584b, 0x2adc445b1ee45654, 0x4989681cd1d09a93, 0x79509599afe9e3b6, 0x7f6ffbbeee861c15, 0x2ed2859fd6391b25, 0x5e8bd52289b6ad27, 0xc949280adbce7c79, 0x510999e865f0cd54, 0x7f957314ce7d373b, 0x4b2c0ea4bab08ef2
, 0x2d7cc08b5c05a8db, 0x4609a0ea23507697, 0xe204ba35182c55b8, 0x5e4d5903fdef61e6, 0xfe63842f2826598b, 0x782a3fd3ab62a179, 0xd2f01a1979e5a0f3, 0x0fb4c6bdd637fba2, 0xfbff4c192020c350, 0x14859008c3d223c0, 0x65ed7a889c1a2e55, 0x1d78daf483fa12cb
, 0x5b54d11b01bc09ca, 0x54fde75737306515, 0x89725231105b63a7, 0x712d1f394adcda99, 0xb554006ee9abefab, 0x04dd8f7bbd4c5381, 0x98d22b3a31995549, 0x637a53de6b57122f, 0x8367d69b4c92da63, 0x236f2a9514250df6, 0xb265509af63d7b7c, 0x08522e36bc4b65f8
, 0xabae725012ce8301, 0x493b257197a98ce9, 0x33185838570e5f0a, 0x65f5477ac414eb6c, 0xd002a36854699753, 0x2be693b4d96efdb3, 0x3b32484119bdc53d, 0x55691ac09a8fae1e, 0x0249e394514c047f, 0x765674c90b78171f, 0x1166f64638d6ab37, 0x746adba4cb52d18f
, 0x93e293653dda6cda, 0x5d004ed52ebf0b68, 0x65c7c42d0ad96cc2, 0x3350dbe11cafca74, 0xc638cfa8942fef67, 0x0ff2dfffc5ac1164, 0x9e1b625e649aa471, 0x13a219d03d2eb86d, 0xdb92859ebaf9f7f9, 0x645c50918f7d5abc, 0x25c10cfe99f7e5c6, 0x13d858b53f90170d
, 0xddb258b13ab1e7a6, 0x4849ff49f4e13fc4, 0x9ef87fa85511cda8, 0x48c50d4d3b4d2f7a, 0x6c98422c8007c9ac, 0x3fdd72e65a3d3491, 0x56b18cb165b4ec3b, 0x6e2c6df9e3fc3daa, 0xf6db5aa98ddc97a4, 0x423fd4082f3fb795, 0x42f8f5edf424d0a0, 0x1a091c2696139936
, 0x3161c2bbb3b2d58a, 0x2e8d339eb0fb9099, 0x45ef7d11f6fab685, 0x7f222a068db3da4b, 0x9af96f9742549a7c, 0x55370df31dcec81c, 0xde98e81b131af02e, 0x58bd0622a474acee, 0x8ab40fa7ca882e0d, 0x5b4db195655f2410, 0x4754eb479ada77fd, 0x67a8a437d6fc8a7d
, 0x9888254a4f0c9d58, 0x3232ba83bed0c618, 0x587b0de0207b57d9, 0x020df6becb096aa7, 0xef9e41052a29a8ab, 0x4ae671ee70a15a69, 0x167ce954923ee086, 0x6878c3996c1de887, 0xb29c711490ac097e, 0x1cf41a9c2577d144, 0x0590796ba46d8d29, 0x1c2e6dc8d4aebb65
, 0xbfb904f8ac9b4cb9, 0x4ea1742c786469e7, 0x5a422f48401be57d, 0x0be0afdc77d6d32f, 0x5e8765cba2c738d3, 0x7dad0475059a089d, 0x9288ae0c40df7df6, 0x51c65f97715a16d5, 0xa9615d4c786ff9d4, 0x507ffe03ec0189ef, 0x1c1f46684604e41f, 0x282fe9d567db0efc
, 0xebee7f8381fb8178, 0x5bd4b6045c208d57, 0xf35694743439ed71, 0x7cddd5a373ebc5ec, 0xa58df33cc68e3b5f, 0x40e6714f5c5c8df3, 0xea881d4bfd489131, 0x6b36400b491c28c1, 0xd4475cf594b6303b, 0x5b630cddc72e654a, 0xa0b587ad34394ce3, 0x3ea3ba6014f86275
, 0xc3deac125d20eeee, 0x2ef3568410a2b3bb, 0xee6ba3fac5d7ec00, 0x5fabcb3337aaa23c, 0x6b1212e7b817889a, 0x0b37d285a9be51d1, 0x617ca543d762bf51, 0x0896b4ca694b01d0, 0xe3add9718277a1fb, 0x553dee7dd4784865, 0x904b8f7e936cf430, 0x5b6a78f20b244b90
, 0xa2b876c2914b9bfa, 0x704de952e9d969f4, 0xb04ea1b54b7e7654, 0x5d307bb3949cf660, 0xcee4c23ebd049d17, 0x7a88293bb1031063, 0x00b8432b8286f656, 0x260a9c86a16216e5, 0xd140e6e6629d8686, 0x296011ff5601a000, 0x536f0f76cd9b2928, 0x267409c23a823dd4
, 0x0f041043797f8423, 0x3da6102605962ca9, 0x2e69dfeea02098ea, 0x427e7eeeecd3a0c5, 0x75efa5e8a590793d, 0x1f5841df6dfdfc91, 0x1aa1e1b8b9f3c326, 0x07bd5b0983fcee91, 0xd169420be9c48939, 0x7940334f0bb9023d, 0x9bb330fff113764f, 0x674ff1b0cfe246c7
, 0xe2083f8d7129cbab, 0x7e6223e3d9c04904, 0x9be411a7d5e883a3, 0x72642664e7c25590, 0xbb1f783b5c412322, 0x46716e8fd737280b, 0xfa363eeaeffde271, 0x6c256c131fc2c3b9, 0x13259abfcb2ce1d8, 0x53b96556e96aa708, 0xfaa7c8d25119da19, 0x05019f438e9f8995
, 0x05e1d55a9424f1ee, 0x63e8e14e6c2f3f09, 0xe9d844e997a10158, 0x51904ed1e94a0ca5, 0xb09462d4df6bc6cc, 0x2ee5308e62172691, 0x3f8438484547187a, 0x62b92b8d9739ddd4, 0x3ca54ab5d39f083c, 0x25b3336048a288d4, 0x7cab0fd67e296979, 0x58ba2e783962cbb7
, 0x77808f1a1b8f3515, 0x290c219ee7153bdd, 0x7584441f79128f01, 0x0442db406f5135e3, 0xe741de52ec030a9d, 0x37469756586776b2, 0xbd64c2a7173adde0, 0x2280b66d20888d0c, 0xdd1b53cb4adb0fb2, 0x3974964394c445be, 0x53b6a95e7c7fdd97, 0x6eacdc6f50496d95
, 0x178d04c0578a5bb3, 0x0d171a5f5215c9c8, 0xfe0d0171c504962e, 0x04eece54b220495e, 0xac4d145001db67aa, 0x6577c466962160af, 0xcddae62d99686ad7, 0x7a053a048d230d89, 0x1ff09aa0e605a880, 0x5d260426f355232f, 0xfbdaf7b0b53aab89, 0x5eef31b9eb0df78c
, 0xfb787e56b7276288, 0x4dcccba87d630d06, 0x415e4a4bc0a44b01, 0x0f0a981f71d8ae33, 0xe0ebb786f98a1502, 0x0ea4aa3ce70dc628, 0x8d36240617ebe037, 0x2d20c0e1d2002b5b, 0x336f8aa411a30282, 0x1d87c67d8178ec4c, 0xe468dff8ac26b63b, 0x266086bd7f11c9bc
, 0x05cfeedc80d829f8, 0x146902a029dd3355, 0x413db9327c068394, 0x55fa413791f64c38, 0xe06395c10021bf9d, 0x18d66268cf79ce45, 0x9e7ae6858dcc21bf, 0x3ad51dbe97b558f7, 0x06792c747aeef43c, 0x27ec9b782170abb7, 0x6aafca394a23e935, 0x18f7cbd98db64112
, 0x34146ce6b36edbfa, 0x1dcfb4eab7ccea23, 0x68498e1f45b35467, 0x1b20d71a3b71d412, 0x7a875fc94e602e3e, 0x78c15fa449576c2b, 0xb52326d01ccafe8a, 0x3f53f57324d70666, 0x3830836e39bcebaa, 0x27a30c73dd02c884, 0x5dfed73dedf2306f, 0x75ee4a8b6cf54f74
, 0x97ecc9c5851a8e3e, 0x496b581690c3df2d, 0xf7bba1fe2d169e7d, 0x4b06184810a77bd3, 0x40e6d643b903c7bd, 0x3c90f63b5176906d, 0x92f47e1ac51f1ec6, 0x70c2454c53cc0dcf, 0xb5a75d246c653b4e, 0x7e5173a420a8b0df, 0xcafb44c471d0f4a3, 0x69a3a4e92bbe5977
, 0x26e93183cdfeb424, 0x1e0489b56fa7e130, 0x669befa672fe9979, 0x0f8aea6a7ef65bf9, 0xff0b883ea96b51ff, 0x31a668763c3c8867, 0x6887a0029701c9be, 0x545644cd70c87d63, 0x537b6fb7db9410e0, 0x6ca227f10229b3b9, 0xc7d1b4d71ff22468, 0x522058d3b20569f9
, 0x5f4bfd813a51fb62, 0x105b94a3a42424a1, 0x96dfdb685825857b, 0x14d98588154500bf, 0xb4db83514c7a9404, 0x67aaf998856faf37, 0x1229d7e95dbc821c, 0x7e617a17a2f72bd3, 0xe964cdba7222695a, 0x677619cc40a07eaf, 0x7f82c099a8df7538, 0x2a219175ec95a1ad
, 0x755ac147b51ff3dc, 0x4a87f652f86823ec, 0x6d8d4a923f50278d, 0x4bb952ac98c0120a, 0x968c57a6a31e482c, 0x0855a11481fd5653, 0x3f05db6ac608d16d, 0x33f9e5746e1079c6, 0x1f3458e3ec51f53a, 0x4ae3fc836ceccf81, 0x3c0b2e2db5875ddf, 0x42336a1262cbb5e0
, 0xe3651453cadc3868, 0x25081cfd6e80a2de, 0xd4cb31092872e53a, 0x16ca9349a11a9c37, 0xb1d3ae440d1cb675, 0x41b2d6ecbccbd6a4, 0x475e6a844c3d0ca1, 0x2cd0e0dedbf07023, 0x85ad446ddb002a6e, 0x72a06e5419a64609, 0x9e779387e9a3276c, 0x414a8163a9408b10
, 0x25c7b53c1791333e, 0x3ea57190b42cd838, 0xbf20b346b094f121, 0x47570cba99b06c9d, 0xe6bd01c8746cb5f2, 0x3c0b0b8c4c0968ef, 0xb22009690e243975, 0x251737e4a5643da2, 0x3cdd49123ab89dea, 0x68748cd1e3cc45a6, 0x563746685effea7b, 0x4e4c5b1c86eb3a29
, 0xe1ba017516d32070, 0x5cdd35a0c4ba93a3, 0xdbc66a0c7de30288, 0x22107156a0f700f1, 0x0fb69045aac0f647, 0x111dcb9763d08bc0, 0x266db39f6d78cced, 0x02a32587c7033892, 0x76fc94ce6a2a4b19, 0x474db0f12fcfa96f, 0x0c44584c08377ac7, 0x5f435bf43140f4c0
, 0xb9741c3014eef7a3, 0x54596c23b536ff04, 0xeadf56bb6ea39450, 0x32f24f6e1a656b10, 0x21422e4dd5f54e3f, 0x0d6ad57853660607, 0xf6f62ffdd0bf9928, 0x72569c930015caa7, 0xf4293579931b9216, 0x049d6a4057e6827e, 0x6223e20060be0e05, 0x20d91ae969dfa9a4
, 0x02611b345456d47a, 0x601dd413d1bdea0f, 0xe6b017b26bbc9bf8, 0x63399ff3d6542359, 0xdbdfe225045a9764, 0x10acd93346649beb, 0xc652d5a50e0535ce, 0x49efbd5639c4caf1, 0x65a5dbd8a304de65, 0x08ddebed0e865be8, 0x5db8337d5e715261, 0x34cf4c75496807e2
, 0xd840c7416e44b56a, 0x10fd30d282d8b151, 0x36ffe6df2c1c9568, 0x66d8a38b6d31a2b1, 0x01fad3aa61984774, 0x412a9fd87b303d90, 0x2720945ee0f0ec9e, 0x0c91b4c7ea84cf37, 0x98462f25fd5832f0, 0x6f4cd578c490d842, 0xecc7d24c31ed3342, 0x580ab96994515fd8
, 0x6d8a97ed98465b3e, 0x16995dc010908ae3, 0x50626a4e555b774a, 0x082636e5a8a9b568, 0xa99435cc4823b413, 0x41fc423d10eff4e7, 0x114236dce6f9f9dd, 0x6c3995c4bbe0aadc, 0xf3f22c975935753d, 0x6b1b3f27edec2a78, 0xdbadaac32ccc292e, 0x3856036f8a3795aa
, 0x947154caaec01d73, 0x0a22e573e3f0f49b, 0xc50c949f39c184a3, 0x2aadd0868535d0c8, 0x22bc5bbe5f992446, 0x15d36adfca3ace90, 0x038010e37a6308f9, 0x161b06d8d7180307, 0xcfbf4e3abef8d056, 0x2a1765fe9c7696ba, 0x6a15d44ce18ef392, 0x5405239c0369de64
, 0x5fabda1210f58e29, 0x40cbb03974b37035, 0xa29fdf2875322520, 0x3b32ace85edac547, 0x0f0c92b41d679df8, 0x7f07ecd47a7d2f0c, 0xb5fc65c05accc95a, 0x0e8b1da70636f221, 0xb2ebd131f4e8a846, 0x7df51e4aba57f391, 0xaa2f3d40fef689ed, 0x0ee1e115fde5d582
, 0xf7d025b42e240ae6, 0x29fc1befeb526af2, 0x7c5ffcaff205e565, 0x4cf4d0d8840e2e1e, 0xb8b00d1810ad0ff6, 0x44d3af686ba915ff, 0x86a8fd1eeea8d08c, 0x3eb300adcf6edc4f, 0x8db03c266b588186, 0x289d0fd301e96881, 0xba83ba260cccc170, 0x26ee69546ceb0c77
, 0x1109d8bf92c4ea05, 0x033aa036671937d1, 0x4bd9902e5a664a0b, 0x42bd48ed44fdbb71, 0x7359e19357a9622d, 0x0d6ee92855dae22f, 0xc24debb323643859, 0x4c60fee1e191766e, 0x3beaec0e99faa328, 0x056c2ae1709c5b0a, 0x7fe89e0c62710909, 0x7e3b5cd3ac4e6ce1
, 0xe9d06486ac7370a4, 0x4b1a8c62e99f9429, 0xb11a50e20bc3197f, 0x75ec513c25dac300, 0xfb9fd064b1466dca, 0x290379cfce59308c, 0xca3ee3fb7db99943, 0x2af7a3e930faea44, 0x0d294e6d1505e35b, 0x7d534585181e001f, 0x90285700831d4cfe, 0x419f25105d06c90e
, 0x5f71e79f5f828172, 0x02921e2a43326798, 0xa0981553e84d4a6a, 0x220c82041938573d, 0xfd2b5b78ef20c927, 0x3c99a2dc611caddb, 0xfb1247fd99ed2828, 0x4b3a3739f724890c, 0x7775ea2d7d2d1017, 0x3ab07cb5ba8ac987, 0x82e5123a20a6b5c3, 0x44965098aa82161f
, 0x20948c77e9ac4c0c, 0x521e934ab214157d, 0xc8f4f4052dffedab, 0x1da963c2ef46f27f, 0x3be7631e212fa2e0, 0x0d188e88d1a4184e, 0xb4483ed385de4bae, 0x4ffadfde83d2b0d9, 0xacebd9a51a938608, 0x40968c0c9302b0e8, 0x85704404d06f3a5d, 0x3e9f477a61a26d37
, 0x1da1efc7cbd18d12, 0x4fb87a47b9f2cb04, 0x7556a45e8b5c8caf, 0x7f6991b7723b35cc, 0x3fa10a169532635f, 0x15e61b1cd72bd52f, 0xe6b45dc3b4667c21, 0x45cf3bd4bbf39baf, 0x7343b0636a9d63f9, 0x457551c49ac49567, 0x331e611a3fcec018, 0x7d19e2584756b92d
, 0x78951df174059655, 0x0573cd896a793337, 0xb3e37121fd458870, 0x3cc032b1a1bebc3c, 0x2571dd06d24d5a41, 0x017382ec4aa29ffa, 0x6cda850c15a224ed, 0x6af59bee2d7586d4, 0x287d3c4027f80ee9, 0x6aa570b9e51d4f25, 0xf29f327c5e0490d5, 0x00fb62f93f43edfb
, 0x7b06e602dc313277, 0x5d8dc98e723b039e, 0x5bb61813041a589a, 0x2a4c9f13eef7f1ec, 0x9439edcb4bbaba6f, 0x027f4d494e7784ad, 0x087ae2a2fd6bbc8d, 0x230f37ba41aec2ff, 0x63876e43daaac09c, 0x28abd7ae6e17dbe3, 0xd354d50cf000982a, 0x1dd774a1273aea75
, 0x243658930d4b0902, 0x0df50723a2da63d7, 0x22bc07b9ac9628c5, 0x134123d68aa939cc, 0x4e84ee2cf0d450e2, 0x53a8c6dbd4aa9ed1, 0xd06e741c45610565, 0x608da7f96f2f7e19, 0x59b7fc9fe6a0243c, 0x0da36bb46fd1eb3d, 0x09a11de836914182, 0x3becc1cc0b96f1e4
, 0x820b8a4cad71c17f, 0x2a425dd0204a843c, 0xf6f7fdaae1523c28, 0x5fb74c0c961e6fb1, 0x0c76e0f72b7845a2, 0x273db117946ce778, 0x7a22d35cdea5934f, 0x73aeeb1b24265d5d, 0x938a618552e4392d, 0x6050215beb6c1923, 0xf32f6ab781efbf2f, 0x2e4ece5c476e1354
, 0xf2a4a59613812356, 0x555185da018933fd, 0x2fffbf95863bce54, 0x72644f9c3181e7a6, 0x98c6b1d509e3d624, 0x5bddd5730939d7d0, 0xdd197613d550fbad, 0x7671fafa1facb923, 0x13dbb61148c5b802, 0x616bc5c73ccdc3bd, 0x0b175b4c46fd8871, 0x498a1eeb000ab870
, 0xa49f1ca2d7802521, 0x6906346cce00be5a, 0xf1bc33c727dd52b0, 0x5d005ff3122fd749, 0x51318ad5d7c622e7, 0x50f93d6d15e46e82, 0x88dfa2123ffff3b9, 0x3848e6fce3cac6e5, 0x6cefc31a33ea4f5e, 0x0cc5e7dc4e5e144f, 0xee2009402e59a7e2, 0x257679fdb86f4712
, 0x4cf68953d8b17e83, 0x710f970c16ce2070, 0x4000b8e9e51e6aad, 0x5af48dacd01f24f6, 0x209679d5d3fcc916, 0x0a3538dd7cbe8232, 0x2d6d7aba44d990d2, 0x46c718f2d4b2c1a6, 0x9953d799a378233c, 0x4f4e80f4a682e7a0, 0x9912f04acbb77eee, 0x317432079a195b2d
, 0xaccccda6a1c11e3b, 0x3fd895817d0f3be2, 0x016db17673f750ea, 0x635fc619a24009b6, 0xb8447ab3370da1e7, 0x6c893aa19abf4221, 0x5f35ac703d8508d0, 0x13533d324d4adcb5, 0x84610370dece8512, 0x2223f126f9a70f4b, 0x18f00d60f3bf6a04, 0x174bd78b20ef8543
, 0xeb179bc6a1698189, 0x732bf44a62015302, 0x98352342bc0e4bc6, 0x053f6640c1549e85, 0x65eee8b0397c7ce8, 0x790451f39f2fa27b, 0x36ffa0cb286cdb97, 0x46d07cec4c967bf2, 0x7c849ace30868412, 0x6dee239d339ef499, 0x8ab78548f273e57f, 0x01c5bebd8b7f5ef0
, 0xe440e5f042eae93b, 0x65583f57fe057db6, 0xe6d5d26c24a565c9, 0x6b3b87a0a6ad702f, 0xd3f5d533117b8e64, 0x4addb9d0da92df89, 0xf1bd51990e0f9bfa, 0x30c624ec1dbcd0a4, 0xafaf2f00da7023a0, 0x3086e132b54574e4, 0x93bdbd4bfd3dd8c7, 0x690976ee132c892e
, 0x86fc11c79524d198, 0x0f6b95662e02c734, 0x5b78bb385564f568, 0x55c9b3f55d7cd16b, 0xdf1316434ad1c07f, 0x093d67d3fdf312de, 0xa1fd2257ea57b3d6, 0x4b5b18abe4b54439, 0x66c28f5b59d796b2, 0x7baffe6e642fdea4, 0xb9d3753265e68ae4, 0x40903bd6dfb02d6f
, 0x357958d4d72d6bc8, 0x179330dea4659dd3, 0x5a9ca85bc8721aef, 0x0209f09e03c9b225, 0xc0bf2e9738933495, 0x5e0dde4d715e50c5, 0x2743c96b66a6b951, 0x6af96188a0d6d358, 0xb2f3c72820f2a709, 0x5e9b8fd43327d9a0, 0xf0b13f5324012177, 0x7abdeaf4f741bace
, 0x6f006249351471f7, 0x3204eb91cfe9ed6c, 0xe09af1c83c13afa2, 0x6d70ed88d5de535b, 0x2078873d1a2faa1f, 0x5c73bedb8d96f3da, 0x41bbb407a3a1ce1d, 0x7a40ec2fb54eea85, 0xd6d569cb9dd722e3, 0x10acf67805927b6a, 0x27c61d818cc0ea05, 0x57b175c9f59904e2
, 0x4f7b40bc92b5a60d, 0x51431f647b46b89a, 0xcd84dd55cc2a720e, 0x6b36059700809a1c, 0x78e3e5dd060e9a0f, 0x630c0c1a146c77d4, 0xc9925b0dea8fee2b, 0x4728f0604b16a06d, 0xb4601050635b2318, 0x2484f7281864709b, 0xbe2ed2a2523211db, 0x6425d4ff23dd3a5b
, 0xf0868c09017aef5e, 0x2733d1e1adc6d5ee, 0xa631db49f17f87e9, 0x36d753ced54d5727, 0x451d17fb6c4af537, 0x1dcc4d611dd55b04, 0x0bb8de0c8d3e549b, 0x2fb2ca1271592c3d, 0xd877914ffbc31ced, 0x190809a196504d10, 0x44bdd65a970277e3, 0x13195c678b4b01fa
, 0xe69a41a54f84d41f, 0x61c7c870565e4508, 0xeca2d2fc6f0e1c9b, 0x7f065480e257152a, 0xfaaa9f7c3a8873b0, 0x43fcdb8db58a324a, 0x969a79026e9da7a2, 0x4eab135af328b9d9, 0xb38aaafe87f85f7c, 0x69eba4fe1a6b6f32, 0x5607f6c6b4d27cbc, 0x273072bea774f9e7
, 0x3c1149e3c8d51db0, 0x161f8cd433c28bfa, 0x765a61f218fe70da, 0x442b5d405f2036bb, 0x96f790271c564cc1, 0x3d5dbb33505cc956, 0x621a38b446af395c, 0x2da978b45bb70ce6, 0x755aca711da49388, 0x46f2e33e55e86df8, 0xfc5b454d5cb7be24, 0x67df47d68d8f6d12
, 0x7a1e224893898aad, 0x0400219c89c2d13e, 0x6c969e4d63d460d9, 0x4df64d5df8b60ad2, 0x1feed05a45ff89ed, 0x290c4b59e684b4ef, 0x97ffbc3df096adb6, 0x4ac6037e76561c96, 0x1bc40299115e51b1, 0x7169e0a1d96aa1be, 0x43f55f8b6bac596c, 0x1cc6a0603081a178
, 0x8e1d2db69bc925d0, 0x6ffb86eed51d2931, 0x3ad1eb242e0af1b5, 0x338198152fcd6d7c, 0xc1f381496df13943, 0x05d9242fe1c60b02, 0x39617510de7eec81, 0x24d8ba5ac76b12b8, 0x280eb2db9e548483, 0x6c51317b3a8a93f0, 0xb2a9f90939bd1235, 0x2da9de86c39f9aa6
, 0x7f54917103127b97, 0x7be2be5ad3276169, 0xc969d703d31e9da7, 0x0500df3bbb1f8a4e, 0xea05c77685795917, 0x049575a992d09345, 0xd567f8de2daabe35, 0x383fad35a8e035cb, 0xb9353eb2bbd43d56, 0x52b3953221860c5a, 0xf9e4bcd46dbec03e, 0x4b0db0b4a7b3279c
, 0x8cc5f6b6e1ff80c0, 0x1bd2ce464b552215, 0xd008eb25b39c4236, 0x3b4ce5bb2f42a9fc, 0xe1f249681d153d9d, 0x3e022cb14bc4c5b9, 0x8a11d021c8ed5a53, 0x560d3fb258bec495, 0xf4405852705a6012, 0x5c8bccd2b1b3efd3, 0xd93c0f63ba7ce0c3, 0x337798cb3e93dbba
, 0x7a9f68cf800c8e88, 0x579afe689f3ebcce, 0x7dd41d6cdfbdb4a9, 0x3802410c4e1b274e, 0x64241d770cf0db02, 0x2f7c8133c74bde23, 0xf3c3fd835ed1952e, 0x741b1d88a3cee37b, 0x74e1ae644683c68f, 0x0c80dd9e0f7a91e1, 0x3984d741f3e47c24, 0x4b3eb97b6a39d252
, 0x32e9b9410da9a195, 0x11d09fdc04ec3b41, 0xf92fd5e53cddea30, 0x296e095589e0ce05, 0x4e3200c3a283b696, 0x7e33fbba44ecb32c, 0xed3c039790ad0033, 0x5c8ebb260b5ec084, 0xa667455bb79d2e9d, 0x12fbec9d4f5bb155, 0x3aa5f6bb4d0d8d49, 0x0ca652ed7065d80b
, 0xb7938753d51c6f83, 0x41644ac1a602f9f2, 0x84223d4d63c38f7d, 0x71057b4b8b931282, 0xd39fa015165f47b5, 0x7536c8a19c33c201, 0xbe713ca4166c2dad, 0x456c98c2b4198511, 0x4793f25e1cb44658, 0x1d002f1cfe1a1ba7, 0x9f9ed6e1e1a27957, 0x095dece028426bdb
, 0xe57d3412fc1001d6, 0x481c63a0d9b25e99, 0xc756b6ba0dc02aa5, 0x24af047d79ed4683, 0xe37ac10133b68275, 0x418b45e570802012, 0x87578def0c3900ce, 0x7c5661923b8c9740, 0x5f4ab0a6fdda7366, 0x0ac6100825e4eb3c, 0x308528e42c9e4d32, 0x436e5979933ddde8
, 0x0cd6ebe123352222, 0x63d1768a46f33dc7, 0x96cc55dff38c9273, 0x474438da7140411d, 0xa184b89b81cf6402, 0x6bf820a3aa675050, 0x3bd4720417391f0e, 0x3f2b8f859a8e0cba, 0xed952561b125da29, 0x07eb1ac74165097d, 0xc3f70d0c7db0a9fd, 0x5ab896a489294a6c
, 0xd4b608975c20018d, 0x6243b039f25d0456, 0xf766e98fc24c7464, 0x20035c09d2291e42, 0xcc0e5b5eeb462524, 0x24bcba5505f90657, 0x43a98d98e4fa9bf6, 0x3b621ec4188264d4, 0x633472fe235c812c, 0x31a20844a3316d23, 0x47b80db7d7f5d0bd, 0x22d482f5663780f9
, 0x4df227dc52142020, 0x25076d0624bf137e, 0xcb4a6ee30a657645, 0x0ce469dbb5ada433, 0xfdb06251f65b9c5b, 0x44f82274a8e8f538, 0x98fa4c81cdec4b97, 0x0ccd61d1abb61d0d, 0xb9dc371344c5ab54, 0x35dcd9ccf8e5f919, 0x67fc81f369ba5722, 0x121b5aa1af6024da
, 0xe0b1b16b0fb1f1fa, 0x4dc688d6d3b1805b, 0x05c187cf10e40104, 0x71af39c743daacd9, 0xe691e97f82acf4b3, 0x0c46305b9243bf5b, 0xb063af137fde616b, 0x4e26e72a1de067f6, 0x61fe66d01a221004, 0x172fe9240cea50b1, 0x4ff50d37b2effefc, 0x06be02ab0b89aa5d
, 0xdd4aab96717af213, 0x32322555b58a7ffc, 0x7812aa965889326d, 0x1bd608f60d6457a4, 0x2c7b6b44e999e141, 0x113a86a87856a8a8, 0xd95469fc33814855, 0x4a18dc36f6bfd586, 0x0706b60bdb854fd3, 0x4dc356685650fa90, 0x24ef7cfce41f8dcc, 0x19049c3e632deae8
, 0x5c9a4e28b7138a89, 0x0f0b7dbc1e5087e2, 0xebf49cdc66a362d2, 0x19e4b815e6576c85, 0x1896051ee3b6063d, 0x09ecc741852a68e4, 0x4009034def986795, 0x36b440ff39b4b5e8, 0x9bc2647ee28af1cb, 0x62613c9dd152b3a8, 0xc2018ae5dfae5f2d, 0x29ce5ef30009c855
, 0x0b653558b21d2b1c, 0x45e2c505d1f74936, 0x48304373240553d3, 0x0528569885a82310, 0xa90d402e33924181, 0x5e610edc23cb9555, 0x28890ae7e007d28a, 0x7e5132b6b1ebae37, 0x0d5252eb7c94cb1b, 0x308ddaea1fdbb672, 0x99fac0b431730534, 0x77d54ed63b9325b9
, 0x4d647bcb76c6ec3f, 0x0e968b22ec2cad86, 0x4b22b5ec30b08a35, 0x3b31df3b52326b5c, 0xbe84f638dac3105d, 0x7db085f133ecbed3, 0x7a8b694596f2cf2a, 0x67b2e6c15d16e0aa, 0x4808b20bf173011d, 0x25d5fbbfbe66f864, 0xf67f3f3cd9743987, 0x654250e89617ddf3
, 0xf5a1a7e0ba0a88c0, 0x3616c781799ab50a, 0x2669c27a2d256902, 0x3a8ec380e12fd7dd, 0xa25361f44a418e30, 0x2942f3001d233645, 0x60f1d3b7535a4133, 0x14deaaa12e5c7bdf, 0x0089fbece10c8d6f, 0x4bf7c313757c803d, 0x65aa30bfbb70567d, 0x4fed47af409a3fb3
, 0x07557dd875d3daf5, 0x36c49c2380e3c9bb, 0xa21f643d329ae02f, 0x6cf6f7474338bcb0, 0xb5df78136a0f3012, 0x031fb2df2e00e9d4, 0x4d86fccbe75e79cd, 0x23f890e082d03b7d, 0x5716a1ffb50a8262, 0x0199b50aa6cf3302, 0x6a1be351f86090d5, 0x36095efc13349364
, 0xffe752be8ce46920, 0x65047a340b652f65, 0x320ee55fd03156a6, 0x5af6aa45278409f6, 0xa6caf283b1cf3850, 0x4e3a988f61072f96, 0x750f67926b18f680, 0x09fc3f2927d21a4a, 0x914893c2f2ce1169, 0x4d15b367121b3e75, 0x6cb12559723774f2, 0x3ee5b8c2a70e054a
, 0x7dd9b3518d84d2d7, 0x147d5a5a53f57a58, 0xe1bd0904ad842a05, 0x3a0f3b029c9a5845, 0x7153c03261410074, 0x4e203d6737058c17, 0xebecf5cb79f28af9, 0x574b889870c279f4, 0x326317b005f444a4, 0x7480da44b34f4b1e, 0x7c5f21cdc46275b2, 0x210494b9ee24e4e0
, 0x3cbf6ca1f4aa4ead, 0x6bf3872ccbfed940, 0x19e8a84673a566ca, 0x61a80e16990401a2, 0xea2e029e7f9b3824, 0x5762298465f0ebd3, 0xf60e36d4969f9af0, 0x00b826180531c799, 0x17120ec95cf3c61d, 0x47196cd6de85c7d0, 0xb0d47cff46a5cba3, 0x29271400d7ede26b
, 0x835908353516b894, 0x4bc57f8c1eedec8e, 0x2ec5deede5c0db5f, 0x7b9fc48ac4a689fb, 0xf82ce6de88fc10e5, 0x6c5d84a70e03a3d6, 0x88a211fc4ea531f9, 0x7d5583e5918aa03e, 0xbdf2d70766fb8f39, 0x5926497e734ab18a, 0xd6a9872b800cacb4, 0x757c1cd521fd22d6
, 0x22d50b0c13ec4bc0, 0x288a77d34a15e99a, 0x95c8e78fced3d4eb, 0x45ece109c15be169, 0x878ef262d0132128, 0x48110e9fd98939d6, 0xe3fc5425d2e7741e, 0x050ca6e71f599c65, 0xe02f97605d9fe375, 0x2af48b9bfee410e4, 0xfd34a1c107229a54, 0x43dc6f0cdcbd41fe
, 0x15b4eb7d65cc562b, 0x369a7b0dd3e91248, 0x2b087611edd32810, 0x116b234ddce09d7f, 0xcdb03cae8e90d2b0, 0x4017d51587566038, 0x081793739242b600, 0x5086e8e633cd52a1, 0xf5ddaee155cb8087, 0x773311b60d59a7e9, 0x36e5aa0acadf2068, 0x7126a4281b192882
, 0x54a10df54f7ecef8, 0x3cd7d2fbb6e33f67, 0xac31eb6c3e740c25, 0x517db54840feb2de, 0xf17cb269b3ce27a2, 0x04a8fecd1dcc99e7, 0xfc887c1f2f85a2da, 0x280da7425bb55b01, 0xa1af72f5256a5a53, 0x71da839fc459f465, 0xc203fe7ba6587f71, 0x08a4201f77a4f335
, 0x6cb9ea5683014d96, 0x5da17076b6b51ae2, 0xb55ac168c3e3997f, 0x41b9a32373d78f7a, 0x96f58033b8600a50, 0x6ebfba3ec9d956cc, 0x0ff8883707d66d0c, 0x2f562b035445226f, 0x2388fc015bd368c7, 0x2b7d802ce27f627e, 0x301f0369c24083a6, 0x77e139f6da8d5aaa
, 0x9f78574697fce43c, 0x02726c94565421b6, 0x1ad6007338e26585, 0x6134cc5eb35c02ff, 0x77ae739c9cdcd1e1, 0x04e96543233c7a13, 0x97d3926dcded2e10, 0x6bcdff7e14cebb73, 0x9c46ae2b32489774, 0x04a97b9a0473af8d, 0xb0350bd910d9784e, 0x448212d3e2164ad7
, 0xf3464e0351f5e995, 0x68ab4d24b3ade8d6, 0x86854d534002af20, 0x613f7ffe5de92aeb, 0xb385b4f4608a370a, 0x220dccecbc6f2688, 0xc31ec5384abd3680, 0x25a82841a2000fd8, 0xd19e422504694236, 0x0bc1124d541781f5, 0x0808651edcd99176, 0x41b81f223d429c76
, 0x1a6dcb2662cc80c6, 0x0b101fb0ef0d1f74, 0x6f02aed8f8327119, 0x5b4c5176ccc4a340, 0x8fcefd200d6ee8ed, 0x0548127287f44749, 0xe1efeca1fadd1341, 0x0e74bc189dc9016c, 0xe90470353f46cb12, 0x69513d3455bc890c, 0x9503686f1f2497d1, 0x280a0bb7733f1086
, 0x14e5f99930a91dea, 0x7840ad84b03c3878, 0x46e32c654fdbceb1, 0x7e88d2822bb2cecf, 0x4d78a8aed7f8661d, 0x70eb17416ef40180, 0x97b6f1733c474a10, 0x3d0d27fc4c7084ef, 0x730f60f6a1ee0d71, 0x7bf6e3885d3d9302, 0xa1e8af33742f1611, 0x73b798ec129822ed
, 0x0f669bb094642a70, 0x142927de789fc4a4, 0x0db18e01fa98cbd7, 0x6ae4d37674be1451, 0x7175e98f178b4b74, 0x40534e319bc52c6c, 0xb7211d252c4db879, 0x1a7651f8f3ed1aae, 0x9c9a43932d50cc97, 0x630b232b7201c359, 0x327d77575f5b3839, 0x5f0e19e78431864a
, 0xbfbb00b6530a3bb6, 0x19ba9d60d97f7857, 0x759779de744bd764, 0x5facbe63177791e1, 0xc74ea511c56a3b61, 0x1d8909e84083c31d, 0xcd20094b507af492, 0x2ef1b9c07c92ab37, 0x8430ed9ef8494fc9, 0x3f9170e6df5b1fa1, 0x1fb8dbc837175d73, 0x65b961b58008d022
, 0x7e1afb6816864b6f, 0x54c4b92c534871e9, 0xc0a1dcd60d61ef84, 0x4390f0e992c41298, 0x1e54e2c8b7c27348, 0x7a987e01a2ec308c, 0xee42fbd90c4a89fc, 0x1ed8c77f8d7c609d, 0x569dedaca99a3346, 0x0eb471e609fef4ed, 0xc915522a3b9fd03c, 0x726453b246746bfb
, 0x4ed3cae53dc5fa4b, 0x1bf1e4b34b9feef6, 0x0850df9f0401fac3, 0x0a58d33cb2422e2f, 0x3d197f9603ecfc29, 0x45e46edba1cc432e, 0x96c0c93310d9bcaf, 0x18de3a458be2c33f, 0xc9e65e5bcc12a49a, 0x71a5345f0239b187, 0x53b3b2f01c5710b3, 0x438350f57ce2ec4a
, 0xdbbd368a760391db, 0x4033638dfec29fe2, 0x297ad75ed73117fd, 0x269c08d54b106e8c, 0xa4e3e4fd238b4218, 0x1f48a1cb09208aaa, 0x9575153115cf5fa7, 0x59feeff0876fb74a, 0xfdedb4af6f368710, 0x79be1fe79fa674d4, 0x689d6bbb4c707c39, 0x394a451499057bb1
, 0x5887d4fb21fc43b3, 0x37628dfc4b5c23bf, 0xc66b76944b34bd13, 0x6e97f0a8a45bcb36, 0x3ac6b10139edbbdd, 0x313f4846b6745833, 0xf8758d9777cd9037, 0x02fdc98f02692537, 0x9e79f381fff833a5, 0x25ac5d68c49b105c, 0x1e9f48a076d8c9ee, 0x788c85c9fe9543b3
, 0x776ea51db3b3b778, 0x0007c44055b64db2, 0x3c392c2a82fddd25, 0x65000203be8ee976, 0xea119666ab7c50ab, 0x528b2700e8f82d39, 0xc4aaf797118b8282, 0x55e5a7d5382e0d3a, 0x15a80b22e89f1039, 0x199f68594b1247a0, 0x8d5630750d622435, 0x2687f48cc6def5b2
, 0xa16b0c0259eafaee, 0x7aeb10834e93595a, 0xe31bcf34ce679d9f, 0x4e2c19829eee3c87, 0xa46869cb8ca35c9d, 0x3cd35313c08504eb, 0xa088eca66e98389c, 0x44c562f0f7262740, 0xd3eb8a28f447523a, 0x43a0e059bfe37576, 0x0312c5d6d0f2e0ad, 0x5f30aaf0d1614c61
, 0x6f09a7a6e182b0aa, 0x575db3d21a82296b, 0x6599bb5eee7925e6, 0x093f89458dcc2fe3, 0x70c4af785151fc84, 0x1230c0c519de5480, 0x0e66f8f93075a4f6, 0x5de4a122633a5c6d, 0xdb99cf83f9ece1b6, 0x1c3acd4a13ded617, 0x4dfe69e68f59c447, 0x482ba1f7715a3c16
, 0xefeed2a7c81ea8fd, 0x4e089eeb713a572f, 0x78bc74acfbdf322b, 0x4b4951ce8eb86fbf, 0x0eafb6b46ac6714d, 0x72913ed109f7d404, 0xb498bf6fcde9e3a2, 0x3c08a283ef5ded62, 0x9af09f593a48b346, 0x7ed52441d00d4980, 0xa78e843ee5df44ac, 0x25db12d420a86151
, 0xec840e7e89d049e0, 0x5a34cbe928bf96cc, 0xd875dc5525da882c, 0x2af4442fc256827d, 0x089fb428c2ef5a5d, 0x0b573ace080a3d9c, 0x6f57282554c240da, 0x425ceda6707b6bc9, 0x94b5a8c3dde824fb, 0x264f6f6a445b5da9, 0xadf292191c5c1eb7, 0x5e302e82fa4e5533
, 0xf51712fc44237f35, 0x2b0af62c42e56e66, 0x10392cb4d9c71b75, 0x4d7e08fe8457a95b, 0x210b9eceb04534bf, 0x73329d1c7d88e1e5, 0x667a43fdb4ba79e9, 0x3435ec04276ede87, 0x38b8540a1a78b098, 0x4f6c266e6793bb78, 0x447ea35172754041, 0x109d7b742d8c3dac
, 0xe3ccab45d2a4f6f7, 0x59040bb73f3bbd2a, 0x730b39d65645bab5, 0x5c61aed2f83382aa, 0xa992143de3cf83e1, 0x13455cb889b700f9, 0x54648228b310e2f7, 0x5b837752ee0f733a, 0x3923a6c0e5ea0dd9, 0x5ebebd01fc9ca9a2, 0xa34c205b8fd94258, 0x7d1a10029a0b6cd5
, 0x6c83c02241a46527, 0x4127c85d6be1fc62, 0x26f86ff5ca7240b6, 0x2167391e7dd95cd9, 0x79227506ac78caef, 0x1a2cf919b8832a0f, 0x07745266405cf574, 0x38095a07f5713ae1, 0xe5eeab985ca3e7e7, 0x6a5dd9eeb734d639, 0x991027ebe44a4822, 0x311085fb4de9c1f0
, 0x33f361e21066c3b5, 0x550091d2dfc8688f, 0x376345c5532bac13, 0x0aa0898f990931b5, 0xea2f3346e5d3226e, 0x208790ab78776afc, 0xac7c2ae63433850c, 0x3c5c373ada10ef52, 0x96c1b4003f4cde6a, 0x4546a9c475c09781, 0x6c961fd3e8536294, 0x43f36e63fc0d5066
, 0x296601d8c42167f4, 0x241c1fc38565471b, 0xdb00a27e11ce9617, 0x60381181b7e7e4ee, 0xc1076b7635ac4d52, 0x0166010ffb8dda38, 0x5238f69becc43e0b, 0x63303a2015708b17, 0xe8badb2e5bb22591, 0x3a10a4e218b6131d, 0x236ab01aabf1a7b3, 0x1ce8a51a68a4126f
, 0x59e775e2a2a87928, 0x770b48eb4b738301, 0x0b43c2be176bf79b, 0x1957850fb6424660, 0x44455ee1ecb0ab2a, 0x620ceaa116eef4f0, 0x0198f62cb6183f6b, 0x3274f78eaf2d55db, 0xd2ba4e460cf7ed5f, 0x19cfc17bc0b66f43, 0xcbae6f45b1942722, 0x5d93e44739147b58
, 0xd07180b9d28fc597, 0x35372b21b2ea5a46, 0xed2673477f083464, 0x7a9ebeeecc57e6c2, 0xb51d991a81a6b314, 0x35e7d90f4ed6de58, 0x45f21e209510dd05, 0x446ffd2715c8d380, 0xe69b5c7a9b6d3e76, 0x1379e79fb96912e6, 0xc161c848bd508738, 0x22264a049d8cfff6
, 0x32321a68ff7ef7b3, 0x57b0e50cc585b333, 0x1c08c65ba9d764e7, 0x5534c793f92f00f5, 0x7a1ced97eafe6fe4, 0x6b8933739202599c, 0x618c5f8fcadd3ff2, 0x2a8719b3e6548653, 0x346a9ec5c4200f0c, 0x7a36b8d00d0eda58, 0x844b22b75021accd, 0x769737059fc5e465
, 0xdb1ba69b5019f266, 0x1777242305db9ac1, 0x491d11ad264b6ff3, 0x136198dfc57a3053, 0x4a6cc64741eb7176, 0x14e811c97fc97650, 0x6b64667f71be386d, 0x3286fcadf019eb5e, 0x3f2591f4498e10a0, 0x674fa7c32df7867b, 0xbae8ec7ee100dcf2, 0x03b2c0a20a6372a4
, 0x4c8d76b471e24474, 0x421fb6a7b8a3216b, 0xc672bdb2fe8f514d, 0x202af653d9aff3f5, 0x05e5f80f9626953e, 0x7b721fa3ccd42ffc, 0x99d8e481c0f70479, 0x054c31746d23362b, 0xfbef2e20430e8025, 0x60e1e3f02e7720c2, 0x161701874eb347e3, 0x363924e90cbb77a6
, 0x180f5ee1863a1a6a, 0x2f79c0046ff79fe2, 0x44679866e35447f0, 0x1c64c6dd73e0d636, 0x1d8175566341469d, 0x5ba634965b8b9e87, 0x8f48744f976952a5, 0x744f28d23db94c8a, 0xd15e84b1f232da34, 0x556f3d7aa38bee8c, 0x14693c56e866ef89, 0x1564fb9a0f81eb03
, 0xe97eed56fa2b483f, 0x6d3f7e01aebd1957, 0xae8f128aca3b3e45, 0x3d41e85ba2afd3a9, 0xe4fe485e4b6d8328, 0x65c49b4c3e98098e, 0xe96a00e054d6e91a, 0x394a2122738cd006, 0x715cca3dffd90785, 0x7bc3dcde15890965, 0x6dcdc47a33a148ac, 0x435db9d6dbe1bd55
, 0xd74d4d6e0fd89c27, 0x25e727f6a5380553, 0xbe54127ba6c5189a, 0x65c87d3c3e61939c, 0xc34a6d122a809e2e, 0x7de6b787f097eafa, 0xb8f8b6e701758661, 0x10705fbf97042046, 0x1591614e6da2d44f, 0x7c74f26ec6eb070f, 0x9ad98c1a50249c60, 0x6e1bbd44d64b2302
, 0x937cee76047790f9, 0x5b4ccbc70beaf690, 0x332e79ae75ae0dae, 0x2e6394161d093556, 0x4b378bf68f6849f0, 0x6c419fa0cebba72d, 0x8bb431e1e273f2a4, 0x357cec80bbe024fd, 0x83a6e913962f11a9, 0x7808df02e2523718, 0xb6690b5dabc49e13, 0x6cef23259375972a
, 0xd18ac767b5e551fc, 0x5a0ba1dddb15bd36, 0x6f7923de219e3e1f, 0x3ec23588db9b5cfe, 0xa4fc23d42c83bbe0, 0x21581a00768658cd, 0xa295b6e57110218e, 0x3e7bbab1d15f477f, 0x2266c03d3f0d0635, 0x4174f08a95be03b5, 0xaa1a674abb8cbeb8, 0x6bdf6ba553ae3390
, 0x8a31f824638545e2, 0x2a9e37a0f0eede53, 0x148a53d8cba69f65, 0x64c587e816d96316, 0x777a028a47e97e93, 0x13728e46befb2e0e, 0x13138b44862fa665, 0x0fca8c38a87775f6, 0xcc44bd580dd067fa, 0x40f2f7642e22d02e, 0xab3ba6db80c2f728, 0x5068aa2e2d25b7f9
, 0x5a8a842c0a2923ff, 0x67c39e8a1006c196, 0x8f5cb9ff55460a84, 0x2e735c20a419a518, 0x0c6ee3fcbfdc2da4, 0x5bf6ed60a87b92bd, 0x5e4ce130e8e1608f, 0x0932ceb3e50028e8, 0x793cf8a0538cbfb8, 0x4e89e2c018beb7bd, 0xcaaa79642f5060de, 0x542a38a4d13f0016
, 0xa1b0fd9aac663e55, 0x5158bf1f7b33c0e4, 0x060e82f65a4119fe, 0x32347069a1529fc4, 0x5c96ef69127480d5, 0x409a902134df6ffe, 0xdbe8c392eb6c7013, 0x73f2c48b0e3b4a79, 0xddf5060b937e2dff, 0x1534f901278611d9, 0xf47fe29ae4fd49a7, 0x7a2c0bfe75539f29
, 0x19e04d1b2b0fe7fb, 0x56381ebd8181b50e, 0x5c8970c249df4ac3, 0x08acaece8ede7685, 0xc44f1a71aca0d20b, 0x623edc8d92e4ac3a, 0x5496a7e5885a0c95, 0x20a9ba37315b116e, 0x3765873809f5b55d, 0x23c44c42ebef2ff5, 0x56a96d921f724573, 0x3217815b72b8a9eb
, 0x2cc1b42f5350a489, 0x31f0b36e85b8c70b, 0x504a5c8c4d2ce34d, 0x1af8ea26b3786eac, 0x69bc5e26d7afd62f, 0x21e399d04247bf9a, 0x6e6d6676a88efb27, 0x476212b9fe9a6fd4, 0x0740fb65284168de, 0x5f7570be65e69408, 0x0166c3279dd81c29, 0x6565489007c4ed6d
, 0xbafb5bd37b5219c9, 0x00251709f2e210f7, 0x0d22639b51c1198b, 0x0f3c0df3be3de811, 0x3552612be3374eef, 0x0834744318ffa0aa, 0xcb9f1c1e3557a00c, 0x20c359f5de8b6614, 0xd319482a34d05268, 0x42165771b46b75d7, 0xca336c22e8d911a6, 0x4d072f70067a47e1
, 0x9022c6f101555e9e, 0x4c8c7eaf7cc2d697, 0x629810b2d8044817, 0x25110bc01b06c9c1, 0x1bf9c06bf39eaff7, 0x6cc36f151f52b4e8, 0x76b73a6a14b62068, 0x47dcb0dc89db3821, 0xfe9dfeac2f670f41, 0x625b5c93b973c417, 0x5f8c917930133c1a, 0x6bd35f3e0992bb2b
, 0x03b5391a85409e5e, 0x7981d8fd16362767, 0xdb45c80a32a23cb6, 0x67356a7ef48b2dc3, 0x6189236e9f01adaf, 0x07a1e954e5032bd6, 0x53d627199c69727e, 0x25d67e4163cec014, 0x18e7bb6a63a80738, 0x3112be4cb5dcbc74, 0xad9ad6d381643f04, 0x116112cbeabb734d
, 0x32623abe2d66ff07, 0x4d780300822436de, 0x9bed066c04497808, 0x40db29b39ce86700, 0x6e5e5eb3805602a5, 0x52f227f2b1b9b40d, 0x51c2c4c197a18394, 0x6d8bca423ee270bc, 0xd6e60cfe8fb07f72, 0x7dd66c3970f940c6, 0x66aea7b59a0b17cc, 0x75fcf8b00160d729
, 0xbedc5ea39b2402b5, 0x0dc3600425feedd5, 0xadc1ddf2cb1b6631, 0x205ee93e3aae976a, 0x7a2cb4e333c98498, 0x7d12eb776d56872c, 0x8e339bc1b41599fe, 0x4600f0a53fac9427, 0x1049d3a372f14304, 0x7b54e020b22db742, 0xd567962272a35739, 0x27a1178b1115f0c4
, 0x6cfb39d619c35e1b, 0x5cb96fd1a9d9d486, 0xaf45cef7fb4fffea, 0x4a73d7b2ba9321d1, 0x44b46b4a80be86ac, 0x2769b50579e8f734, 0xab5d109e7472f372, 0x2bccfba1cbe995b6, 0xc00026115332f6a3, 0x7acb287da1561c53, 0x21555c608cd90dd9, 0x7731d1b2878dae13
, 0x32122bf5ec1a0649, 0x592b5fa180ec8467, 0x876be1b5ad9ce66f, 0x484c1cc5bb34819d, 0x08e4cc425b30b06c, 0x2766065f0e4d22ce, 0xd90825644987aeff, 0x3a835fcc7fc456a6, 0xf4d801d2cc806d69, 0x41d767ecca55f839, 0xf2dea9fd01f1e74f, 0x74d01b97462211cb
, 0xe43e280ad29f80cc, 0x5cdf66a69029b231, 0xe8d655a03c862cd9, 0x388e38b58d0e8c79, 0x5d9aaa4848ff83a2, 0x14d6fbee4d6cbe74, 0x0426dcda912109ea, 0x1bb7b9cd75d4b541, 0x3a3c0504b39b8505, 0x35a3c5882b31367a, 0x678793d635a6473a, 0x66abca7e20202034
, 0x4a90ff1dad300021, 0x18f29036544d2684, 0x2036d39b8f69095d, 0x36490f5645d18cc8, 0x9414d7368ad3562e, 0x7f8108a04558487e, 0x93db0e56d653e40b, 0x03f413ea960537bb, 0x984717b77f7267ef, 0x6c5d9da4a5ee7305, 0x725318dc36060a49, 0x274397f8e79a239e
, 0xbda7965b4095bab0, 0x6292b2505c7866e3, 0x451fb6a0672d6733, 0x37c560f40242a859, 0x151e56eb818f1423, 0x63451986f0c22ee1, 0x9275ff873a5c75e1, 0x178cdc734a32b96a, 0xff7adbb24244aacc, 0x76518aa0dfd96ddc, 0x161c1c8c81071219, 0x0584d44c10a3e6dc
, 0x2727282a09e9acab, 0x1298e49c34514ebd, 0x0323d059ca1c0e6d, 0x6072c8b87dd26bc6, 0x36eca2ab28d36f26, 0x2a977cb5aae4ea2a, 0xf157d43a0b9546a7, 0x04d60af0ed661d29, 0x34bc1080126e4402, 0x7677ef9a21589171, 0xbd13797278f07a40, 0x32c0daf0b57f20ac
, 0xbc83fd1b8366dc2e, 0x6cd07286c4e670ec, 0xf35485a3f339dc8a, 0x6e7e9285f2247e8b, 0xa9d19d3a09943bae, 0x43fa5197eed852a6, 0xf911398a043242fe, 0x4a100dcb1312cbe9, 0xbe2fd86be910a692, 0x614fd829368d7937, 0xdb5a98b1a92d578f, 0x46f1d23e1b0dca7e
, 0x8bf4c6725e813f36, 0x68bc89078129ce91, 0xff56503ae28f5c7f, 0x2b6e0f4e42178ce5, 0xa97cd947ec65895b, 0x7aa90b66280ff6c9, 0xebbaf32df158a0a0, 0x6a748d0ac02bb713, 0xdf79b5d619e83397, 0x16934947f6485b69, 0xe75185521ab32881, 0x20791e276a7460c9
, 0xd25c403e22c70bc9, 0x0bf079518e66e1d3, 0x45dd5c971d3711de, 0x66bd2c6a30be232c, 0x607829e5b29e53ca, 0x30ed414e71dc08a2, 0x3fd38589ea0f1d39, 0x5a881a121f37fc5c, 0x27b9394368987a4f, 0x321fe45e13afae2d, 0xc6feb75080f33ea0, 0x02166d52f45eebbd
, 0x15026a1b0ccd2fc9, 0x1141be93d5bc3d6d, 0xfd20df606fc676c9, 0x4059e26b00ad78c4, 0x0709b409cec6b505, 0x68f020e8acf478e5, 0x875d77d1f5df0cfc, 0x66eb377735162ff1, 0x860482ab417a32ae, 0x21175f47da213935, 0xa07ff0cda099ecdb, 0x26ae5f177ae2b8e7
, 0xa9a070ea5120eaf7, 0x2581feeba7383f81, 0x49e0f137f1fa2a7a, 0x7fe93c51cfd1ec62, 0x2d74dbdca7777f7e, 0x562da2ba74e823ff, 0x543b4f8609d77a2e, 0x3a0f65212f234ec8, 0xf842e3fea270ebc6, 0x4524322c6a289e11, 0x80815887aa6a8576, 0x46f49d53c3fe29a3
, 0xbcc93cedfdb0d388, 0x4db312076ef0ad2b, 0x1f2cd56373654ad9, 0x4c6446970034d15f, 0x34d2cdbfd5d7130c, 0x6198950d03db2ae5, 0x736094b72faf1b1a, 0x1f6ca46a9f2588f7, 0xcba0b03d6259772a, 0x24e5a23d8d6be3a8, 0x7090e340c94f6d6f, 0x287ba27ee54e8466
, 0x87320c8822d607f0, 0x44fd5802509df171, 0xf35c09860bf6ba4a, 0x6cf53130ef77cc0a, 0xaa81167a00b48ce4, 0x649f4c775b0d8b48, 0x59a25683ee98d33d, 0x651479007d1061a6, 0x155487411f6e16da, 0x411d036475404bf2, 0xc231f1344162458a, 0x4f36b7633f7dd368
, 0xa98ddc0a4e7a89a4, 0x55d8a5da6eacd542, 0x5c3fb48b1001ed45, 0x5c7785ccafa702b9, 0xa64369fd216afb79, 0x1f405ef10e940669, 0x755f4831bc327b6f, 0x2bc1b67d71f1882d, 0x8eab15cfed7777d0, 0x517370d580d99326, 0x0811b75701c9db39, 0x234d84cb52f7b621
, 0x970c4fbddddae49c, 0x3ba8d842475e41e1, 0xb0720f6ad75e7008, 0x275cd5c5184bf345, 0x5eb9833888d3796a, 0x1b3a42dfde11c2f3, 0x946548fe092b5f4d, 0x119917b50f263cc9, 0x622de955a20a3f82, 0x6a552ea3a60c7ff4, 0xc79230138150372a, 0x18083b9518de76a7
, 0x55fb74dd7d3b5455, 0x523eea9a70ff8334, 0x5994a7335e356271, 0x3bb011f60430f1d2, 0x1ec434cba1d6ea7c, 0x69b632960feb5780, 0x46c50417541ebf07, 0x01470bfbf9d23830, 0xe9551f4c049bc5cc, 0x1c124638f35ee8ed, 0x09ca3a9141e83a38, 0x44daaf3e7411127b
, 0x0e54717b6c2fcd10, 0x518ab46b26d5914b, 0x528ac6c82341e833, 0x2247fa99d41f4672, 0xabe30c65c0f327a2, 0x3ac74e012b77e1b4, 0x35defd694c0e86b3, 0x7c382e10bfe60e4e, 0xf37e382996b8461c, 0x4d47481c53631e1a, 0xac8f167884f7b7b1, 0x5ae1bb6ab1a4c643
, 0x63eb02590829df80, 0x623126862a793fa1, 0x6e1e242f1ce09807, 0x7bf96130aaecfd2b, 0xedc5e9ea10bff70a, 0x66b548233b94d26e, 0x70c70ee4594d30ab, 0x79b0006c8811353e, 0x4352792c91710c1f, 0x0c7bf15181a9f539, 0xfc995ee769e3779c, 0x44871c6cb9dcedcd
, 0x0d180bbf2c9a046b, 0x5445c598c45d0cd9, 0xdefb32386875fb94, 0x5b0d235355660f35, 0xbe1dea825b3a7973, 0x10658ec4e1bbe147, 0x48af5e87fad77504, 0x55f5d3c94a7dd694, 0xa9a3e7062cad6ba2, 0x36c0a7e3f9e0ea31, 0xc4bd65217010aebc, 0x1d031dfc8b9fb598
, 0xe3621c104113889e, 0x774b77ee1e6a6477, 0x124c5b8a07785fd7, 0x5a6c0df18188cada, 0xf4adcd545e72d7be, 0x38100fffb66ba966, 0x2100cbe35fe4a4d0, 0x4489be2df052c175, 0xa03a22403b26899f, 0x5ae4a0a0fec13928, 0x89dfbfb802795eaa, 0x34917e9c4ecf2532
, 0x64b93674c60cbbb3, 0x25c098506334c71d, 0x8a723f66f1ee34e1, 0x3a960adf48f141e4, 0x659f386695e440bb, 0x577a0fbf6e8095e6, 0x8ef419b0f4b25496, 0x044176a30b9e465b, 0x7a98705df2013e6f, 0x77d0b2483aa95ce7, 0x309e917b978effd7, 0x08f1e55bfe942c7f
, 0xfc241629b8d613c8, 0x140f2e35cd68949f, 0x38899f6a3ee4f9fa, 0x7abc8ecdd300f3b5, 0xd3dad23505d23eaf, 0x75e73f09376b2c7c, 0x5644a663b60ec5c4, 0x511ade8afe1eaec9, 0xbb005fe4e1abca89, 0x2838de73b0ca1f6c, 0x800a6658b80d28c8, 0x48aaba61c91641ec
, 0x222759cab704d4e2, 0x106dd3c0ce85beca, 0xa1ce1ce341f69d03, 0x1651b210e8e4ee10, 0x47329a5e7133e136, 0x58c02f47dc9367b9, 0x09dcba56947b02af, 0x435c251178125b48, 0xd56979a3f0cd9315, 0x2f02b0a6422afddb, 0x23920f500731f32d, 0x0ab833238232cb5d
, 0xa7b3d1bfb0bb60db, 0x2342c2a03c6eaec2, 0xac5e6e5a14d5282e, 0x5b9a421ddc42a24b, 0x018506414543e056, 0x6d7c377c084954e6, 0x4f8bf71ed3db1ced, 0x5150dbc15ab10979, 0x00b50a1b373a7fbf, 0x140be5c3d3244705, 0x5005bfe96e5b7911, 0x77cea555bb133f3e
, 0x2ab1e1a9d7a973c6, 0x3897ac98314968d3, 0x9e0f74764b23c9c3, 0x2e5ecbbae41997cd, 0x43e2ea5648f12433, 0x3a515a0e4808e69c, 0x17d36c03c36bb343, 0x44cebd053481ce43, 0x89008656c21b0d76, 0x2f8513fcb9009be6, 0x2e223f90208a0e83, 0x3828c2d4efd36a73
, 0xbf17d64f89a8527d, 0x59ebb42b9656151d, 0x7d7bc7245c7dc5ef, 0x191b682a0cb695ec, 0x8931172fad9f9add, 0x239b6cbbab2ebdcf, 0x76932f9ca7002dd1, 0x0c140548f858d8b5, 0x6c7adfddcf741ea5, 0x3b39c4b9e2e1a567, 0xc5135a25f87436fe, 0x690d8fecb7dd0ae0
, 0xd782a618ecda10c2, 0x4f2a84b3134cf832, 0x35a81f71bbc955a4, 0x457f88ed64ae6398, 0xc27eb71c31479985, 0x4ae91808569aab32, 0xa5f2e9785a75eb11, 0x619cb199b837ed36, 0x0e7e5912b9484e40, 0x3b5831e87fdbcaf0, 0x49a2779c2d2b039d, 0x3d4b81e07f49061a
, 0xaa119b0fa222b55c, 0x265c1b11b42fd4e2, 0x6b4d28e519dd7637, 0x3d2da7900de5a4b2, 0x99b06586b5f21d63, 0x4ce62bd9e6a1ee18, 0xb671e753932f8c92, 0x390b7821d0987834, 0x1adf7c73c3f1fc2f, 0x78c636a8514a7af9, 0xaee3b35fe11e7533, 0x7fbd199278f6ffd7
, 0x41aabbf4363d77de, 0x1b27fdf18b96bf6a, 0xda264a1dff9a981c, 0x36efc08530c0bf9a, 0x5bd8862a5d830854, 0x23d7c905e656e6cb, 0x4523324c5b64fdcf, 0x36627f376238665f, 0x564f53925c6d5ea4, 0x17c7cc86a1913022, 0xf90db52a543b009b, 0x15192dc91f8b994b
, 0x80bfa3c1a79ec6e2, 0x48fca8ea99772ecc, 0xfee6a3b98c0f1824, 0x46a8c75601b81e22, 0x2cb3c402a8895fcc, 0x1d1dff9c04305ce2, 0xc1aefe78e85971d7, 0x79c6a083ab5a80b2, 0x379c7bca5dbf2518, 0x2419358989b3ca02, 0xc9c42c9cfa5f470e, 0x4481c2ce91b14459
, 0x6b04dea1ea26deca, 0x26ee3ceee0d0a101, 0xe36cc6bcd8fa4f26, 0x4d14709719764fbd, 0xe0572a706f1fef52, 0x0f75fb69a23f2ec1, 0x32ae4b04a864cf3b, 0x0b6373a91b944773, 0x1a8f2bc20bd088af, 0x586b0d5ace401747, 0xa0e6b094a3c51433, 0x1752a123c268c1c7
, 0x643c2a93b5770ea1, 0x536cb9d1b71eeb43, 0x6bfb0525d0cc6b3f, 0x1f4dcfeec3adefc3, 0x28a0169dd0bf57f0, 0x1336c9aa20a35449, 0xbbcda068703ad7a1, 0x5e33478283c1e03d, 0xf1997733d18fdaf2, 0x789af507a17bb867, 0x79970c14d5695613, 0x79452342e845256f
, 0x6c12f9367a26a018, 0x11beda1c8f9cdfbe, 0x720e6ddf24b30929, 0x7706e91e3e544755, 0x4460381d3a6c9059, 0x7e01916c3678c424, 0x6024355a61d2bb07, 0x68bae01d79c869e2, 0xf21cbcff285df659, 0x02f7ee6aeb57c933, 0xce0f078c17266467, 0x039b4fdb5170a103
, 0xd5de0fec61a4ae1b, 0x33d37a152a778695, 0xea64e40e6a10ded9, 0x1f1d394373bdb213, 0xf63598b6ef59fd14, 0x57922adc3ae52283, 0xe39a90e18b76f4a1, 0x27f3dbebd98a9dae, 0x18179dd9c03804b3, 0x511d72c1912e2d73, 0x88e1f6d24b2f3225, 0x56009999cdc2997f
, 0xda6df977b7d82fe4, 0x76f746bba63da226, 0x0b5facfc3bf13bd7, 0x4a31eb04f66f0e18, 0x8ace73d5e7cfe28f, 0x19aa731bc30c20b1, 0xa91979fe73400317, 0x6795ce71a09c7c9f, 0x93d55501933700ba, 0x3850eaf08b1fd14d, 0x450c5abc89edca71, 0x1be5db848bdfa5ef
, 0x77667d3f4fcf082b, 0x673b6e6c4824bc45, 0x6f22c12a5fe0ed6d, 0x006ee6722b5dfed1, 0xb47a13c1468d0c62, 0x40564879a378e6e4, 0x0bc6b553a9d3ab58, 0x21761c79e44dfcfd, 0x66f36ed3eb1050fb, 0x2e67df1312dd01d3, 0x48744c4a68dbf2ad, 0x7844962b6d6e039c
, 0xe07b5675d378b65f, 0x336262aa3d2c1df0, 0x320a5667d78c2e2b, 0x4f668dd96dda5e2a, 0xe21556795c7b8470, 0x3061905b2ef82bb1, 0xaee53211472206b6, 0x1f87377fee0d7a39, 0xdac58c52a3b1a0c7, 0x6e3c4ce04f0d7ffd, 0xfdffec45d4a3990f, 0x4b5340f79e2ae2c2
, 0x0537c8b7b3d1f332, 0x55292744ae35ee1a, 0x42336d0e6d057f1e, 0x5ac40e9e645cb3d7, 0x848f7b7f845e46c7, 0x74bda86736eff150, 0x891acf622baf4f35, 0x14bcef9cf39667bb, 0x9aa1354d9731b9b3, 0x27e855a19295e59f, 0x1a829a8e10662ed0, 0x3bbc43f9ec4437a7
, 0x8bfa8b1cb1de5341, 0x3432778068d35549, 0xe3d807da41f25a48, 0x1bb6ee1ce2efe552, 0x08d9bded0bd3affc, 0x290f1c5299a917a8, 0xda8dfd79562f8939, 0x1bf7aae68686211f, 0x2ab6daf9bc860765, 0x7bef6e2f0eb58a0b, 0x8746faab7c439b94, 0x017ea87750bb8bda
, 0xf8dfeb22239c9a7c, 0x35cec0d2887b3a13, 0x68aa94ac601f1606, 0x7470553f8ba61767, 0x37894f91c9eac410, 0x55b22aeb8337f732, 0x53f8d90f29a2fe94, 0x0aec068aec69023a, 0x40506162ad6182ee, 0x6a327ff1ac1e5475, 0x968d7095492df3c8, 0x3f93f46195f67521
, 0x4983bca28970d546, 0x2716b931296b53c2, 0xf42b013266b6f8b3, 0x76f29b084b6a369f, 0x8e28749222216249, 0x4f2fa1d3a6c1acfd, 0x0ee66697eab8f954, 0x37c33e28fec0cce5, 0x7d0419e2bafd1dd1, 0x01f04d4299b94daa, 0x5ec06abbc1e5c7e6, 0x3a24c66060ed72a9
, 0x0db764e15f960f26, 0x1d5973d5d59f9c3a, 0xf3dc2608dc6d9149, 0x1d80e0461b72f518, 0x2264dccd49c8b09c, 0x1f03e7a246334d5e, 0x2d6e38871b1fc2ad, 0x418588ae4f284bd3, 0x3efb071bafe1afa2, 0x0799ba0c80bdd8dc, 0xa6b273222dcc4a76, 0x13859f08ac8a4b23
, 0x0194acc2663c5acb, 0x459fa55bd0bbedf6, 0x1b055550f06f8cc1, 0x09e5fad46599ea75, 0x6b3916ef772958a3, 0x4aaaa5c18093a431, 0x8e1503e36610f594, 0x620ef55048a263b9, 0x5a28963c8cb8ecbc, 0x6aee46b1b740c15a, 0x67e39606f59cfea9, 0x13a579e3777ca8b1
, 0x45ad92f61cbb8de3, 0x53068a1a42460eab, 0x9b163546de379578, 0x07bf38a7cecd4860, 0xf84c77031d282de1, 0x402aed6399f78ffc, 0xfb83dd20295f6d45, 0x3702e257340d2ecd, 0xb8db2d8b979b97c8, 0x617526d2a50b0c51, 0xd86f6278313017db, 0x2f35eedec55f9d92
, 0xeecb69493517973b, 0x7a111a74e0baf09a, 0xb82c6da8ec39f63d, 0x4217076312833746, 0x5d36d11f3dda88d9, 0x7baebcb360f2a887, 0x9829b62d093d6cbb, 0x10f17a2f6edf28fd, 0xfe3efa4353f40626, 0x731ca3065c118e34, 0x6185678827960895, 0x07f906a4f4c6355c
, 0x361d9cd10e657142, 0x2b5f5d452dd861ce, 0xa3e01df05d04b69a, 0x533723bc4cfcc0db, 0x820384afa1bbccb5, 0x4e67e941595d8dfd, 0x0f8da50839e13646, 0x6887a0573a596968, 0xe93dd1df5ace7343, 0x0d4076f28ecf96c8, 0x0ba2f854988074c1, 0x5eb2a314a41a40b6
, 0x49ff6d27a676b27e, 0x15f7ca40acd5114e, 0xc171f9a750d7da95, 0x3bedbe891f79eb5c, 0x5b643bceb83f74ff, 0x088b1af3aa331a4c, 0xde294c7e0a60c4a9, 0x0a0770fc8120b151, 0xf09b757a0c7c1937, 0x34b797c03efd9c88, 0x051e3edb2c28cc49, 0x66db34ec5ac5122c
, 0x95fde0d3d3dc8cbf, 0x797897c8121818cf, 0x1fd46d197710f89d, 0x533a505803f809c5, 0xb60f1c090c9fd211, 0x4a7c3479af5c9d82, 0x4bfc3ffa4c8cf5a5, 0x6949f4a61306821f, 0xd814c949c67abcdc, 0x419a5e33166863c4, 0x9de646f6bd0895e0, 0x497cc1449a54545a
, 0x69eb31247fe126f2, 0x323c83233967f477, 0x52e0db4d3d78127d, 0x42a0e188e7b9380c, 0x3a6b011c46e34e7e, 0x79f4168aa9a0b4aa, 0x94270a25d708fa4d, 0x2bb28618cbc9cdc8, 0x741e46bb04606819, 0x02790c52fb2ce982, 0x6dbb92d0c6d0af10, 0x32aa96ae061e9412
, 0x1376700c90d98eaa, 0x4d1dfe650c0a7136, 0xb397f8eef89aff20, 0x4836ac4a041bae37, 0xf37c1076a80a02b8, 0x0d063fa2467b3a37, 0x498f2617b56b7e7b, 0x65ef1194db859a5d, 0xd1fe25d5d28ffcb6, 0x228ee6f49459c083, 0x6b7e82b3b009b15b, 0x713b185ef1fccbfc
, 0x552468f1ff60c298, 0x2b7ba65d02519614, 0x8a86ad90ff0816c2, 0x7bf9249284bd02e5, 0x3008c56e474c2d10, 0x171473b77f804540, 0x15fb79d07bdea766, 0x66ac67c7b9b0951f, 0x34bca15bb6d2f652, 0x13c63dd2687d617b, 0xc515ae237715c19c, 0x0e543c6765fbfef2
, 0x668c80faf156fb5e, 0x1e2e9e3b3d9962b8, 0x89ebaa264394e113, 0x322add21cf1659cf, 0xf9e6e26733619f8e, 0x723bfc8b792147f0, 0x79aef2837d7e092f, 0x1aa61c59290b5011, 0x9955ae576a499cd3, 0x2c3d6e6a5a1ce0da, 0xb864cfa199a8676b, 0x4961a21f1080285f
, 0x828e184adf9d997b, 0x0c84bda97e7ce725, 0xe6974677094cfcc5, 0x4ec8cd773946105b, 0xa48681bcc95fb5c6, 0x6ade87f8f7a5f269, 0x9b97628fdd39c03d, 0x3bde0ee1f19f1842, 0x4ef8c8fb117c0ca1, 0x769bf8f8d07de9bf, 0xc8f5f435b78a57e5, 0x79987aa861bbcf9c
, 0x7f6c557204b02022, 0x119bd819111c69d1, 0xf0c61ef00b3eb70b, 0x4317f0511bfb7b39, 0x36a2b944e84d608e, 0x1c1a3862da3369cb, 0x37dbf471085f1775, 0x3835751e107419ad, 0x04ab0c84bb07a3fe, 0x63758bfbc7df13a0, 0x15ffd20cb554f23e, 0x1ff11c442b1515b7
, 0x171377f1bf937186, 0x615efe82b83538f8, 0x321e7cfae352a761, 0x7af02427d7241502, 0x86546e47f2cc559f, 0x65a1d8a017659d75, 0xc95d8aa5b8bfdac9, 0x01e887cb68990623, 0xf1f8ee8c466bcc3d, 0x40ce5e4f2ba3908f, 0xd2b81a3480c16b35, 0x51625d3eabf708cd
, 0x44d770a210105739, 0x7f1de74a022958a0, 0xfbe4c91bd1e8f732, 0x204fbacb13586460, 0x97d79097d62e3cf8, 0x541ad5591934b114, 0xfdfb47919c141909, 0x354926e5244fdecf, 0x6291b0a0e2e994b0, 0x2b9a9a69d3a6c3d1, 0x8189be54302371e7, 0x3645c65df1a881cd
, 0xdf0460f445e3877b, 0x7ea384dc52d0d26e, 0x0c2e5f768d46b6b0, 0x1f6e62daa7c5d4e6, 0xf8b026b33b2343ee, 0x2b7183c8767d372c, 0xbd45d1b6b6731517, 0x4ddb3d287c470d60, 0x1031dba40263ece2, 0x4e737fa0d659045f, 0x8cbc98d07d09b455, 0x34a35128a2bcb7f5 };

static void mod1271(felm_t a)
{ // Modular correction, a = a mod (2^127-1)
    _subborrow_u64(_subborrow_u64(0, a[0], 0xFFFFFFFFFFFFFFFF, &a[0]), a[1], 0x7FFFFFFFFFFFFFFF, &a[1]);
    unsigned long long mask = 0 - (a[1] >> 63);
    _addcarry_u64(_addcarry_u64(0, a[0], mask, &a[0]), a[1], 0x7FFFFFFFFFFFFFFF & mask, &a[1]);
}

static void fpadd1271(felm_t a, felm_t b, felm_t c)
{ // Field addition, c = a+b mod (2^127-1)
    _addcarry_u64(_addcarry_u64(0, a[0], b[0], &c[0]), a[1], b[1], &c[1]);
    _addcarry_u64(_addcarry_u64(0, c[0], c[1] >> 63, &c[0]), c[1] & 0x7FFFFFFFFFFFFFFF, 0, &c[1]);
}

static void fpsub1271(felm_t a, felm_t b, felm_t c)
{ // Field subtraction, c = a-b mod (2^127-1)
    _subborrow_u64(_subborrow_u64(0, a[0], b[0], &c[0]), a[1], b[1], &c[1]);
    _subborrow_u64(_subborrow_u64(0, c[0], c[1] >> 63, &c[0]), c[1] & 0x7FFFFFFFFFFFFFFF, 0, &c[1]);
}

static void fpneg1271(felm_t a)
{ // Field negation, a = -a mod (2^127-1)
    a[0] = ~a[0];
    a[1] = 0x7FFFFFFFFFFFFFFF - a[1];
}

static void fpmul1271(felm_t a, felm_t b, felm_t c)
{ // Field multiplication, c = a*b mod (2^127-1)
    unsigned long long tt1[2], tt2[2], tt3[2], tt4[2];

    tt1[0] = _umul128(a[0], b[0], &tt3[0]);
    tt2[0] = _umul128(a[0], b[1], &tt2[1]);
    _addcarry_u64(_addcarry_u64(0, tt2[0], tt3[0], &tt2[0]), tt2[1], 0, &tt2[1]);
    tt3[0] = _umul128(a[1], b[0], &tt3[1]);
    _addcarry_u64(_addcarry_u64(0, tt2[0], tt3[0], &tt2[0]), tt2[1], tt3[1], &tt2[1]);
    tt3[0] = _umul128(a[1], b[1], &tt3[1]);
    tt4[0] = __shiftright128(tt2[0], tt2[1], 63);
    tt4[1] = tt2[1] >> 63;
    tt3[1] = __shiftleft128(tt3[0], tt3[1], 1);
    tt3[0] = tt3[0] << 1;
    _addcarry_u64(_addcarry_u64(0, tt4[0], tt3[0], &tt3[0]), tt4[1], tt3[1], &tt3[1]);
    tt1[1] = tt2[0] & 0x7FFFFFFFFFFFFFFF;
    _addcarry_u64(_addcarry_u64(0, tt1[0], tt3[0], &tt1[0]), tt1[1], tt3[1], &tt1[1]);
    tt3[0] = tt1[1] >> 63;
    tt1[1] &= 0x7FFFFFFFFFFFFFFF;
    _addcarry_u64(_addcarry_u64(0, tt1[0], tt3[0], &c[0]), tt1[1], 0, &c[1]);
}

static void fpsqr1271(felm_t a, felm_t c)
{ // Field squaring, c = a^2 mod (2^127-1)
    unsigned long long tt1[2], tt2[2], tt3[2], tt4[2];

    tt1[0] = _umul128(a[0], a[0], &tt3[0]);
    tt2[0] = _umul128(a[0], a[1], &tt2[1]);
    _addcarry_u64(_addcarry_u64(0, tt2[0], tt3[0], &tt3[0]), tt2[1], 0, &tt3[1]);
    _addcarry_u64(_addcarry_u64(0, tt2[0], tt3[0], &tt2[0]), tt2[1], tt3[1], &tt2[1]);
    tt3[0] = _umul128(a[1], a[1], &tt3[1]);
    tt4[0] = __shiftright128(tt2[0], tt2[1], 63);
    tt4[1] = tt2[1] >> 63;
    tt3[1] = __shiftleft128(tt3[0], tt3[1], 1);
    tt3[0] = tt3[0] << 1;
    _addcarry_u64(_addcarry_u64(0, tt4[0], tt3[0], &tt3[0]), tt4[1], tt3[1], &tt3[1]);
    tt1[1] = tt2[0] & 0x7FFFFFFFFFFFFFFF;
    _addcarry_u64(_addcarry_u64(0, tt1[0], tt3[0], &tt1[0]), tt1[1], tt3[1], &tt1[1]);
    tt3[0] = tt1[1] >> 63;
    tt1[1] &= 0x7FFFFFFFFFFFFFFF;
    _addcarry_u64(_addcarry_u64(0, tt1[0], tt3[0], &c[0]), tt1[1], 0, &c[1]);
}

static void fpexp1251(felm_t a, felm_t af)
{ // Exponentiation over GF(p), af = a^(125-1)
    felm_t t1, t2, t3, t4, t5;

    fpsqr1271(a, t2);
    fpmul1271(a, t2, t2);
    fpsqr1271(t2, t3);
    fpsqr1271(t3, t3);
    fpmul1271(t2, t3, t3);
    fpsqr1271(t3, t4);
    fpsqr1271(t4, t4);
    fpsqr1271(t4, t4);
    fpsqr1271(t4, t4);
    fpmul1271(t3, t4, t4);
    fpsqr1271(t4, t5);
    for (unsigned int i = 0; i < 7; i++) fpsqr1271(t5, t5);
    fpmul1271(t4, t5, t5);
    fpsqr1271(t5, t2);
    for (unsigned int i = 0; i < 15; i++) fpsqr1271(t2, t2);
    fpmul1271(t5, t2, t2);
    fpsqr1271(t2, t1);
    for (unsigned int i = 0; i < 31; i++) fpsqr1271(t1, t1);
    fpmul1271(t2, t1, t1);
    for (unsigned int i = 0; i < 32; i++) fpsqr1271(t1, t1);
    fpmul1271(t1, t2, t1);
    for (unsigned int i = 0; i < 16; i++) fpsqr1271(t1, t1);
    fpmul1271(t5, t1, t1);
    for (unsigned int i = 0; i < 8; i++) fpsqr1271(t1, t1);
    fpmul1271(t4, t1, t1);
    for (unsigned int i = 0; i < 4; i++) fpsqr1271(t1, t1);
    fpmul1271(t3, t1, t1);
    fpsqr1271(t1, t1);
    fpmul1271(a, t1, af);
}

static void fpinv1271(felm_t a)
{ // Field inversion, af = a^-1 = a^(p-2) mod p
  // Hardcoded for p = 2^127-1
    felm_t t;

    fpexp1251(a, t);
    fpsqr1271(t, t);
    fpsqr1271(t, t);
    fpmul1271(a, t, a);
}

static void fpdiv1271(felm_t a)
{ // Field division by two, c = a/2 mod p
    unsigned long long mask, temp[2];

    mask = (0 - (1 & a[0]));
    _addcarry_u64(_addcarry_u64(0, a[0], mask, &temp[0]), a[1], (mask >> 1), &temp[1]);
    a[0] = __shiftright128(temp[0], temp[1], 1);
    a[1] = (temp[1] >> 1);
}

static void fp2div1271(f2elm_t a)
{ // GF(p^2) division by two c = a/2 mod p
    unsigned long long mask, temp[2];

    mask = (0 - (1 & a[0][0]));
    _addcarry_u64(_addcarry_u64(0, a[0][0], mask, &temp[0]), a[0][1], (mask >> 1), &temp[1]);
    a[0][0] = __shiftright128(temp[0], temp[1], 1);
    a[0][1] = (temp[1] >> 1);

    mask = (0 - (1 & a[1][0]));
    _addcarry_u64(_addcarry_u64(0, a[1][0], mask, &temp[0]), a[1][1], (mask >> 1), &temp[1]);
    a[1][0] = __shiftright128(temp[0], temp[1], 1);
    a[1][1] = (temp[1] >> 1);
}

static void fp2copy1271(f2elm_t a, f2elm_t c)
{ // Copy of a GF(p^2) element, c = a
    c[0][0] = a[0][0];
    c[0][1] = a[0][1];
    c[1][0] = a[1][0];
    c[1][1] = a[1][1];
}

static void fp2neg1271(f2elm_t a)
{ // GF(p^2) negation, a = -a in GF((2^127-1)^2)
    fpneg1271(a[0]);
    fpneg1271(a[1]);
}

static void fp2sqr1271(f2elm_t a, f2elm_t c)
{ // GF(p^2) squaring, c = a^2 in GF((2^127-1)^2)
    felm_t t1, t2, t3;

    fpadd1271(a[0], a[1], t1);           // t1 = a0+a1 
    fpsub1271(a[0], a[1], t2);           // t2 = a0-a1
    fpmul1271(a[0], a[1], t3);           // t3 = a0*a1
    fpmul1271(t1, t2, c[0]);             // c0 = (a0+a1)(a0-a1)
    fpadd1271(t3, t3, c[1]);             // c1 = 2a0*a1
}

static void fp2mul1271(f2elm_t a, f2elm_t b, f2elm_t c)
{ // GF(p^2) multiplication, c = a*b in GF((2^127-1)^2)
    felm_t t1, t2, t3, t4;

    fpmul1271(a[0], b[0], t1);          // t1 = a0*b0
    fpmul1271(a[1], b[1], t2);          // t2 = a1*b1
    fpadd1271(a[0], a[1], t3);          // t3 = a0+a1
    fpadd1271(b[0], b[1], t4);          // t4 = b0+b1
    fpsub1271(t1, t2, c[0]);            // c[0] = a0*b0 - a1*b1
    fpmul1271(t3, t4, t3);              // t3 = (a0+a1)*(b0+b1)
    fpsub1271(t3, t1, t3);              // t3 = (a0+a1)*(b0+b1) - a0*b0
    fpsub1271(t3, t2, c[1]);            // c[1] = (a0+a1)*(b0+b1) - a0*b0 - a1*b1    
}

static void fp2add1271(f2elm_t a, f2elm_t b, f2elm_t c)
{ // GF(p^2) addition, c = a+b in GF((2^127-1)^2)
    fpadd1271(a[0], b[0], c[0]);
    fpadd1271(a[1], b[1], c[1]);
}

static void fp2sub1271(f2elm_t a, f2elm_t b, f2elm_t c)
{ // GF(p^2) subtraction, c = a-b in GF((2^127-1)^2) 
    fpsub1271(a[0], b[0], c[0]);
    fpsub1271(a[1], b[1], c[1]);
}

static void fp2addsub1271(f2elm_t a, f2elm_t b, f2elm_t c)
{ // GF(p^2) addition followed by subtraction, c = 2a-b in GF((2^127-1)^2)

    fp2add1271(a, a, a);
    fp2sub1271(a, b, c);
}

static void fp2inv1271(f2elm_t a)
{ // GF(p^2) inversion, a = (a0-i*a1)/(a0^2+a1^2)
    f2elm_t t1;

    fpsqr1271(a[0], t1[0]);             // t10 = a0^2
    fpsqr1271(a[1], t1[1]);             // t11 = a1^2
    fpadd1271(t1[0], t1[1], t1[0]);     // t10 = a0^2+a1^2
    fpinv1271(t1[0]);                   // t10 = (a0^2+a1^2)^-1
    fpneg1271(a[1]);                    // a = a0-i*a1
    fpmul1271(a[0], t1[0], a[0]);
    fpmul1271(a[1], t1[0], a[1]);       // a = (a0-i*a1)*(a0^2+a1^2)^-1
}

static void table_lookup_fixed_base(point_precomp_t* table, point_precomp_t P, unsigned int digit, unsigned int sign)
{ // Table lookup to extract a point represented as (x+y,y-x,2t) corresponding to extended twisted Edwards coordinates (X:Y:Z:T) with Z=1
    *((__m256i*)P->t2) = *((__m256i*)table[digit]->t2);
    if (sign)
    {
        *((__m256i*)P->xy) = *((__m256i*)table[digit]->yx);
        *((__m256i*)P->yx) = *((__m256i*)table[digit]->xy);
        fp2neg1271(P->t2);
    }
    else
    {
        *((__m256i*)P->xy) = *((__m256i*)table[digit]->xy);
        *((__m256i*)P->yx) = *((__m256i*)table[digit]->yx);
    }
}

static void multiply(const unsigned long long* a, const unsigned long long* b, unsigned long long* c)
{ // Schoolbook multiprecision multiply, c = a*b   
    unsigned long long u, v, UV0, UV1;

    c[0] = _umul128(a[0], b[0], &u);
    UV0 = _umul128(a[0], b[1], &UV1);
    u = UV1 + _addcarry_u64(0, UV0, u, &v);
    u += _addcarry_u64(0, 0, v, &c[1]);
    UV0 = _umul128(a[0], b[2], &UV1);
    u = UV1 + _addcarry_u64(0, UV0, u, &v);
    u += _addcarry_u64(0, 0, v, &c[2]);
    UV0 = _umul128(a[0], b[3], &UV1);
    u = UV1 + _addcarry_u64(0, UV0, u, &v);
    c[4] = u + _addcarry_u64(0, 0, v, &c[3]);

    v = _umul128(a[1], b[0], &UV1);
    u = UV1 + _addcarry_u64(0, c[1], v, &c[1]);
    UV0 = _umul128(a[1], b[1], &UV1);
    u = UV1 + _addcarry_u64(0, UV0, u, &v);
    u += _addcarry_u64(0, c[2], v, &c[2]);
    UV0 = _umul128(a[1], b[2], &UV1);
    u = UV1 + _addcarry_u64(0, UV0, u, &v);
    u += _addcarry_u64(0, c[3], v, &c[3]);
    UV0 = _umul128(a[1], b[3], &UV1);
    u = UV1 + _addcarry_u64(0, UV0, u, &v);
    c[5] = u + _addcarry_u64(0, c[4], v, &c[4]);

    v = _umul128(a[2], b[0], &UV1);
    u = UV1 + _addcarry_u64(0, c[2], v, &c[2]);
    UV0 = _umul128(a[2], b[1], &UV1);
    u = UV1 + _addcarry_u64(0, UV0, u, &v);
    u += _addcarry_u64(0, c[3], v, &c[3]);
    UV0 = _umul128(a[2], b[2], &UV1);
    u = UV1 + _addcarry_u64(0, UV0, u, &v);
    u += _addcarry_u64(0, c[4], v, &c[4]);
    UV0 = _umul128(a[2], b[3], &UV1);
    u = UV1 + _addcarry_u64(0, UV0, u, &v);
    c[6] = u + _addcarry_u64(0, c[5], v, &c[5]);

    v = _umul128(a[3], b[0], &UV1);
    u = UV1 + _addcarry_u64(0, c[3], v, &c[3]);
    UV0 = _umul128(a[3], b[1], &UV1);
    u = UV1 + _addcarry_u64(0, UV0, u, &v);
    u += _addcarry_u64(0, c[4], v, &c[4]);
    UV0 = _umul128(a[3], b[2], &UV1);
    u = UV1 + _addcarry_u64(0, UV0, u, &v);
    u += _addcarry_u64(0, c[5], v, &c[5]);
    UV0 = _umul128(a[3], b[3], &UV1);
    u = UV1 + _addcarry_u64(0, UV0, u, &v);
    c[7] = u + _addcarry_u64(0, c[6], v, &c[6]);
}

static void subtract_mod_order(const unsigned long long* a, const unsigned long long* b, unsigned long long* c)
{ // Subtraction modulo the curve order, c = a-b mod order
    unsigned char bout = _subborrow_u64(0, a[0], b[0], &c[0]);
    bout = _subborrow_u64(bout, a[1], b[1], &c[1]);
    bout = _subborrow_u64(bout, a[2], b[2], &c[2]);
    if (_subborrow_u64(bout, a[3], b[3], &c[3]))
    {
        unsigned char carry = _addcarry_u64(0, c[0], CURVE_ORDER_0, &c[0]);
        carry = _addcarry_u64(carry, c[1], CURVE_ORDER_1, &c[1]);
        carry = _addcarry_u64(carry, c[2], CURVE_ORDER_2, &c[2]);
        _addcarry_u64(carry, c[3], CURVE_ORDER_3, &c[3]);
    }
}

static void Montgomery_multiply_mod_order(const unsigned long long* ma, const unsigned long long* mb, unsigned long long* mc)
{ // 256-bit Montgomery multiplication modulo the curve order, mc = ma*mb*r' mod order, where ma,mb,mc in [0, order-1]
  // ma, mb and mc are assumed to be in Montgomery representation
  // The Montgomery constant r' = -r^(-1) mod 2^(log_2(r)) is the global value "Montgomery_rprime", where r is the order   
    unsigned long long P[2 * 4], Q[2 * 4], temp[2 * 4];

    multiply(ma, mb, P); // P = ma * mb
    multiply(P, (unsigned long long*)&Montgomery_rprime, Q); // Q = P * r' mod 2^(log_2(r))
    multiply(Q, (unsigned long long*)&curve_order, temp); // temp = Q * r

    // (cout, temp) = P + Q * r
    unsigned char cout = _addcarry_u64(0, P[0], temp[0], &temp[0]);
    cout = _addcarry_u64(cout, P[1], temp[1], &temp[1]);
    cout = _addcarry_u64(cout, P[2], temp[2], &temp[2]);
    cout = _addcarry_u64(cout, P[3], temp[3], &temp[3]);
    cout = _addcarry_u64(cout, P[4], temp[4], &temp[4]);
    cout = _addcarry_u64(cout, P[5], temp[5], &temp[5]);
    cout = _addcarry_u64(cout, P[6], temp[6], &temp[6]);
    cout = _addcarry_u64(cout, P[7], temp[7], &temp[7]);

    // (cout, mc) = (P + Q * r)/2^(log_2(r))
    // (cout, mc) = (cout, mc) - r
    unsigned char bout = _subborrow_u64(0, temp[4 + 0], CURVE_ORDER_0, &mc[0]);
    bout = _subborrow_u64(bout, temp[4 + 1], CURVE_ORDER_1, &mc[1]);
    bout = _subborrow_u64(bout, temp[4 + 2], CURVE_ORDER_2, &mc[2]);
    bout = _subborrow_u64(bout, temp[4 + 3], CURVE_ORDER_3, &mc[3]);

    if (cout - bout)
    {
        // mc = mc + r
        cout = _addcarry_u64(0, mc[0], CURVE_ORDER_0, &mc[0]);
        cout = _addcarry_u64(cout, mc[1], CURVE_ORDER_1, &mc[1]);
        cout = _addcarry_u64(cout, mc[2], CURVE_ORDER_2, &mc[2]);
        _addcarry_u64(cout, mc[3], CURVE_ORDER_3, &mc[3]);
    }
}

static void modulo_order(unsigned long long* a, unsigned long long* c)
{ // Reduction modulo the order using Montgomery arithmetic
  // ma = a*Montgomery_Rprime mod r, where a,ma in [0, r-1], a,ma,r < 2^256
  // c = ma*1*Montgomery_Rprime^(-1) mod r, where ma,c in [0, r-1], ma,c,r < 2^256
    unsigned long long ma[4];

    Montgomery_multiply_mod_order(a, Montgomery_Rprime, ma);
    Montgomery_multiply_mod_order(ma, ONE, c);
}

static void eccnorm(point_extproj_t P, point_t Q)
{ // Normalize a projective point (X1:Y1:Z1), including full reduction
    fp2inv1271(P->z);                      // Z1 = Z1^-1
    fp2mul1271(P->x, P->z, Q->x);          // X1 = X1/Z1
    fp2mul1271(P->y, P->z, Q->y);          // Y1 = Y1/Z1
    mod1271(Q->x[0]);
    mod1271(Q->x[1]);
    mod1271(Q->y[0]);
    mod1271(Q->y[1]);
}

static void R1_to_R2(point_extproj_t P, point_extproj_precomp_t Q)
{ // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT), where T = Ta*Tb
    fp2add1271(P->ta, P->ta, Q->t2);                  // T = 2*Ta
    fp2add1271(P->x, P->y, Q->xy);                    // QX = X+Y
    fp2sub1271(P->y, P->x, Q->yx);                    // QY = Y-X 
    fp2mul1271(Q->t2, P->tb, Q->t2);                  // T = 2*T
    fp2add1271(P->z, P->z, Q->z2);                    // QZ = 2*Z
    fp2mul1271(Q->t2, (felm_t*)&PARAMETER_d, Q->t2);  // QT = 2d*T
}

static void R1_to_R3(point_extproj_t P, point_extproj_precomp_t Q)
{ // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T), where T = Ta*Tb
    fp2add1271(P->x, P->y, Q->xy);         // XQ = (X1+Y1) 
    fp2sub1271(P->y, P->x, Q->yx);         // YQ = (Y1-X1) 
    fp2mul1271(P->ta, P->tb, Q->t2);       // TQ = T1
    fp2copy1271(P->z, Q->z2);              // ZQ = Z1 
}

static void R2_to_R4(point_extproj_precomp_t P, point_extproj_t Q)
{ // Conversion from representation (X+Y,Y-X,2Z,2dT) to (2X,2Y,2Z,2dT) 
    fp2sub1271(P->xy, P->yx, Q->x);        // XQ = 2*X1
    fp2add1271(P->xy, P->yx, Q->y);        // YQ = 2*Y1
    fp2copy1271(P->z2, Q->z);              // ZQ = 2*Z1
}

static void eccdouble(point_extproj_t P)
{ // Point doubling 2P
    f2elm_t t1, t2;

    fp2sqr1271(P->x, t1);                  // t1 = X1^2
    fp2sqr1271(P->y, t2);                  // t2 = Y1^2
    fp2add1271(P->x, P->y, P->x);          // t3 = X1+Y1
    fp2add1271(t1, t2, P->tb);             // Tbfinal = X1^2+Y1^2      
    fp2sub1271(t2, t1, t1);                // t1 = Y1^2-X1^2      
    fp2sqr1271(P->x, P->ta);               // Ta = (X1+Y1)^2 
    fp2sqr1271(P->z, t2);                  // t2 = Z1^2  
    fp2sub1271(P->ta, P->tb, P->ta);       // Tafinal = 2X1*Y1 = (X1+Y1)^2-(X1^2+Y1^2)  
    fp2addsub1271(t2, t1, t2);             // t2 = 2Z1^2-(Y1^2-X1^2) 
    fp2mul1271(t1, P->tb, P->y);           // Yfinal = (X1^2+Y1^2)(Y1^2-X1^2)  
    fp2mul1271(t2, P->ta, P->x);           // Xfinal = 2X1*Y1*[2Z1^2-(Y1^2-X1^2)]
    fp2mul1271(t1, t2, P->z);              // Zfinal = (Y1^2-X1^2)[2Z1^2-(Y1^2-X1^2)]
}

static void eccadd_core(point_extproj_precomp_t P, point_extproj_precomp_t Q, point_extproj_t R)
{ // Basic point addition R = P+Q or R = P+P
    f2elm_t t1, t2;

    fp2mul1271(P->t2, Q->t2, R->z);        // Z = 2dT1*T2 
    fp2mul1271(P->z2, Q->z2, t1);          // t1 = 2Z1*Z2  
    fp2mul1271(P->xy, Q->xy, R->x);        // X = (X1+Y1)(X2+Y2) 
    fp2mul1271(P->yx, Q->yx, R->y);        // Y = (Y1-X1)(Y2-X2) 
    fp2sub1271(t1, R->z, t2);              // t2 = theta
    fp2add1271(t1, R->z, t1);              // t1 = alpha
    fp2sub1271(R->x, R->y, R->tb);         // Tbfinal = beta
    fp2add1271(R->x, R->y, R->ta);         // Tafinal = omega
    fp2mul1271(R->tb, t2, R->x);           // Xfinal = beta*theta
    fp2mul1271(t1, t2, R->z);              // Zfinal = theta*alpha
    fp2mul1271(R->ta, t1, R->y);           // Yfinal = alpha*omega
}

static void eccadd(point_extproj_precomp_t Q, point_extproj_t P)
{ // Complete point addition P = P+Q or P = P+P
    point_extproj_precomp_t R;

    R1_to_R3(P, R);                        // R = (X1+Y1,Y1-Z1,Z1,T1)
    eccadd_core(Q, R, P);                  // P = (X2+Y2,Y2-X2,2Z2,2dT2) + (X1+Y1,Y1-Z1,Z1,T1)
}

static void point_setup(point_t P, point_extproj_t Q)
{ // Point conversion to representation (X,Y,Z,Ta,Tb) 
    fp2copy1271(P->x, Q->x);
    fp2copy1271(P->y, Q->y);
    fp2copy1271(Q->x, Q->ta);                                       // Ta = X1
    fp2copy1271(Q->y, Q->tb);                                       // Tb = Y1
    Q->z[0][0] = 1; Q->z[0][1] = 0; Q->z[1][0] = 0; Q->z[1][1] = 0; // Z1 = 1
}

static BOOLEAN ecc_point_validate(point_extproj_t P)
{ // Point validation: check if point lies on the curve
    f2elm_t t1, t2, t3;

    fp2sqr1271(P->y, t1);
    fp2sqr1271(P->x, t2);
    fp2sub1271(t1, t2, t3);                                 // -x^2 + y^2 
    fp2mul1271(t1, t2, t1);                                 // x^2*y^2
    fp2mul1271((felm_t*)&PARAMETER_d, t1, t2);              // dx^2*y^2
    t1[0][0] = 1; t1[0][1] = 0; t1[1][0] = 0; t1[1][1] = 0; // t1 = 1
    fp2add1271(t2, t1, t2);                                 // 1 + dx^2*y^2
    fp2sub1271(t3, t2, t1);                                 // -x^2 + y^2 - 1 - dx^2*y^2

    return (((t1[0][0] | t1[0][1]) == 0 || ((t1[0][0] + 1) | (t1[0][1] + 1)) == 0)
        && ((t1[1][0] | t1[1][1]) == 0 || ((t1[1][0] + 1) | (t1[1][1] + 1)) == 0));
}

static void R5_to_R1(point_precomp_t P, point_extproj_t Q)
{ // Conversion from representation (x+y,y-x,2dt) to (X,Y,Z,Ta,Tb) 
    fp2sub1271(P->xy, P->yx, Q->x);                                 // 2*x1
    fp2add1271(P->xy, P->yx, Q->y);                                 // 2*y1
    fp2div1271(Q->x);                                               // XQ = x1
    fp2div1271(Q->y);                                               // YQ = y1 
    Q->z[0][0] = 1; Q->z[0][1] = 0; Q->z[1][0] = 0; Q->z[1][1] = 0; // ZQ = 1
    fp2copy1271(Q->x, Q->ta);                                       // TaQ = x1
    fp2copy1271(Q->y, Q->tb);                                       // TbQ = y1
}

static void eccmadd(point_precomp_t Q, point_extproj_t P)
{ // Mixed point addition P = P+Q or P = P+P
    f2elm_t t1, t2;

    fp2mul1271(P->ta, P->tb, P->ta);        // Ta = T1
    fp2add1271(P->z, P->z, t1);             // t1 = 2Z1        
    fp2mul1271(P->ta, Q->t2, P->ta);        // Ta = 2dT1*t2 
    fp2add1271(P->x, P->y, P->z);           // Z = (X1+Y1) 
    fp2sub1271(P->y, P->x, P->tb);          // Tb = (Y1-X1)
    fp2sub1271(t1, P->ta, t2);              // t2 = theta
    fp2add1271(t1, P->ta, t1);              // t1 = alpha
    fp2mul1271(Q->xy, P->z, P->ta);         // Ta = (X1+Y1)(x2+y2)
    fp2mul1271(Q->yx, P->tb, P->x);         // X = (Y1-X1)(y2-x2)
    fp2mul1271(t1, t2, P->z);               // Zfinal = theta*alpha
    fp2sub1271(P->ta, P->x, P->tb);         // Tbfinal = beta
    fp2add1271(P->ta, P->x, P->ta);         // Tafinal = omega
    fp2mul1271(P->tb, t2, P->x);            // Xfinal = beta*theta
    fp2mul1271(P->ta, t1, P->y);            // Yfinal = alpha*omega
}

static void mLSB_set_recode(unsigned long long* scalar, unsigned int* digits)
{ // Computes the modified LSB-set representation of a scalar
    unsigned int i;
    unsigned long long temp, carry;

    digits[49] = 0;

    // Shift scalar to the right by 1
    scalar[0] = __shiftright128(scalar[0], scalar[1], 1);
    scalar[1] = __shiftright128(scalar[1], scalar[2], 1);
    scalar[2] = __shiftright128(scalar[2], scalar[3], 1);
    scalar[3] >>= 1;

    for (i = 0; i < 49; i++)
    {
        digits[i] = (unsigned int)((scalar[0] & 1) - 1);  // Convention for the "sign" row: if scalar_(i+1) = 0 then digit_i = -1 (negative), else if scalar_(i+1) = 1 then digit_i = 0 (positive)

        // Shift scalar to the right by 1   
        scalar[0] = __shiftright128(scalar[0], scalar[1], 1);
        scalar[1] = __shiftright128(scalar[1], scalar[2], 1);
        scalar[2] = __shiftright128(scalar[2], scalar[3], 1);
        scalar[3] >>= 1;
    }

    for (i = 50; i < 250; i++)
    {
        digits[i] = (unsigned int)(scalar[0] & 1); // digits_i = k mod 2. Sign is determined by the "sign" row

        // Shift scalar to the right by 1
        scalar[0] = __shiftright128(scalar[0], scalar[1], 1);
        scalar[1] = __shiftright128(scalar[1], scalar[2], 1);
        scalar[2] = __shiftright128(scalar[2], scalar[3], 1);
        scalar[3] >>= 1;

        temp = (0 - digits[i - (i / 50) * 50]) & digits[i]; // if (digits_i=0 \/ 1) then temp = 0, else if (digits_i=-1) then temp = 1 

        // floor(scalar/2) + temp
        scalar[0] += temp;
        carry = scalar[0] == 0 ? (temp & 1) : 0; // carry = (scalar[0] < temp);
        scalar[1] += carry;
        carry = scalar[1] == 0 ? (carry & 1) : 0; // carry = (scalar[j] < temp);
        scalar[2] += carry;
        scalar[3] += (scalar[2] == 0 ? (carry & 1) : 0); // carry = (scalar[j] < temp);
    }
}

static void ecc_mul_fixed(unsigned long long* k, point_t Q)
{ // Fixed-base scalar multiplication Q = k*G, where G is the generator. FIXED_BASE_TABLE stores v*2^(w-1) = 80 multiples of G.
    unsigned int digits[250];
    unsigned long long temp[4];
    point_extproj_t R;
    point_precomp_t S;

    modulo_order(k, temp); // temp = k mod (order)

    // Converting scalar to odd using the prime subgroup order
    // If (k is odd) then k_odd = k else k_odd = k + r
    if (!(temp[0] & 1))
    {
        unsigned char carry = _addcarry_u64(0, temp[0], CURVE_ORDER_0, &temp[0]);
        carry = _addcarry_u64(carry, temp[1], CURVE_ORDER_1, &temp[1]);
        carry = _addcarry_u64(carry, temp[2], CURVE_ORDER_2, &temp[2]);
        _addcarry_u64(carry, temp[3], CURVE_ORDER_3, &temp[3]);
    }

    mLSB_set_recode((unsigned long long*)temp, digits);

    table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE) + 64, S, (((((digits[249] << 1) + digits[199]) << 1) + digits[149]) << 1) + digits[99], 0);
    R5_to_R1(S, R);
    table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE) + 48, S, (((((digits[239] << 1) + digits[189]) << 1) + digits[139]) << 1) + digits[89], digits[39]);
    eccmadd(S, R);
    table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE) + 32, S, (((((digits[229] << 1) + digits[179]) << 1) + digits[129]) << 1) + digits[79], digits[29]);
    eccmadd(S, R);
    table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE) + 16, S, (((((digits[219] << 1) + digits[169]) << 1) + digits[119]) << 1) + digits[69], digits[19]);
    eccmadd(S, R);
    table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE), S, (((((digits[209] << 1) + digits[159]) << 1) + digits[109]) << 1) + digits[59], digits[9]);
    eccmadd(S, R);

    for (unsigned int i = 9; i-- > 0; )
    {
        eccdouble(R);
        for (unsigned int j = 0; j < 5; j++)
        {
            table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE) + (((unsigned long long)(4 - j)) << 4), S, (((((digits[5 * 50 - j * 10 + i - 10] << 1) + digits[5 * 50 - j * 10 + i - 10 - 50]) << 1) + digits[5 * 50 - j * 10 + i - 10 - 100]) << 1) + digits[5 * 50 - j * 10 + i - 10 - 150], digits[50 - j * 10 + i - 10]);
            eccmadd(S, R);
        }
    }
    eccnorm(R, Q);
}

static void ecc_tau(point_extproj_t P)
{ // Apply tau mapping to a point, P = tau(P)
    f2elm_t t0, t1;

    fp2sqr1271(P->x, t0);                     // t0 = X1^2
    fp2sqr1271(P->y, t1);                     // t1 = Y1^2
    fp2mul1271(P->x, P->y, P->x);             // X = X1*Y1
    fp2sqr1271(P->z, P->y);                   // Y = Z1^2
    fp2add1271(t0, t1, P->z);                 // Z = X1^2+Y1^2
    fp2sub1271(t1, t0, t0);                   // t0 = Y1^2-X1^2
    fp2add1271(P->y, P->y, P->y);             // Y = 2*Z1^2
    fp2mul1271(P->x, t0, P->x);               // X = X1*Y1*(Y1^2-X1^2)
    fp2sub1271(P->y, t0, P->y);               // Y = 2*Z1^2-(Y1^2-X1^2)
    fp2mul1271(P->x, (felm_t*)&ctau1, P->x);  // Xfinal = X*ctau1
    fp2mul1271(P->y, P->z, P->y);             // Yfinal = Y*Z
    fp2mul1271(P->z, t0, P->z);               // Zfinal = t0*Z
}

static void ecc_tau_dual(point_extproj_t P)
{ // Apply tau_dual mapping to a point, P = tau_dual(P)
    f2elm_t t0, t1;

    fp2sqr1271(P->x, t0);                          // t0 = X1^2
    fp2sqr1271(P->z, P->ta);                       // Ta = Z1^2
    fp2sqr1271(P->y, t1);                          // t1 = Y1^2
    fp2add1271(P->ta, P->ta, P->z);                // Z = 2*Z1^2
    fp2sub1271(t1, t0, P->ta);                     // Tafinal = Y1^2-X1^2
    fp2add1271(t0, t1, t0);                        // t0 = X1^2+Y1^2
    fp2mul1271(P->x, P->y, P->x);                  // X = X1*Y1
    fp2sub1271(P->z, P->ta, P->z);                 // Z = 2*Z1^2-(Y1^2-X1^2)
    fp2mul1271(P->x, (felm_t*)&ctaudual1, P->tb);  // Tbfinal = ctaudual1*X1*X1
    fp2mul1271(P->z, P->ta, P->y);                 // Yfinal = Z*Tafinal
    fp2mul1271(P->tb, t0, P->x);                   // Xfinal = Tbfinal*t0
    fp2mul1271(P->z, t0, P->z);                    // Zfinal = Z*t0
}

static void ecc_delphidel(point_extproj_t P)
{ // Apply delta_phi_delta mapping to a point, P = delta(phi_W(delta_inv(P))), 
  // where phi_W is the endomorphism on the Weierstrass form
    f2elm_t t0, t1, t2, t3, t4, t5, t6;

    fp2sqr1271(P->z, t4);                          // t4 = Z1^2
    fp2mul1271(P->y, P->z, t3);                    // t3 = Y1*Z1
    fp2mul1271(t4, (felm_t*)&cphi4, t0);           // t0 = cphi4*t4
    fp2sqr1271(P->y, t2);                          // t2 = Y1^2
    fp2add1271(t0, t2, t0);                        // t0 = t0+t2
    fp2mul1271(t3, (felm_t*)&cphi3, t1);           // t1 = cphi3*t3
    fp2sub1271(t0, t1, t5);                        // t5 = t0-t1
    fp2add1271(t0, t1, t0);                        // t0 = t0+t1
    fp2mul1271(t0, P->z, t0);                      // t0 = t0*Z1
    fp2mul1271(t3, (felm_t*)&cphi1, t1);           // t1 = cphi1*t3
    fp2mul1271(t0, t5, t0);                        // t0 = t0*t5
    fp2mul1271(t4, (felm_t*)&cphi2, t5);           // t5 = cphi2*t4
    fp2add1271(t2, t5, t5);                        // t5 = t2+t5
    fp2sub1271(t1, t5, t6);                        // t6 = t1-t5
    fp2add1271(t1, t5, t1);                        // t1 = t1+t5
    fp2mul1271(t6, t1, t6);                        // t6 = t1*t6
    fp2mul1271(t6, (felm_t*)&cphi0, t6);           // t6 = cphi0*t6
    fp2mul1271(P->x, t6, P->x);                    // X = X1*t6
    fp2sqr1271(t2, t6);                            // t6 = t2^2
    fp2sqr1271(t3, t2);                            // t2 = t3^2
    fp2sqr1271(t4, t3);                            // t3 = t4^2
    fp2mul1271(t2, (felm_t*)&cphi8, t1);           // t1 = cphi8*t2
    fp2mul1271(t3, (felm_t*)&cphi9, t5);           // t5 = cphi9*t3
    fp2add1271(t1, t6, t1);                        // t1 = t1+t6
    fp2mul1271(t2, (felm_t*)&cphi6, t2);           // t2 = cphi6*t2
    fp2mul1271(t3, (felm_t*)&cphi7, t3);           // t3 = cphi7*t3
    fp2add1271(t1, t5, t1);                        // t1 = t1+t5
    fp2add1271(t2, t3, t2);                        // t2 = t2+t3
    fp2mul1271(t1, P->y, t1);                      // t1 = Y1*t1
    fp2add1271(t6, t2, P->y);                      // Y = t6+t2
    fp2mul1271(P->x, t1, P->x);                    // X = X*t1
    fp2mul1271(P->y, (felm_t*)&cphi5, P->y);       // Y = cphi5*Y
    fpneg1271(P->x[1]);                            // Xfinal = X^p
    fp2mul1271(P->y, P->z, P->y);                  // Y = Y*Z1
    fp2mul1271(t0, t1, P->z);                      // Z = t0*t1
    fp2mul1271(P->y, t0, P->y);                    // Y = Y*t0
    fpneg1271(P->z[1]);                            // Zfinal = Z^p
    fpneg1271(P->y[1]);                            // Yfinal = Y^p
}

static void ecc_delpsidel(point_extproj_t P)
{ // Apply delta_psi_delta mapping to a point, P = delta(psi_W(delta_inv(P))), 
  // where psi_W is the endomorphism on the Weierstrass form
    f2elm_t t0, t1, t2;

    fpneg1271(P->x[1]);                            // X = X1^p
    fpneg1271(P->z[1]);                            // Z = Z1^p
    fpneg1271(P->y[1]);                            // Y = Y1^p
    fp2sqr1271(P->z, t2);                          // t2 = Z1^p^2
    fp2sqr1271(P->x, t0);                          // t0 = X1^p^2
    fp2mul1271(P->x, t2, P->x);                    // X = X1^p*Z1^p^2
    fp2mul1271(t2, (felm_t*)&cpsi2, P->z);         // Z = cpsi2*Z1^p^2
    fp2mul1271(t2, (felm_t*)&cpsi3, t1);           // t1 = cpsi3*Z1^p^2
    fp2mul1271(t2, (felm_t*)&cpsi4, t2);           // t2 = cpsi4*Z1^p^2
    fp2add1271(t0, P->z, P->z);                    // Z = X1^p^2 + cpsi2*Z1^p^2
    fp2add1271(t0, t2, t2);                        // t2 = X1^p^2 + cpsi4*Z1^p^2
    fp2add1271(t0, t1, t1);                        // t1 = X1^p^2 + cpsi3*Z1^p^2
    fp2neg1271(t2);                                // t2 = -(X1^p^2 + cpsi4*Z1^p^2)
    fp2mul1271(P->z, P->y, P->z);                  // Z = Y1^p*(X1^p^2 + cpsi2*Z1^p^2)
    fp2mul1271(P->x, t2, P->x);                    // X = -X1^p*Z1^p^2*(X1^p^2 + cpsi4*Z1^p^2)
    fp2mul1271(t1, P->z, P->y);                    // Yfinal = t1*Z
    fp2mul1271(P->x, (felm_t*)&cpsi1, P->x);       // Xfinal = cpsi1*X
    fp2mul1271(P->z, t2, P->z);                    // Zfinal = Z*t2
}

static void ecc_psi(point_extproj_t P)
{ // Apply psi mapping to a point, P = psi(P)
    ecc_tau(P);
    ecc_delpsidel(P);
    ecc_tau_dual(P);
}

static void ecc_phi(point_extproj_t P)
{ // Apply phi mapping to a point, P = phi(P)
    ecc_tau(P);
    ecc_delphidel(P);
    ecc_tau_dual(P);
}

static void eccneg_extproj_precomp(point_extproj_precomp_t P, point_extproj_precomp_t Q)
{ // Point negation
    fp2copy1271(P->t2, Q->t2);
    fp2copy1271(P->xy, Q->yx);
    fp2copy1271(P->yx, Q->xy);
    fp2copy1271(P->z2, Q->z2);
    fp2neg1271(Q->t2);
}

static void eccneg_precomp(point_precomp_t P, point_precomp_t Q)
{ // Point negation
    fp2copy1271(P->t2, Q->t2);
    fp2copy1271(P->xy, Q->yx);
    fp2copy1271(P->yx, Q->xy);
    fp2neg1271(Q->t2);
}

static unsigned long long mul_truncate(unsigned long long* s, unsigned long long* C)
{ // 256-bit multiplication with truncation for the scalar decomposition
  // Outputs 64-bit value "out" = (unsigned long long)((s * C) >> 256)
    unsigned long long tt1[2], tt2[2];
    unsigned int carry1, carry2;

    _umul128(s[0], C[0], &tt2[0]);
    tt1[0] = _umul128(s[1], C[0], &tt1[1]);
    _addcarry_u64(_addcarry_u64(0, tt1[0], tt2[0], &tt1[0]), tt1[1], 0, &tt1[1]);
    tt2[0] = _umul128(s[0], C[1], &tt2[1]);
    carry1 = _addcarry_u64(_addcarry_u64(0, tt1[0], tt2[0], &tt1[0]), tt1[1], tt2[1], &tt1[0]);
    tt2[0] = _umul128(s[2], C[0], &tt2[1]);
    _addcarry_u64(_addcarry_u64(0, tt1[0], tt2[0], &tt1[0]), carry1, tt2[1], &tt1[1]);
    tt2[0] = _umul128(s[0], C[2], &tt2[1]);
    carry1 = _addcarry_u64(_addcarry_u64(0, tt1[0], tt2[0], &tt1[0]), tt1[1], tt2[1], &tt1[1]);
    tt2[0] = _umul128(s[1], C[1], &tt2[1]);
    carry2 = _addcarry_u64(_addcarry_u64(0, tt1[0], tt2[0], &tt1[0]), tt1[1], tt2[1], &tt1[0]);
    tt2[0] = _umul128(s[0], C[3], &tt2[1]);
    _addcarry_u64(_addcarry_u64(0, tt1[0], tt2[0], &tt1[0]), carry1 + carry2, tt2[1], &tt1[1]);
    tt2[0] = _umul128(s[3], C[0], &tt2[1]);
    _addcarry_u64(_addcarry_u64(0, tt1[0], tt2[0], &tt1[0]), tt1[1], tt2[1], &tt1[1]);
    tt2[0] = _umul128(s[1], C[2], &tt2[1]);
    _addcarry_u64(_addcarry_u64(0, tt1[0], tt2[0], &tt1[0]), tt1[1], tt2[1], &tt1[1]);
    tt2[0] = _umul128(s[2], C[1], &tt2[1]);
    _addcarry_u64(_addcarry_u64(0, tt1[0], tt2[0], &tt1[0]), tt1[1], tt2[1], &tt1[1]);

    return tt1[1] + s[1] * C[3] + s[3] * C[1] + s[2] * C[2];
}

static void decompose(unsigned long long* k, unsigned long long* scalars)
{ // Scalar decomposition for the variable-base scalar multiplication
    const unsigned long long a1 = mul_truncate(k, ell1);
    const unsigned long long a2 = mul_truncate(k, ell2);
    const unsigned long long a3 = mul_truncate(k, ell3);
    const unsigned long long a4 = mul_truncate(k, ell4);

    scalars[0] = k[0] - a1 * B11 - a2 * B21 - a3 * B31 - a4 * B41 + C1;
    scalars[1] = a1 * B12 + a2 - a3 * B32 - a4 * B42 + C2;
    scalars[2] = a3 * B33 - a1 * B13 - a2 + a4 * B43 + C3;
    scalars[3] = a1 * B14 - a2 * B24 - a3 * B34 + a4 * B44 + C4;
    if (!(scalars[0] & 1))
    {
        scalars[0] += B41;
        scalars[1] += B42;
        scalars[2] -= B43;
        scalars[3] -= B44;
    }
}

#pragma optimize("", off)
static void wNAF_recode(unsigned long long scalar, unsigned int w, char* digits)
{ // Computes wNAF recoding of a scalar, where digits are in set {0,+-1,+-3,...,+-(2^(w-1)-1)}
    const int val1 = (int)(1 << (w - 1)) - 1;                           // 2^(w-1) - 1
    const int val2 = (int)(1 << w);                                     // 2^w;
    const unsigned long long mask = (unsigned long long)val2 - 1; // 2^w - 1 
    int index = 0;

    while (scalar)
    {
        int digit = (int)(scalar & 1);
        if (!digit)
        {
            scalar >>= 1;                 // Shift scalar to the right by 1
            digits[index] = 0;
        }
        else
        {
            digit = (int)(scalar & mask);
            scalar >>= w;                 // Shift scalar to the right by w            

            if (digit > val1)
            {
                digit -= val2;
            }
            if (digit < 0)
            {
                scalar++;                 // scalar + 1
            }
            digits[index] = digit;

            if (scalar)                   // Check if scalar != 0
            {
                for (unsigned int i = 0; i < (w - 1); i++)
                {
                    digits[++index] = 0;
                }
            }
        }
        index++;
    }

    while (index < 65)
    {
        digits[index++] = 0;
    }
}
#pragma optimize("", on)

static void ecc_precomp_double(point_extproj_t P, point_extproj_precomp_t* Table)
{ // Generation of the precomputation table used internally by the double scalar multiplication function ecc_mul_double()
    point_extproj_t Q;
    point_extproj_precomp_t PP;

    R1_to_R2(P, Table[0]);                     // Precomputed point Table[0] = P in coordinates (X+Y,Y-X,2Z,2dT)
    eccdouble(P);                              // A = 2*P in (X,Y,Z,Ta,Tb)
    R1_to_R3(P, PP);                           // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T) 

    for (unsigned int i = 1; i < 4; i++)
    {
        eccadd_core(Table[i - 1], PP, Q);      // Table[i] = Table[i-1]+2P using the representations (X,Y,Z,Ta,Tb) <- (X+Y,Y-X,2Z,2dT) + (X+Y,Y-X,Z,T)
        R1_to_R2(Q, Table[i]);                 // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)
    }
}

static BOOLEAN ecc_mul_double(unsigned long long* k, unsigned long long* l, point_t Q)
{ // Double scalar multiplication R = k*G + l*Q, where the G is the generator
  // Uses DOUBLE_SCALAR_TABLE, which contains multiples of G, Phi(G), Psi(G) and Phi(Psi(G))
  // The function uses wNAF with interleaving.
    char digits_k1[65], digits_k2[65], digits_k3[65], digits_k4[65];
    char digits_l1[65], digits_l2[65], digits_l3[65], digits_l4[65];
    point_precomp_t V;
    point_extproj_t Q1, Q2, Q3, Q4, T;
    point_extproj_precomp_t U, Q_table1[4], Q_table2[4], Q_table3[4], Q_table4[4];
    unsigned long long k_scalars[4], l_scalars[4];

    point_setup(Q, Q1);                                             // Convert to representation (X,Y,1,Ta,Tb)

    if (!ecc_point_validate(Q1))                                    // Check if point lies on the curve
    {
        return FALSE;
    }

    // Computing endomorphisms over point Q
    fp2copy1271(Q1->x, Q2->x);
    fp2copy1271(Q1->y, Q2->y);
    fp2copy1271(Q1->z, Q2->z);
    fp2copy1271(Q1->ta, Q2->ta);
    fp2copy1271(Q1->tb, Q2->tb);
    ecc_phi(Q2);
    fp2copy1271(Q1->x, Q3->x);
    fp2copy1271(Q1->y, Q3->y);
    fp2copy1271(Q1->z, Q3->z);
    fp2copy1271(Q1->ta, Q3->ta);
    fp2copy1271(Q1->tb, Q3->tb);
    ecc_psi(Q3);
    fp2copy1271(Q2->x, Q4->x);
    fp2copy1271(Q2->y, Q4->y);
    fp2copy1271(Q2->z, Q4->z);
    fp2copy1271(Q2->ta, Q4->ta);
    fp2copy1271(Q2->tb, Q4->tb);
    ecc_psi(Q4);

    decompose((unsigned long long*)k, k_scalars);                   // Scalar decomposition
    decompose((unsigned long long*)l, l_scalars);
    wNAF_recode(k_scalars[0], 8, digits_k1);                        // Scalar recoding
    wNAF_recode(k_scalars[1], 8, digits_k2);
    wNAF_recode(k_scalars[2], 8, digits_k3);
    wNAF_recode(k_scalars[3], 8, digits_k4);
    wNAF_recode(l_scalars[0], 4, digits_l1);
    wNAF_recode(l_scalars[1], 4, digits_l2);
    wNAF_recode(l_scalars[2], 4, digits_l3);
    wNAF_recode(l_scalars[3], 4, digits_l4);
    ecc_precomp_double(Q1, Q_table1);
    ecc_precomp_double(Q2, Q_table2);
    ecc_precomp_double(Q3, Q_table3);
    ecc_precomp_double(Q4, Q_table4);

    T->x[0][0] = 0; T->x[0][1] = 0; T->x[1][0] = 0; T->x[1][1] = 0; // Initialize T as the neutral point (0:1:1)
    T->y[0][0] = 1; T->y[0][1] = 0; T->y[1][0] = 0; T->y[1][1] = 0;
    T->z[0][0] = 1; T->z[0][1] = 0; T->z[1][0] = 0; T->z[1][1] = 0;

    for (unsigned int i = 65; i-- > 0; )
    {
        eccdouble(T);

        if (digits_l1[i] < 0)
        {
            eccneg_extproj_precomp(Q_table1[(-digits_l1[i]) >> 1], U);
            eccadd(U, T);
        }
        else if (digits_l1[i] > 0)
        {
            eccadd(Q_table1[(digits_l1[i]) >> 1], T);
        }

        if (digits_l2[i] < 0)
        {
            eccneg_extproj_precomp(Q_table2[(-digits_l2[i]) >> 1], U);
            eccadd(U, T);
        }
        else if (digits_l2[i] > 0)
        {
            eccadd(Q_table2[(digits_l2[i]) >> 1], T);
        }

        if (digits_l3[i] < 0)
        {
            eccneg_extproj_precomp(Q_table3[(-digits_l3[i]) >> 1], U);
            eccadd(U, T);
        }
        else if (digits_l3[i] > 0)
        {
            eccadd(Q_table3[(digits_l3[i]) >> 1], T);
        }

        if (digits_l4[i] < 0)
        {
            eccneg_extproj_precomp(Q_table4[(-digits_l4[i]) >> 1], U);
            eccadd(U, T);
        }
        else if (digits_l4[i] > 0)
        {
            eccadd(Q_table4[(digits_l4[i]) >> 1], T);
        }

        if (digits_k1[i] < 0)
        {
            eccneg_precomp(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[(-digits_k1[i]) >> 1], V);
            eccmadd(V, T);
        }
        else if (digits_k1[i] > 0)
        {
            eccmadd(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[(digits_k1[i]) >> 1], T);
        }

        if (digits_k2[i] < 0)
        {
            eccneg_precomp(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[64 + ((-digits_k2[i]) >> 1)], V);
            eccmadd(V, T);
        }
        else if (digits_k2[i] > 0)
        {
            eccmadd(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[64 + ((digits_k2[i]) >> 1)], T);
        }

        if (digits_k3[i] < 0)
        {
            eccneg_precomp(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[2 * 64 + ((-digits_k3[i]) >> 1)], V);
            eccmadd(V, T);
        }
        else if (digits_k3[i] > 0)
        {
            eccmadd(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[2 * 64 + ((digits_k3[i]) >> 1)], T);
        }

        if (digits_k4[i] < 0)
        {
            eccneg_precomp(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[3 * 64 + ((-digits_k4[i]) >> 1)], V);
            eccmadd(V, T);
        }
        else if (digits_k4[i] > 0)
        {
            eccmadd(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[3 * 64 + ((digits_k4[i]) >> 1)], T);
        }
    }

    eccnorm(T, Q);

    return TRUE;
}

static void ecc_precomp(point_extproj_t P, point_extproj_precomp_t* T)
{ // Generation of the precomputation table used by the variable-base scalar multiplication ecc_mul()
    point_extproj_precomp_t Q, R, S;
    point_extproj_t PP;

    // Generating Q = phi(P) = (XQ+YQ,YQ-XQ,ZQ,TQ)
    fp2copy1271(P->x, PP->x);
    fp2copy1271(P->y, PP->y);
    fp2copy1271(P->z, PP->z);
    fp2copy1271(P->ta, PP->ta);
    fp2copy1271(P->tb, PP->tb);
    ecc_phi(PP);
    R1_to_R3(PP, Q);                       // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T) 

    // Generating S = psi(Q) = (XS+YS,YS-XS,ZS,TS)
    ecc_psi(PP);
    R1_to_R3(PP, S);                       // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T) 

    // Generating T[0] = P = (XP+YP,YP-XP,2ZP,2dTP) 
    R1_to_R2(P, T[0]);                     // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)

    // Generating R = psi(P) = (XR+YR,YR-XR,ZR,TR)
    ecc_psi(P);
    R1_to_R3(P, R);                        // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T)  

    eccadd_core(T[0], Q, PP);              // T[1] = P+Q using the representations (X,Y,Z,Ta,Tb) <- (X+Y,Y-X,2Z,2dT) + (X+Y,Y-X,Z,T)
    R1_to_R2(PP, T[1]);                    // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)
    eccadd_core(T[0], R, PP);              // T[2] = P+R 
    R1_to_R2(PP, T[2]);
    eccadd_core(T[1], R, PP);              // T[3] = P+Q+R 
    R1_to_R2(PP, T[3]);
    eccadd_core(T[0], S, PP);              // T[4] = P+S 
    R1_to_R2(PP, T[4]);
    eccadd_core(T[1], S, PP);              // T[5] = P+Q+S 
    R1_to_R2(PP, T[5]);
    eccadd_core(T[2], S, PP);              // T[6] = P+R+S 
    R1_to_R2(PP, T[6]);
    eccadd_core(T[3], S, PP);              // T[7] = P+Q+R+S 
    R1_to_R2(PP, T[7]);
}

static void recode(unsigned long long* scalars, unsigned int* digits, unsigned int* sign_masks)
{ // Recoding sub-scalars for use in the variable-base scalar multiplication
    for (unsigned int i = 0; i < 64; i++)
    {
        scalars[0] >>= 1;
        const unsigned int bit0 = scalars[0] & 1;
        sign_masks[i] = bit0;

        digits[i] = scalars[1] & 1;
        scalars[1] = (scalars[1] >> 1) + ((bit0 | digits[i]) ^ bit0);

        unsigned int bit = scalars[2] & 1;
        scalars[2] = (scalars[2] >> 1) + ((bit0 | bit) ^ bit0);
        digits[i] += (bit << 1);

        bit = scalars[3] & 1;
        scalars[3] = (scalars[3] >> 1) + ((bit0 | bit) ^ bit0);
        digits[i] += (bit << 2);
    }
}

static void cofactor_clearing(point_extproj_t P)
{ // Co-factor clearing
    point_extproj_precomp_t Q;

    R1_to_R2(P, Q);                      // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)
    eccdouble(P);                        // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
    eccadd(Q, P);                        // P = P+Q using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    eccdouble(P);
    eccdouble(P);
    eccdouble(P);
    eccdouble(P);
    eccadd(Q, P);
    eccdouble(P);
    eccdouble(P);
    eccdouble(P);
}

static BOOLEAN ecc_mul(point_t P, unsigned long long* k, point_t Q)
{ // Variable-base scalar multiplication Q = k*P using a 4-dimensional decomposition
  // This function performs point validation and (if selected) cofactor clearing
    point_extproj_t R;
    point_extproj_precomp_t Table[2][8];
    unsigned long long scalars[4];
    unsigned int digits[64], sign_masks[64];

    point_setup(P, R);                                        // Convert to representation (X,Y,1,Ta,Tb)

    if (!ecc_point_validate(R))                               // Check if point lies on the curve
    {
        return FALSE;
    }

    decompose((unsigned long long*)k, scalars);               // Scalar decomposition

    cofactor_clearing(R);

    recode(scalars, digits, sign_masks);                      // Scalar recoding
    ecc_precomp(R, Table[1]);                                 // Precomputation
    for (unsigned int i = 0; i < 8; i++)
    {
        *((__m256i*)Table[0][i]->xy) = *((__m256i*)Table[1][i]->yx);
        *((__m256i*)Table[0][i]->yx) = *((__m256i*)Table[1][i]->xy);
        *((__m256i*)Table[0][i]->t2) = *((__m256i*)Table[1][i]->t2);
        *((__m256i*)Table[0][i]->z2) = *((__m256i*)Table[1][i]->z2);
        fp2neg1271(Table[0][i]->t2);
    }
    R2_to_R4(Table[1][scalars[1] + (scalars[2] << 1) + (scalars[3] << 2)], R);

    for (unsigned int i = 64; i-- > 0; )
    {
        eccdouble(R);                                         // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
        eccadd(Table[sign_masks[i]][digits[i]], R);           // P = P+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
    }
    eccnorm(R, Q);                                            // Conversion to affine coordinates (x,y) and modular correction. 

    return TRUE;
}

static void encode(point_t P, unsigned char* Pencoded)
{ // Encode point P
    unsigned long long temp1 = (P->x[1][1] & 0x4000000000000000) << 1;
    unsigned long long temp2 = (P->x[0][1] & 0x4000000000000000) << 1;

    *((__m256i*)Pencoded) = *((__m256i*)P->y);
    if (P->x[0][0] == 0 && P->x[0][1] == 0)
    {
        ((unsigned long long*)Pencoded)[3] |= temp1;
    }
    else
    {
        ((unsigned long long*)Pencoded)[3] |= temp2;
    }
}

static BOOLEAN decode(const unsigned char* Pencoded, point_t P)
{ // Decode point P
    felm_t r, t, t0, t1, t2, t3, t4;
    f2elm_t u, v;
    point_extproj_t R;
    unsigned int i;

    *((__m256i*)P->y) = *((__m256i*)Pencoded);      // Decoding y-coordinate and sign
    P->y[1][1] &= 0x7FFFFFFFFFFFFFFF;

    fp2sqr1271(P->y, u);
    fp2mul1271(u, (felm_t*)&PARAMETER_d, v);
    fp2sub1271(u, (felm_t*)&ONE, u);
    fp2add1271(v, (felm_t*)&ONE, v);

    fpsqr1271(v[0], t0);                            // t0 = v0^2
    fpsqr1271(v[1], t1);                            // t1 = v1^2
    fpadd1271(t0, t1, t0);                          // t0 = t0+t1   
    fpmul1271(u[0], v[0], t1);                      // t1 = u0*v0
    fpmul1271(u[1], v[1], t2);                      // t2 = u1*v1 
    fpadd1271(t1, t2, t1);                          // t1 = t1+t2  
    fpmul1271(u[1], v[0], t2);                      // t2 = u1*v0
    fpmul1271(u[0], v[1], t3);                      // t3 = u0*v1
    fpsub1271(t2, t3, t2);                          // t2 = t2-t3    
    fpsqr1271(t1, t3);                              // t3 = t1^2    
    fpsqr1271(t2, t4);                              // t4 = t2^2
    fpadd1271(t3, t4, t3);                          // t3 = t3+t4
    for (i = 0; i < 125; i++) fpsqr1271(t3, t3);    // t3 = t3^(2^125)

    fpadd1271(t1, t3, t);                           // t = t1+t3
    mod1271(t);
    if (t[0] == 0 && t[1] == 0)
    {
        fpsub1271(t1, t3, t);                       // t = t1-t3
    }
    fpadd1271(t, t, t);                             // t = 2*t            
    fpsqr1271(t0, t3);                              // t3 = t0^2      
    fpmul1271(t0, t3, t3);                          // t3 = t3*t0   
    fpmul1271(t, t3, t3);                           // t3 = t3*t
    fpexp1251(t3, r);                               // r = t3^(2^125-1)  
    fpmul1271(t0, r, t3);                           // t3 = t0*r          
    fpmul1271(t, t3, P->x[0]);                      // x0 = t*t3 
    fpsqr1271(P->x[0], t1);
    fpmul1271(t0, t1, t1);                          // t1 = t0*x0^2 
    fpdiv1271(P->x[0]);                             // x0 = x0/2         
    fpmul1271(t2, t3, P->x[1]);                     // x1 = t3*t2  

    fpsub1271(t, t1, t);
    mod1271(t);
    if (t[0] != 0 || t[1] != 0) // If t != t1 then swap x0 and x1
    {
        t0[0] = P->x[0][0];
        t0[1] = P->x[0][1];
        P->x[0][0] = P->x[1][0];
        P->x[0][1] = P->x[1][1];
        P->x[1][0] = t0[0];
        P->x[1][1] = t0[1];
    }

    mod1271(P->x[0]);
    if (((unsigned int)(Pencoded[31] >> 7))
        != (unsigned int)(P->x[(P->x[0][0] == 0 && P->x[0][1] == 0) ? 1 : 0][1] >> 62)) // If sign of x-coordinate decoded != input sign bit, then negate x-coordinate
    {
        fp2neg1271(P->x);
    }

    point_setup(P, R);
    if (!ecc_point_validate(R))
    {
        fpneg1271(R->x[1]);
        P->x[1][0] = R->x[1][0];
        P->x[1][1] = R->x[1][1];
        if (!ecc_point_validate(R)) // Final point validation
        {
            return FALSE;
        }
    }

    return TRUE;
}

static BOOLEAN getSubseed(const unsigned char* seed, unsigned char* subseed)
{
    unsigned char seedBytes[55];
    for (int i = 0; i < 55; i++)
    {
        if (seed[i] < 'a' || seed[i] > 'z')
        {
            return FALSE;
        }
        seedBytes[i] = seed[i] - 'a';
    }
    KangarooTwelve(seedBytes, sizeof(seedBytes), subseed, 32);

    return TRUE;
}

static void getPrivateKey(unsigned char* subseed, unsigned char* privateKey)
{
    KangarooTwelve(subseed, 32, privateKey, 32);
}

static void getPublicKey(const unsigned char* privateKey, unsigned char* publicKey)
{ // SchnorrQ public key generation
  // It produces a public key publicKey, which is the encoding of P = s*G, where G is the generator and
  // s is the output of hashing publicKey and taking the least significant 32 bytes of the result
  // Input:  32-byte privateKey
  // Output: 32-byte publicKey
    point_t P;

    ecc_mul_fixed((unsigned long long*)privateKey, P); // Compute public key                                       
    encode(P, publicKey);                              // Encode public key
}

static BOOLEAN getPublicKeyFromIdentity(const unsigned char* identity, unsigned char* publicKey)
{
    for (int i = 0; i < 32; i++)
    {
        if (identity[i << 1] < 'A' || identity[i << 1] > 'P'
            || identity[(i << 1) + 1] < 'A' || identity[(i << 1) + 1] > 'P')
        {
            return FALSE;
        }
        publicKey[i] = ((identity[i << 1] - 'A') << 4) | (identity[(i << 1) + 1] - 'A');
    }

    return TRUE;
}

static BOOLEAN getSharedKey(const unsigned char* privateKey, const unsigned char* publicKey, unsigned char* sharedKey)
{ // Secret agreement computation for key exchange using a compressed, 32-byte public key
  // The output is the y-coordinate of privateKey*A, where A is the decoding of the public key publicKey
  // Inputs: 32-byte privateKey and 32-byte publicKey
  // Output: 32-byte sharedKey
    point_t A;

    if (publicKey[15] & 0x80) // Is bit128(PublicKey) = 0?
    {
        return FALSE;
    }

    if (!decode(publicKey, A)) // Also verifies that A is on the curve, if it is not it fails
    {
        return FALSE;
    }

    if (!ecc_mul(A, (unsigned long long*)privateKey, A))
    {
        return FALSE;
    }

    if (A->x[0][0] == 0 && A->x[0][1] == 0 && A->x[1][0] == 0 && A->x[1][1] == 0
        && A->y[0][0] == 1 && A->y[0][1] == 0 && A->y[1][0] == 0 && A->y[1][1] == 0) // Is output = neutral point (0,1)?
    {
        return FALSE;
    }

    *((__m256i*)sharedKey) = *((__m256i*)A->y);

    return TRUE;
}

static void getIdentity(unsigned char* publicKey, CHAR16* identity)
{
    for (int i = 0; i < 32; i++)
    {
        identity[i << 1] = (publicKey[i] >> 4) + L'A';
        identity[(i << 1) + 1] = (publicKey[i] & 0xF) + L'A';
    }
    unsigned char identityBytesChecksum[3];
    KangarooTwelve(publicKey, 32, identityBytesChecksum, sizeof(identityBytesChecksum));
    for (int i = 0; i < sizeof(identityBytesChecksum); i++)
    {
        identity[64 + (i << 1)] = (identityBytesChecksum[i] >> 4) + L'A';
        identity[65 + (i << 1)] = (identityBytesChecksum[i] & 0xF) + L'A';
    }
    identity[70] = 0;
}

static void sign(const unsigned char* subseed, const unsigned char* publicKey, const unsigned char* messageDigest, unsigned char* signature)
{ // SchnorrQ signature generation
  // It produces the signature signature of a message messageDigest of size 32 in bytes
  // Inputs: 32-byte subseed, 32-byte publicKey, and messageDigest of size 32 in bytes
  // Output: 64-byte signature 
    point_t R;
    unsigned char k[64], r[64], h[64], temp[32 + 64];

    KangarooTwelve((unsigned char*)subseed, 32, k, 64);

    *((__m256i*)(temp + 32)) = *((__m256i*)(k + 32));
    *((__m256i*)(temp + 64)) = *((__m256i*)messageDigest);

    KangarooTwelve(temp + 32, 32 + 32, r, 64);

    ecc_mul_fixed((unsigned long long*)r, R);
    encode(R, signature); // Encode lowest 32 bytes of signature
    *((__m256i*)temp) = *((__m256i*)signature);
    *((__m256i*)(temp + 32)) = *((__m256i*)publicKey);

    KangarooTwelve(temp, 32 + 64, h, 64);
    modulo_order((unsigned long long*)r, (unsigned long long*)r);
    modulo_order((unsigned long long*)h, (unsigned long long*)h);
    Montgomery_multiply_mod_order((unsigned long long*)k, Montgomery_Rprime, (unsigned long long*)(signature + 32));
    Montgomery_multiply_mod_order((unsigned long long*)h, Montgomery_Rprime, (unsigned long long*)h);
    Montgomery_multiply_mod_order((unsigned long long*)(signature + 32), (unsigned long long*)h, (unsigned long long*)(signature + 32));
    Montgomery_multiply_mod_order((unsigned long long*)(signature + 32), ONE, (unsigned long long*)(signature + 32));
    subtract_mod_order((unsigned long long*)r, (unsigned long long*)(signature + 32), (unsigned long long*)(signature + 32));
}

static BOOLEAN verify(const unsigned char* publicKey, const unsigned char* messageDigest, const unsigned char* signature)
{ // SchnorrQ signature verification
  // It verifies the signature Signature of a message MessageDigest of size 32 in bytes
  // Inputs: 32-byte PublicKey, 64-byte Signature, and MessageDigest of size 32 in bytes
  // Output: TRUE (valid signature) or FALSE (invalid signature)
    point_t A;
    unsigned char temp[32 + 64], h[64];

    if (((publicKey[15] & 0x80) != 0) || ((signature[15] & 0x80) != 0) || (signature[63] != 0) || ((signature[62] & 0xC0) != 0))
    {  // Are bit128(PublicKey) = bit128(Signature) = 0 and Signature+32 < 2^246?
        return FALSE;
    }

    if (!decode(publicKey, A)) // Also verifies that A is on the curve, if it is not it fails
    {
        return FALSE;
    }

    *((__m256i*)temp) = *((__m256i*)signature);
    *((__m256i*)(temp + 32)) = *((__m256i*)publicKey);
    *((__m256i*)(temp + 64)) = *((__m256i*)messageDigest);

    KangarooTwelve(temp, 32 + 64, h, 64);

    if (!ecc_mul_double((unsigned long long*)(signature + 32), (unsigned long long*)h, A))
    {
        return FALSE;
    }

    encode(A, (unsigned char*)A);

    return (_mm256_movemask_epi8(_mm256_cmpeq_epi64(*((__m256i*)A), *((__m256i*)signature))) == 0xFFFFFFFF);
}



////////// Qubic \\\\\\\\\\

#define BUFFER_SIZE 1048576
#define DEJAVU_SWAP_PERIOD 60
#define EPOCH_ISSUANCE_RATE 1000000000000
#define MAX_CONNECTION_DELAY 5
#define MAX_ENERGY_AMOUNT 9223372036854775807
#define MAX_NUMBER_OF_MINERS 10000
#define MAX_NUMBER_OF_PEERS 16
#define MAX_NUMBER_OF_PROCESSORS 1024
#define MAX_NUMBER_OF_PUBLIC_PEERS 64
#define MAX_TIMESTAMP_VALUE 9223372036854775807
#define MIN_ENERGY_AMOUNT 1000000
#define MIN_NUMBER_OF_PEERS 4
#define NUMBER_OF_COMPUTORS (26 * 26)
#define NUMBER_OF_NEURONS 20000
#define PEER_RATING_PERIOD 15
#define PORT 21841
#define PROTOCOL 256
#define RESOURCE_TESTING_SOLUTION_PUBLICATION_PERIOD 60
#define VERSION_A 1
#define VERSION_B 1
#define VERSION_C 5

static __m256i ZERO;

typedef struct
{
    unsigned char publicKey[32];
    unsigned long long latestTimestamp;
    long long amount;
    unsigned int latestUpdateTick;
    volatile char lock;
    char padding[11];
} Entity;

typedef struct
{
    EFI_TCP4_PROTOCOL* tcp4Protocol;
    EFI_TCP4_LISTEN_TOKEN acceptToken;
    EFI_TCP4_CONNECTION_TOKEN connectToken;
    unsigned char address[4];
    unsigned long long connectionBeginningTick;
    EFI_HANDLE connectChildHandle;
    void* receiveBuffer;
    EFI_TCP4_RECEIVE_DATA receiveData;
    EFI_TCP4_IO_TOKEN receiveToken;
    EFI_TCP4_TRANSMIT_DATA transmitData;
    EFI_TCP4_IO_TOKEN transmitToken;
    EFI_TCP4_CLOSE_TOKEN closeToken;
    unsigned long long numberOfReceivedBytes, prevNumberOfReceivedBytes;
    unsigned long long numberOfTransmittedBytes, prevNumberOfTransmittedBytes;
    unsigned int id;
    char type;
    BOOLEAN exchangedPublicPeers;
    BOOLEAN isTransmitting;
} Peer;

typedef struct
{
    unsigned long long rating;
    unsigned char address[4];
} PublicPeer;

typedef struct
{
    unsigned int number;
    unsigned int peerId;
    unsigned long long busyness;
    EFI_EVENT event;
    Peer* peer;
    void* requestBuffer;
    void* responseBuffer;
    char responseTransmittingType;
} Processor;

typedef struct
{
    unsigned short computorIndex;
    unsigned short epoch;
    unsigned int tick;
    unsigned long long timestamp;
    unsigned char computorPublicKeys[NUMBER_OF_COMPUTORS][32];
    unsigned char signature[64];
} ComputorState;

typedef struct
{
    unsigned char sourcePublicKey[32];
    unsigned char destinationPublicKey[32];
    unsigned long long timestamp;
    unsigned long long messageSize;
} Message;

typedef struct
{
    unsigned char sourcePublicKey[32];
    unsigned char destinationEnvironment[32];
    unsigned long long timestamp;
    unsigned long long effectSize;
} Effect;

typedef struct
{
    unsigned char computorPublicKey[32];
    unsigned int score;
    unsigned int neuronLinks[NUMBER_OF_NEURONS][2];
} ResourceTestingSolution;

typedef struct
{
    unsigned char sourcePublicKey[32];
    unsigned char destinationPublicKey[32];
    unsigned long long timestamp;
    long long amount;
    unsigned char signature[64];
} Transfer;

typedef struct
{
    unsigned char digest[32];
    unsigned char status[(NUMBER_OF_COMPUTORS * 2) / 8];
    char padding[3];
    unsigned short computorIndex;
    unsigned short epoch;
    unsigned int tick;
    unsigned char signature[64];
} TransferStatus;

typedef struct
{
    unsigned char digest[32];
    unsigned char statuses[NUMBER_OF_COMPUTORS][(NUMBER_OF_COMPUTORS * 2) / 8];
    unsigned short epochs[NUMBER_OF_COMPUTORS];
    unsigned int ticks[NUMBER_OF_COMPUTORS];
    unsigned char signatures[NUMBER_OF_COMPUTORS][64];
    unsigned int mostRecentTick;
    volatile char lock;
} TransferSuperstatus;

typedef struct
{
    unsigned int size;
    unsigned short protocol;
    unsigned short type;
} RequestResponseHeader;

#define PROCESS_WEBSOCKET_CLIENT_REQUEST 0
typedef struct
{
    char type;
    unsigned long long timestamp;
} ProcessWebSocketClientRequest;

#define PROCESS_WEBSOCKET_CLIENT_REQUEST_GET_COMPUTER_STATE 1
typedef struct
{
    char type;
    unsigned long long timestamp;
} ProcessWebSocketClientRequest_GetComputerState_Request;
typedef struct
{
    char type;
    unsigned long long timestamp;
    ComputorState computorState;
} ProcessWebSocketClientRequest_GetComputerState_Response;

#define PROCESS_WEBSOCKET_CLIENT_REQUEST_GET_TRANSFER_STATUS 3
typedef struct
{
    char type;
    unsigned long long timestamp;
    unsigned char digest[32];
    unsigned short computorIndex;
} ProcessWebSocketClientRequest_GetTransferStatus_Request;
typedef struct
{
    char type;
    unsigned long long timestamp;
    TransferStatus status;
} ProcessWebSocketClientRequest_GetTransferStatus_Response;

#define PROCESS_WEBSOCKET_CLIENT_REQUEST_SHUT_NODE_DOWN (-1)
typedef struct
{
    char type;
    unsigned long long timestamp;
    unsigned char signature[64];
} ProcessWebSocketClientRequest_ShutNodeDown_Request;

#define PROCESS_WEBSOCKET_CLIENT_REQUEST_GET_NODE_INFO (-2)
typedef struct
{
    char type;
    unsigned long long timestamp;
    unsigned char signature[64];
} ProcessWebSocketClientRequest_GetNodeInfo_Request;
typedef struct
{
    char type;
    unsigned char role; // TODO: Remove
    short padding;
    unsigned char ownPublicKey[32];
    unsigned short numberOfProcessors;
    unsigned short numberOfBusyProcessors;
    unsigned long long launchTime;
    unsigned long long numberOfProcessedRequests;
    unsigned long long numberOfReceivedBytes;
    unsigned long long numberOfTransmittedBytes;
    unsigned int numberOfPeers;
} ProcessWebSocketClientRequest_GetNodeInfo_Response;

#define EXCHANGE_PUBLIC_PEERS 1
typedef struct
{
    unsigned char peers[MIN_NUMBER_OF_PEERS][4];
} ExchangePublicPeers;

#define BROADCAST_MESSAGE 2
typedef struct
{
    Message message;
} BroadcastMessage;

#define BROADCAST_TRANSFER 3
typedef struct
{
    Transfer transfer;
} BroadcastTransfer;

#define BROADCAST_EFFECT 4
typedef struct
{
    Effect effect;
} BroadcastEffect;

#define BROADCAST_COMPUTOR_STATE 5
typedef struct
{
    ComputorState computorState;
} BroadcastComputorState;

#define BROADCAST_TRANSFER_STATUS 6
typedef struct
{
    TransferStatus transferStatus;
} BroadcastTransferStatus;

#define BROADCAST_RESOURCE_TESTING_SOLUTION 7
typedef struct
{
    ResourceTestingSolution resourceTestingSolution;
} BroadcastResourceTestingSolution;

const unsigned short requestResponseMinSizes[] = {
    sizeof(RequestResponseHeader) + sizeof(ProcessWebSocketClientRequest),
    sizeof(RequestResponseHeader) + sizeof(ExchangePublicPeers),
    sizeof(RequestResponseHeader) + sizeof(BroadcastMessage) + 64,
    sizeof(RequestResponseHeader) + sizeof(BroadcastTransfer),
    sizeof(RequestResponseHeader) + sizeof(BroadcastEffect) + 64,
    sizeof(RequestResponseHeader) + sizeof(BroadcastComputorState),
    sizeof(RequestResponseHeader) + sizeof(BroadcastTransferStatus),
    sizeof(RequestResponseHeader) + sizeof(BroadcastResourceTestingSolution)
};

static volatile int state = 0;

static unsigned long long launchTime;

static unsigned char ownSubseed[32], ownPrivateKey[32], ownPublicKey[32], operatorPublicKey[32], computorPublicKey[32], adminPublicKey[32];
static unsigned long long latestOperatorTimestamp;
static unsigned long long salt;

static Entity* entities = NULL;
static TransferSuperstatus* transferSuperstatuses = NULL;

static volatile char latestComputorStatesLock = 0;
static ComputorState latestComputorStates[NUMBER_OF_COMPUTORS + 1];

static volatile unsigned long long* dejavu0 = NULL;
static volatile unsigned long long* dejavu1 = NULL;

static EFI_SIMPLE_FILE_SYSTEM_PROTOCOL* simpleFileSystemProtocol;

static EFI_MP_SERVICES_PROTOCOL* mpServicesProtocol;
static unsigned long long frequency;
static unsigned int numberOfProcessors = 0;
static volatile long long numberOfBusyProcessors = 0;
static unsigned long long numberOfBusyProcessorsSumOfValues = 0, numberOfBusyProcessorsNumberOfValues = 0;
static Processor processors[MAX_NUMBER_OF_PROCESSORS];
static unsigned int latestUsedProcessorIndex = (unsigned int)(-1);
static volatile long long numberOfProcessedRequests = 0, prevNumberOfProcessedRequests = 0;

static EFI_GUID tcp4ServiceBindingProtocolGuid = EFI_TCP4_SERVICE_BINDING_PROTOCOL_GUID;
static EFI_SERVICE_BINDING_PROTOCOL* tcp4ServiceBindingProtocol;
static EFI_GUID tcp4ProtocolGuid = EFI_TCP4_PROTOCOL_GUID;
static EFI_TCP4_PROTOCOL* tcp4Protocol;
static Peer peers[MAX_NUMBER_OF_PEERS];
static int latestPeerIndex = -1;
static unsigned int latestPeerId; // Initial value doesn't matter
static volatile long long numberOfReceivedBytes = 0, prevNumberOfReceivedBytes = 0;
static volatile long long numberOfTransmittedBytes = 0, prevNumberOfTransmittedBytes = 0;
static volatile long long numberOfDiscardedBytes = 0, prevNumberOfDiscardedBytes = 0;

static volatile char publicPeersLock = 0;
static unsigned int numberOfPublicPeers = 0;
static PublicPeer publicPeers[MAX_NUMBER_OF_PUBLIC_PEERS];
static unsigned long long totalRatingOfPublicPeers = 0;

static volatile int bestMiningScore = -1;
#if NUMBER_OF_MINING_PROCESSORS
static unsigned long long miningData[15625000];
static unsigned int bestNeuronLinks[NUMBER_OF_NEURONS][2];
static volatile char neuronNetworkLock = 0;
static EFI_EVENT minerEvents[NUMBER_OF_MINING_PROCESSORS];
static unsigned int neuronLinks[NUMBER_OF_MINING_PROCESSORS][NUMBER_OF_NEURONS][2];
static unsigned int neuronValues[NUMBER_OF_MINING_PROCESSORS][NUMBER_OF_NEURONS];
static unsigned int neuronValuesForVerification[NUMBER_OF_NEURONS];
static volatile long long numberOfMiningIterations = 0;

static unsigned int numberOfMiners = 0;
static __m256i minerPublicKeys[MAX_NUMBER_OF_MINERS];
static unsigned int minerScores[MAX_NUMBER_OF_MINERS];

struct
{
    RequestResponseHeader header;
    BroadcastResourceTestingSolution broadcastResourceTestingSolution;
} solution;
#endif

static BOOLEAN accept();
static void connect(unsigned char* address);
static void close(Peer* peer);
static void receive(Peer* peer);
static void transmit(Peer* peer, unsigned int size);
static void acceptCallback(EFI_EVENT Event, void* Context);
static void connectCallback(EFI_EVENT Event, void* Context);
static void closeCallback(EFI_EVENT Event, void* Context);
static void receiveCallback(EFI_EVENT Event, void* Context);
static void transmitCallback(EFI_EVENT Event, void* Context);

static void increaseEnergy(unsigned char* publicKey, long long amount)
{
    unsigned int index = (*((unsigned int*)publicKey)) & 0xFFFFFF;

iteration:
    while (_InterlockedCompareExchange8(&entities[index].lock, 1, 0))
    {
    }

    if (_mm256_movemask_epi8(_mm256_cmpeq_epi64(*((__m256i*)entities[index].publicKey), *((__m256i*)publicKey))) == 0xFFFFFFFF)
    {
        entities[index].amount += amount;
    }
    else
    {
        if (_mm256_movemask_epi8(_mm256_cmpeq_epi64(*((__m256i*)entities[index].publicKey), ZERO)) == 0xFFFFFFFF)
        {
            *((__m256i*)entities[index].publicKey) = *((__m256i*)publicKey);
            entities[index].amount = amount;
        }
        else
        {
            entities[index].lock = 0;

            index = (index + 1) & 0xFFFFFF;

            goto iteration;
        }
    }

    entities[index].latestUpdateTick = latestComputorStates[NUMBER_OF_COMPUTORS].tick;

    entities[index].lock = 0;
}

static BOOLEAN decreaseEnergy(unsigned char* publicKey, unsigned long long timestamp, long long amount)
{
    unsigned int index = (*((unsigned int*)publicKey)) & 0xFFFFFF;

iteration:
    while (_InterlockedCompareExchange8(&entities[index].lock, 1, 0))
    {
    }

    if (_mm256_movemask_epi8(_mm256_cmpeq_epi64(*((__m256i*)entities[index].publicKey), *((__m256i*)publicKey))) == 0xFFFFFFFF)
    {
        if (timestamp > entities[index].latestTimestamp)
        {
            if (entities[index].amount >= amount)
            {
                entities[index].latestTimestamp = timestamp;
                if (entities[index].amount < amount + MIN_ENERGY_AMOUNT)
                {
                    entities[index].amount = 0;
                }
                else
                {
                    entities[index].amount -= amount;
                }
                entities[index].latestUpdateTick = latestComputorStates[NUMBER_OF_COMPUTORS].tick;

                entities[index].lock = 0;

                return TRUE;
            }
        }
    }
    else
    {
        if (_mm256_movemask_epi8(_mm256_cmpeq_epi64(*((__m256i*)entities[index].publicKey), ZERO)) != 0xFFFFFFFF)
        {
            entities[index].lock = 0;

            index = (index + 1) & 0xFFFFFF;

            goto iteration;
        }
    }

    entities[index].lock = 0;

    return FALSE;
}

static void getTransferStatus(TransferStatus* status)
{
    unsigned short index;

    *((long long*)status->digest) ^= salt;
    KangarooTwelve(status->digest, sizeof(status->digest), (unsigned char*)&index, sizeof(index));
    *((long long*)status->digest) ^= salt;

    while (_InterlockedCompareExchange8(&transferSuperstatuses[index].lock, 1, 0))
    {
    }

    if (_mm256_movemask_epi8(_mm256_cmpeq_epi64(*((__m256i*)transferSuperstatuses[index].digest), *((__m256i*)status->digest))) == 0xFFFFFFFF)
    {
        bs->CopyMem(status->status, transferSuperstatuses[index].statuses[status->computorIndex], sizeof(status->status));
        status->epoch = transferSuperstatuses[index].epochs[status->computorIndex];
        status->tick = transferSuperstatuses[index].ticks[status->computorIndex];
        *((__m256i*)&status->signature[0]) = *((__m256i*)&transferSuperstatuses[index].signatures[status->computorIndex][0]);
        *((__m256i*)&status->signature[32]) = *((__m256i*)&transferSuperstatuses[index].signatures[status->computorIndex][32]);
    }
    else
    {
        bs->SetMem(status->status, sizeof(status->status), 0);
        status->epoch = 0;
        status->tick = 0;
        *((__m256i*)&status->signature[0]) = ZERO;
        *((__m256i*)&status->signature[32]) = ZERO;
    }
    status->padding[0] = 0;
    *((short*)&status->padding[1]) = 0;

    transferSuperstatuses[index].lock = 0;
}

static void updateTransferStatus(TransferStatus* status)
{
    unsigned short index;

    *((long long*)status->digest) ^= salt;
    KangarooTwelve(status->digest, sizeof(status->digest), (unsigned char*)&index, sizeof(index));
    *((long long*)status->digest) ^= salt;

    while (_InterlockedCompareExchange8(&transferSuperstatuses[index].lock, 1, 0))
    {
    }

    if (_mm256_movemask_epi8(_mm256_cmpeq_epi64(*((__m256i*)transferSuperstatuses[index].digest), *((__m256i*)status->digest))) == 0xFFFFFFFF)
    {
        if (status->tick > transferSuperstatuses[index].ticks[status->computorIndex])
        {
            bs->CopyMem(transferSuperstatuses[index].statuses[status->computorIndex], status->status, sizeof(status->status));
            transferSuperstatuses[index].epochs[status->computorIndex] = status->epoch;
            transferSuperstatuses[index].ticks[status->computorIndex] = status->tick;
            *((__m256i*)&transferSuperstatuses[index].signatures[status->computorIndex][0]) = *((__m256i*)&status->signature[0]);
            *((__m256i*)&transferSuperstatuses[index].signatures[status->computorIndex][32]) = *((__m256i*)&status->signature[32]);

            if (status->tick > transferSuperstatuses[index].mostRecentTick)
            {
                transferSuperstatuses[index].mostRecentTick = status->tick;
            }
        }
    }
    else
    {
        if (_mm256_movemask_epi8(_mm256_cmpeq_epi64(*((__m256i*)transferSuperstatuses[index].digest), ZERO)) == 0xFFFFFFFF)
        {
            *((__m256i*)transferSuperstatuses[index].digest) = *((__m256i*)status->digest);
            bs->CopyMem(transferSuperstatuses[index].statuses[status->computorIndex], status->status, sizeof(status->status));
            transferSuperstatuses[index].epochs[status->computorIndex] = status->epoch;
            transferSuperstatuses[index].ticks[status->computorIndex] = status->tick;
            *((__m256i*)&transferSuperstatuses[index].signatures[status->computorIndex][0]) = *((__m256i*)&status->signature[0]);
            *((__m256i*)&transferSuperstatuses[index].signatures[status->computorIndex][32]) = *((__m256i*)&status->signature[32]);
            transferSuperstatuses[index].mostRecentTick = status->tick;
        }
        else
        {
            if (status->tick > transferSuperstatuses[index].mostRecentTick)
            {
                bs->SetMem(&transferSuperstatuses[index], sizeof(TransferSuperstatus), 0);

                *((__m256i*)transferSuperstatuses[index].digest) = *((__m256i*)status->digest);
                bs->CopyMem(transferSuperstatuses[index].statuses[status->computorIndex], status->status, sizeof(status->status));
                transferSuperstatuses[index].epochs[status->computorIndex] = status->epoch;
                transferSuperstatuses[index].ticks[status->computorIndex] = status->tick;
                *((__m256i*)&transferSuperstatuses[index].signatures[status->computorIndex][0]) = *((__m256i*)&status->signature[0]);
                *((__m256i*)&transferSuperstatuses[index].signatures[status->computorIndex][32]) = *((__m256i*)&status->signature[32]);
                transferSuperstatuses[index].mostRecentTick = status->tick;
            }
        }
    }

    transferSuperstatuses[index].lock = 0;
}

static void addPublicPeer(unsigned char address[4])
{
    if ((*((int*)address)) && *((int*)address) != *((int*)ownPublicAddress))
    {
        unsigned int i;
        for (i = 0; i < numberOfPublicPeers; i++)
        {
            if (*((int*)address) == *((int*)publicPeers[i].address))
            {
                break;
            }
        }
        if (i == numberOfPublicPeers)
        {
            publicPeers[numberOfPublicPeers].rating = 1;
            *((int*)publicPeers[numberOfPublicPeers++].address) = *((int*)address);
            totalRatingOfPublicPeers++;
        }
    }
}

static void requestProcessor(void* ProcedureArgument)
{
    unsigned long long busynessBeginningTick = __rdtsc();
    _InterlockedIncrement64(&numberOfBusyProcessors);

    Processor* processor = (Processor*)ProcedureArgument;
    RequestResponseHeader* requestHeader = (RequestResponseHeader*)processor->requestBuffer;
    RequestResponseHeader* responseHeader = (RequestResponseHeader*)processor->responseBuffer;

    processor->responseTransmittingType = 0;
    responseHeader->size = 0;

    switch (requestHeader->type)
    {
    case PROCESS_WEBSOCKET_CLIENT_REQUEST:
    {
        responseHeader->type = PROCESS_WEBSOCKET_CLIENT_REQUEST;

        ProcessWebSocketClientRequest* request = (ProcessWebSocketClientRequest*)((char*)processor->requestBuffer + sizeof(RequestResponseHeader));
        if (request->type < 0)
        {
            if (request->timestamp > latestOperatorTimestamp)
            {
                switch (request->type)
                {
                case PROCESS_WEBSOCKET_CLIENT_REQUEST_SHUT_NODE_DOWN:
                {
                    ProcessWebSocketClientRequest_ShutNodeDown_Request* request = (ProcessWebSocketClientRequest_ShutNodeDown_Request*)((char*)processor->requestBuffer + sizeof(RequestResponseHeader));
                    unsigned char digest[32];
                    KangarooTwelve((unsigned char*)request, sizeof(ProcessWebSocketClientRequest_ShutNodeDown_Request) - 64, digest, 32);
                    if (verify(operatorPublicKey, digest, request->signature))
                    {
                        latestOperatorTimestamp = request->timestamp;

                        state = 1;
                    }
                }
                break;

                case PROCESS_WEBSOCKET_CLIENT_REQUEST_GET_NODE_INFO:
                {
                    ProcessWebSocketClientRequest_GetNodeInfo_Request* request = (ProcessWebSocketClientRequest_GetNodeInfo_Request*)((char*)processor->requestBuffer + sizeof(RequestResponseHeader));
                    unsigned char digest[32];
                    KangarooTwelve((unsigned char*)request, sizeof(ProcessWebSocketClientRequest_GetNodeInfo_Request) - 64, digest, 32);
                    if (verify(operatorPublicKey, digest, request->signature))
                    {
                        latestOperatorTimestamp = request->timestamp;

                        ProcessWebSocketClientRequest_GetNodeInfo_Response* response = (ProcessWebSocketClientRequest_GetNodeInfo_Response*)((char*)processor->responseBuffer + sizeof(RequestResponseHeader));

                        response->type = PROCESS_WEBSOCKET_CLIENT_REQUEST_GET_NODE_INFO;
                        response->role = 0;
                        response->padding = 0;
                        *((__m256i*)response->ownPublicKey) = *((__m256i*)ownPublicKey);
                        response->numberOfProcessors = numberOfProcessors;
                        response->numberOfBusyProcessors = (unsigned short)numberOfBusyProcessors;
                        response->launchTime = launchTime;
                        response->numberOfProcessedRequests = numberOfProcessedRequests;
                        response->numberOfReceivedBytes = numberOfReceivedBytes;
                        response->numberOfTransmittedBytes = numberOfTransmittedBytes;

                        response->numberOfPeers = MAX_NUMBER_OF_PEERS;
                        for (unsigned int i = 0; i < MAX_NUMBER_OF_PEERS; i++)
                        {
                            if (!peers[i].tcp4Protocol)
                            {
                                response->numberOfPeers--;
                            }
                            else
                            {
                                if (((unsigned long long)peers[i].tcp4Protocol) == 1)
                                {
                                    response->numberOfPeers--;
                                }
                                else
                                {
                                    if (peers[i].type < 0)
                                    {
                                        response->numberOfPeers--;
                                    }
                                }
                            }
                        }

                        responseHeader->size = sizeof(RequestResponseHeader) + sizeof(ProcessWebSocketClientRequest_GetNodeInfo_Response);
                    }
                }
                break;
                }
            }
        }
        else
        {
            switch (request->type)
            {
            case PROCESS_WEBSOCKET_CLIENT_REQUEST_GET_COMPUTER_STATE:
            {
                ProcessWebSocketClientRequest_GetComputerState_Request* request = (ProcessWebSocketClientRequest_GetComputerState_Request*)((char*)processor->requestBuffer + sizeof(RequestResponseHeader));
                ProcessWebSocketClientRequest_GetComputerState_Response* response = (ProcessWebSocketClientRequest_GetComputerState_Response*)((char*)processor->responseBuffer + sizeof(RequestResponseHeader));
                response->type = PROCESS_WEBSOCKET_CLIENT_REQUEST_GET_COMPUTER_STATE;
                response->timestamp = request->timestamp;
                bs->CopyMem(&response->computorState, &latestComputorStates[NUMBER_OF_COMPUTORS], sizeof(ComputorState));
                responseHeader->size = sizeof(RequestResponseHeader) + sizeof(ProcessWebSocketClientRequest_GetComputerState_Response);
            }
            break;

            case PROCESS_WEBSOCKET_CLIENT_REQUEST_GET_TRANSFER_STATUS:
            {
                ProcessWebSocketClientRequest_GetTransferStatus_Request* request = (ProcessWebSocketClientRequest_GetTransferStatus_Request*)((char*)processor->requestBuffer + sizeof(RequestResponseHeader));
                ProcessWebSocketClientRequest_GetTransferStatus_Response* response = (ProcessWebSocketClientRequest_GetTransferStatus_Response*)((char*)processor->responseBuffer + sizeof(RequestResponseHeader));
                response->type = PROCESS_WEBSOCKET_CLIENT_REQUEST_GET_TRANSFER_STATUS;
                response->timestamp = request->timestamp;
                *((__m256i*)response->status.digest) = *((__m256i*)request->digest);
                response->status.computorIndex = request->computorIndex;
                getTransferStatus(&response->status);
                responseHeader->size = sizeof(RequestResponseHeader) + sizeof(ProcessWebSocketClientRequest_GetTransferStatus_Response);
            }
            break;
            }
        }
    }
    break;

    case EXCHANGE_PUBLIC_PEERS:
    {
        while (_InterlockedCompareExchange8(&publicPeersLock, 1, 0))
        {
        }

        if (!processor->peer->exchangedPublicPeers)
        {
            processor->peer->exchangedPublicPeers = TRUE;

            ExchangePublicPeers* response = (ExchangePublicPeers*)(((char*)processor->responseBuffer) + sizeof(RequestResponseHeader));
            for (unsigned int i = 0; i < MIN_NUMBER_OF_PEERS; i++)
            {
                unsigned int random;
                _rdrand32_step(&random);
                *((int*)response->peers[i]) = *((int*)publicPeers[random % numberOfPublicPeers].address);
            }

            responseHeader->size = sizeof(RequestResponseHeader) + sizeof(ExchangePublicPeers) + 1 + 8 + (VERSION_A > 9 ? 2 : 1) + (VERSION_B > 9 ? 2 : 1) + (VERSION_C > 9 ? 2 : 1);
            responseHeader->type = EXCHANGE_PUBLIC_PEERS;

            char* software = ((char*)processor->responseBuffer) + (sizeof(RequestResponseHeader) + sizeof(ExchangePublicPeers));
            *software++ = 8 + (VERSION_A > 9 ? 2 : 1) + (VERSION_B > 9 ? 2 : 1) + (VERSION_C > 9 ? 2 : 1);
            *software++ = 'Q';
            *software++ = 'u';
            *software++ = 'b';
            *software++ = 'i';
            *software++ = 'c';
            *software++ = ' ';
            *software++ = (VERSION_A % 10) + '0';
            if (VERSION_A > 9)
            {
                *software++ = (VERSION_A / 10) + '0';
            }
            *software++ = '.';
            *software++ = (VERSION_B % 10) + '0';
            if (VERSION_B > 9)
            {
                *software++ = (VERSION_B / 10) + '0';
            }
            *software++ = '.';
            *software++ = (VERSION_C % 10) + '0';
            if (VERSION_C > 9)
            {
                *software = (VERSION_C / 10) + '0';
            }
        }

        ExchangePublicPeers* request = (ExchangePublicPeers*)((char*)processor->requestBuffer + sizeof(RequestResponseHeader));
        for (unsigned int i = 0; i < MIN_NUMBER_OF_PEERS && numberOfPublicPeers < MAX_NUMBER_OF_PUBLIC_PEERS; i++)
        {
            addPublicPeer(request->peers[i]);
        }

        publicPeersLock = 0;
    }
    break;

    case BROADCAST_MESSAGE:
    {
        BroadcastMessage* request = (BroadcastMessage*)((char*)processor->requestBuffer + sizeof(RequestResponseHeader));
        if (requestHeader->size == sizeof(RequestResponseHeader) + sizeof(BroadcastMessage) + request->message.messageSize + 64
            && request->message.timestamp <= MAX_TIMESTAMP_VALUE)
        {
            unsigned int saltedId;

            const long long tmp = *((long long*)requestHeader);
            *((long long*)requestHeader) = salt;
            KangarooTwelve((unsigned char*)requestHeader, ((RequestResponseHeader*)&tmp)->size, (unsigned char*)&saltedId, sizeof(saltedId));
            *((long long*)requestHeader) = tmp;

            if (!((dejavu0[saltedId >> 6] | dejavu1[saltedId >> 6]) & (((unsigned long long)1) << (saltedId & 63))))
            {
                dejavu0[saltedId >> 6] |= (((unsigned long long)1) << (saltedId & 63));

                unsigned char digest[32];
                KangarooTwelve((unsigned char*)request, requestHeader->size - sizeof(RequestResponseHeader) - 64, digest, sizeof(digest));
                if (verify(request->message.sourcePublicKey, digest, ((const unsigned char*)request + sizeof(BroadcastMessage) + request->message.messageSize)))
                {
                    if (_mm256_movemask_epi8(_mm256_cmpeq_epi64(*((__m256i*)request->message.destinationPublicKey), *((__m256i*)ownPublicKey))) == 0xFFFFFFFF)
                    {
                        //log(L"Receives a message for self.");
                    }

                    bs->CopyMem(responseHeader, requestHeader, requestHeader->size);
                    processor->responseTransmittingType = -1;
                }
            }
        }
    }
    break;

    case BROADCAST_TRANSFER:
    {
        BroadcastTransfer* request = (BroadcastTransfer*)((char*)processor->requestBuffer + sizeof(RequestResponseHeader));
        if (request->transfer.timestamp >= launchTime && request->transfer.timestamp <= MAX_TIMESTAMP_VALUE
            && request->transfer.amount >= MIN_ENERGY_AMOUNT && request->transfer.amount <= MAX_ENERGY_AMOUNT)
        {
            unsigned int saltedId;

            const long long tmp = *((long long*)requestHeader);
            *((long long*)requestHeader) = salt;
            KangarooTwelve((unsigned char*)requestHeader, ((RequestResponseHeader*)&tmp)->size, (unsigned char*)&saltedId, sizeof(saltedId));
            *((long long*)requestHeader) = tmp;

            if (!((dejavu0[saltedId >> 6] | dejavu1[saltedId >> 6]) & (((unsigned long long)1) << (saltedId & 63))))
            {
                dejavu0[saltedId >> 6] |= (((unsigned long long)1) << (saltedId & 63));

                unsigned char digest[32];
                request->transfer.sourcePublicKey[0] ^= 1;
                KangarooTwelve((unsigned char*)request, requestHeader->size - sizeof(RequestResponseHeader) - 64, digest, sizeof(digest));
                request->transfer.sourcePublicKey[0] ^= 1;
                if (verify(request->transfer.sourcePublicKey, digest, request->transfer.signature))
                {
                    bs->CopyMem(responseHeader, requestHeader, requestHeader->size);
                    processor->responseTransmittingType = -1;
                }
            }
        }
    }
    break;

    case BROADCAST_EFFECT:
    {
        BroadcastEffect* request = (BroadcastEffect*)((char*)processor->requestBuffer + sizeof(RequestResponseHeader));
        if (requestHeader->size == sizeof(RequestResponseHeader) + sizeof(BroadcastEffect) + request->effect.effectSize + 64
            && request->effect.timestamp <= MAX_TIMESTAMP_VALUE)
        {
            unsigned int saltedId;

            const long long tmp = *((long long*)requestHeader);
            *((long long*)requestHeader) = salt;
            KangarooTwelve((unsigned char*)requestHeader, ((RequestResponseHeader*)&tmp)->size, (unsigned char*)&saltedId, sizeof(saltedId));
            *((long long*)requestHeader) = tmp;

            if (!((dejavu0[saltedId >> 6] | dejavu1[saltedId >> 6]) & (((unsigned long long)1) << (saltedId & 63))))
            {
                dejavu0[saltedId >> 6] |= (((unsigned long long)1) << (saltedId & 63));

                unsigned char digest[32];
                request->effect.sourcePublicKey[0] ^= 2;
                KangarooTwelve((unsigned char*)request, requestHeader->size - sizeof(RequestResponseHeader) - 64, digest, sizeof(digest));
                request->effect.sourcePublicKey[0] ^= 2;
                if (verify(request->effect.sourcePublicKey, digest, ((const unsigned char*)request + sizeof(BroadcastEffect) + request->effect.effectSize)))
                {
                    bs->CopyMem(responseHeader, requestHeader, requestHeader->size);
                    processor->responseTransmittingType = -1;
                }
            }
        }
    }
    break;

    case BROADCAST_COMPUTOR_STATE:
    {
        BroadcastComputorState* request = (BroadcastComputorState*)((char*)processor->requestBuffer + sizeof(RequestResponseHeader));
        if (request->computorState.timestamp <= MAX_TIMESTAMP_VALUE)
        {
            while (_InterlockedCompareExchange8(&latestComputorStatesLock, 1, 0))
            {
            }

            if (request->computorState.computorIndex < NUMBER_OF_COMPUTORS)
            {
                if (request->computorState.timestamp > latestComputorStates[request->computorState.computorIndex].timestamp && latestComputorStates[NUMBER_OF_COMPUTORS].timestamp)
                {
                    unsigned char digest[32];
                    KangarooTwelve((unsigned char*)request, requestHeader->size - sizeof(RequestResponseHeader) - 64, digest, sizeof(digest));
                    if (verify(latestComputorStates[NUMBER_OF_COMPUTORS].computorPublicKeys[request->computorState.computorIndex], digest, request->computorState.signature))
                    {
                        bs->CopyMem(&latestComputorStates[request->computorState.computorIndex], request, sizeof(BroadcastComputorState));

                        bs->CopyMem(responseHeader, requestHeader, requestHeader->size);
                        processor->responseTransmittingType = -1;
                    }
                }
            }
            else
            {
                if (request->computorState.timestamp > latestComputorStates[NUMBER_OF_COMPUTORS].timestamp)
                {
                    unsigned char digest[32];
                    KangarooTwelve((unsigned char*)request, requestHeader->size - sizeof(RequestResponseHeader) - 64, digest, sizeof(digest));
                    if (verify(adminPublicKey, digest, request->computorState.signature))
                    {
                        bs->CopyMem(&latestComputorStates[NUMBER_OF_COMPUTORS], &request->computorState, sizeof(ComputorState));

                        bs->CopyMem(responseHeader, requestHeader, requestHeader->size);
                        processor->responseTransmittingType = -1;
                    }
                }
            }
        }

        latestComputorStatesLock = 0;
    }
    break;

    case BROADCAST_TRANSFER_STATUS:
    {
        BroadcastTransferStatus* request = (BroadcastTransferStatus*)((char*)processor->requestBuffer + sizeof(RequestResponseHeader));

        unsigned int saltedId;

        const long long tmp = *((long long*)requestHeader);
        *((long long*)requestHeader) = salt;
        KangarooTwelve((unsigned char*)requestHeader, ((RequestResponseHeader*)&tmp)->size, (unsigned char*)&saltedId, sizeof(saltedId));
        *((long long*)requestHeader) = tmp;

        if (!((dejavu0[saltedId >> 6] | dejavu1[saltedId >> 6]) & (((unsigned long long)1) << (saltedId & 63))))
        {
            dejavu0[saltedId >> 6] |= (((unsigned long long)1) << (saltedId & 63));

            if (_mm256_movemask_epi8(_mm256_cmpeq_epi64(*((__m256i*)request->transferStatus.digest), ZERO)) != 0xFFFFFFFF
                && !request->transferStatus.padding[0] && !(*((short*)&request->transferStatus.padding[1]))
                && request->transferStatus.computorIndex < NUMBER_OF_COMPUTORS)
            {
                unsigned int i;
                for (i = 0; i < sizeof(request->transferStatus.status); i++)
                {
                    if ((request->transferStatus.status[i] & 3) == 3 || (request->transferStatus.status[i] & (3 << 2)) == (3 << 2) || (request->transferStatus.status[i] & (3 << 4)) == (3 << 4) || (request->transferStatus.status[i] & (3 << 6)) == (3 << 6))
                    {
                        break;
                    }
                }
                if (i == sizeof(request->transferStatus.status))
                {
                    if (latestComputorStates[NUMBER_OF_COMPUTORS].timestamp && request->transferStatus.epoch == latestComputorStates[NUMBER_OF_COMPUTORS].epoch)
                    {
                        unsigned char digest[32];
                        request->transferStatus.digest[0] ^= 3;
                        KangarooTwelve((unsigned char*)request, requestHeader->size - sizeof(RequestResponseHeader) - 64, digest, sizeof(digest));
                        request->transferStatus.digest[0] ^= 3;
                        if (verify(latestComputorStates[NUMBER_OF_COMPUTORS].computorPublicKeys[request->transferStatus.computorIndex], digest, request->transferStatus.signature))
                        {
                            updateTransferStatus(&request->transferStatus);

                            bs->CopyMem(responseHeader, requestHeader, requestHeader->size);
                            processor->responseTransmittingType = -1;
                        }
                    }
                    else
                    {
                        bs->CopyMem(responseHeader, requestHeader, requestHeader->size);
                        processor->responseTransmittingType = -1;
                    }
                }
            }
        }
    }
    break;

    case BROADCAST_RESOURCE_TESTING_SOLUTION:
    {
        BroadcastResourceTestingSolution* request = (BroadcastResourceTestingSolution*)((char*)processor->requestBuffer + sizeof(RequestResponseHeader));

        unsigned int saltedId;

        const long long tmp = *((long long*)requestHeader);
        *((long long*)requestHeader) = salt;
        KangarooTwelve((unsigned char*)requestHeader, ((RequestResponseHeader*)&tmp)->size, (unsigned char*)&saltedId, sizeof(saltedId));
        *((long long*)requestHeader) = tmp;

        if (!((dejavu0[saltedId >> 6] | dejavu1[saltedId >> 6]) & (((unsigned long long)1) << (saltedId & 63))))
        {
            dejavu0[saltedId >> 6] |= (((unsigned long long)1) << (saltedId & 63));

            bs->CopyMem(responseHeader, requestHeader, requestHeader->size);
            processor->responseTransmittingType = -1;
        }
    }
    break;
    }

    _InterlockedIncrement64(&numberOfProcessedRequests);
    _InterlockedDecrement64(&numberOfBusyProcessors);
    processor->busyness += (__rdtsc() - busynessBeginningTick);
}

static void responseCallback(EFI_EVENT Event, void* Context)
{
    bs->CloseEvent(Event);

    Processor* processor = (Processor*)Context;
    RequestResponseHeader* responseHeader = (RequestResponseHeader*)processor->responseBuffer;
    if (responseHeader->size)
    {
        responseHeader->protocol = PROTOCOL;

#if NUMBER_OF_MINING_PROCESSORS
        if (responseHeader->type == BROADCAST_RESOURCE_TESTING_SOLUTION)
        {
            BroadcastResourceTestingSolution* broadcastResourceTestingSolution = (BroadcastResourceTestingSolution*)(((char*)processor->responseBuffer) + sizeof(RequestResponseHeader));

            if (_mm256_movemask_epi8(_mm256_cmpeq_epi64(*((__m256i*)broadcastResourceTestingSolution->resourceTestingSolution.computorPublicKey), *((__m256i*)computorPublicKey))) == 0xFFFFFFFF
                && broadcastResourceTestingSolution->resourceTestingSolution.score > bestMiningScore)
            {
                bs->SetMem(neuronValuesForVerification, NUMBER_OF_NEURONS * sizeof(unsigned int), 0xFF);

                int outputLength = 0;
                while (outputLength < (sizeof(miningData) << 3))
                {
                    const unsigned int prevValue0 = neuronValuesForVerification[NUMBER_OF_NEURONS - 1];
                    const unsigned int prevValue1 = neuronValuesForVerification[NUMBER_OF_NEURONS - 2];

                    for (unsigned int i = 0; i < NUMBER_OF_NEURONS; i++)
                    {
                        neuronValuesForVerification[i] = ~(neuronValuesForVerification[broadcastResourceTestingSolution->resourceTestingSolution.neuronLinks[i][0] % NUMBER_OF_NEURONS] & neuronValuesForVerification[broadcastResourceTestingSolution->resourceTestingSolution.neuronLinks[i][1] % NUMBER_OF_NEURONS]);
                    }

                    if (neuronValuesForVerification[NUMBER_OF_NEURONS - 1] != prevValue0
                        && neuronValuesForVerification[NUMBER_OF_NEURONS - 2] == prevValue1)
                    {
                        if ((miningData[outputLength >> 6] >> (outputLength & 63)) & 1)
                        {
                            break;
                        }

                        outputLength++;
                    }
                    else
                    {
                        if (neuronValuesForVerification[NUMBER_OF_NEURONS - 2] != prevValue1
                            && neuronValuesForVerification[NUMBER_OF_NEURONS - 1] == prevValue0)
                        {
                            if (!((miningData[outputLength >> 6] >> (outputLength & 63)) & 1))
                            {
                                break;
                            }

                            outputLength++;
                        }
                    }
                }

                if (outputLength == broadcastResourceTestingSolution->resourceTestingSolution.score && outputLength > bestMiningScore)
                {
                    while (_InterlockedCompareExchange8(&neuronNetworkLock, 1, 0))
                    {
                    }
                    bestMiningScore = broadcastResourceTestingSolution->resourceTestingSolution.score;
                    bs->CopyMem(bestNeuronLinks, broadcastResourceTestingSolution->resourceTestingSolution.neuronLinks, sizeof(bestNeuronLinks));
                    neuronNetworkLock = 0;
                }
            }

            if (broadcastResourceTestingSolution->resourceTestingSolution.score >= 100)
            {
                unsigned int i;
                for (i = 0; i < numberOfMiners; i++)
                {
                    if (_mm256_movemask_epi8(_mm256_cmpeq_epi64(*((__m256i*)broadcastResourceTestingSolution->resourceTestingSolution.computorPublicKey), minerPublicKeys[i])) == 0xFFFFFFFF)
                    {
                        break;
                    }
                }
                if (i < MAX_NUMBER_OF_MINERS)
                {
                    if (i == numberOfMiners)
                    {
                        minerPublicKeys[numberOfMiners++] = *((__m256i*)broadcastResourceTestingSolution->resourceTestingSolution.computorPublicKey);
                    }
                    if (broadcastResourceTestingSolution->resourceTestingSolution.score > minerScores[i])
                    {
                        minerScores[i] = broadcastResourceTestingSolution->resourceTestingSolution.score;

                        CHAR16 message[256];
                        getIdentity(broadcastResourceTestingSolution->resourceTestingSolution.computorPublicKey, message);
                        appendText(message, L" - ");
                        appendNumber(message, broadcastResourceTestingSolution->resourceTestingSolution.score, TRUE);
                        appendText(message, L".");
                        log(message);
                    }
                }
            }
        }
#endif

        const EFI_TPL tpl = bs->RaiseTPL(TPL_NOTIFY);

        if (processor->responseTransmittingType)
        {
            for (unsigned int i = 0; i < MAX_NUMBER_OF_PEERS; i++)
            {
                if (((unsigned long long)peers[i].tcp4Protocol) > 1 && peers[i].type > 0
                    && (processor->responseTransmittingType > 0 || &peers[i] != processor->peer))
                {
                    if (peers[i].isTransmitting)
                    {
                        numberOfDiscardedBytes += responseHeader->size;
                    }
                    else
                    {
                        bs->CopyMem(peers[i].transmitData.FragmentTable[0].FragmentBuffer, processor->responseBuffer, responseHeader->size);
                        transmit(&peers[i], responseHeader->size);
                    }
                }
            }
        }
        else
        {
            if (processor->peerId == processor->peer->id && ((unsigned long long)processor->peer->tcp4Protocol) > 1)
            {
                if (processor->peer->isTransmitting)
                {
                    numberOfDiscardedBytes += responseHeader->size;
                }
                else
                {
                    void* tmp = processor->responseBuffer;
                    processor->responseBuffer = processor->peer->transmitData.FragmentTable[0].FragmentBuffer;
                    processor->peer->transmitData.FragmentTable[0].FragmentBuffer = tmp;
                    transmit(processor->peer, responseHeader->size);
                }
            }
        }

        bs->RestoreTPL(tpl);
    }

    processor->peer = NULL;
}

#if NUMBER_OF_MINING_PROCESSORS
static void minerProcessor(void* ProcedureArgument)
{
    _InterlockedIncrement64(&numberOfBusyProcessors);

    while (_InterlockedCompareExchange8(&neuronNetworkLock, 1, 0))
    {
    }
    bs->CopyMem(neuronLinks[(unsigned int)ProcedureArgument], bestNeuronLinks, sizeof(bestNeuronLinks));
    neuronNetworkLock = 0;

    int miningScore = -1;
    while (!state)
    {
        for (unsigned int iteration = 0; iteration < 1000; iteration++)
        {
            unsigned int changedNeuronIndex;
            _rdrand32_step(&changedNeuronIndex);
            changedNeuronIndex %= NUMBER_OF_NEURONS;
            unsigned int changedInputIndex;
            _rdrand32_step(&changedInputIndex);
            changedInputIndex &= 1;
            unsigned int prevNeuronLink = neuronLinks[(unsigned int)ProcedureArgument][changedNeuronIndex][changedInputIndex];
            if (miningScore >= 0)
            {
                _rdrand32_step(&neuronLinks[(unsigned int)ProcedureArgument][changedNeuronIndex][changedInputIndex]);
                neuronLinks[(unsigned int)ProcedureArgument][changedNeuronIndex][changedInputIndex] %= NUMBER_OF_NEURONS;
            }

            bs->SetMem(neuronValues[(unsigned int)ProcedureArgument], NUMBER_OF_NEURONS * sizeof(unsigned int), 0xFF);

            int outputLength = 0;
            while (outputLength < (sizeof(miningData) << 3))
            {
                const unsigned int prevValue0 = neuronValues[(unsigned int)ProcedureArgument][NUMBER_OF_NEURONS - 1];
                const unsigned int prevValue1 = neuronValues[(unsigned int)ProcedureArgument][NUMBER_OF_NEURONS - 2];

                for (unsigned int i = 0; i < NUMBER_OF_NEURONS; i++)
                {
                    neuronValues[(unsigned int)ProcedureArgument][i] = ~(neuronValues[(unsigned int)ProcedureArgument][neuronLinks[(unsigned int)ProcedureArgument][i][0]] & neuronValues[(unsigned int)ProcedureArgument][neuronLinks[(unsigned int)ProcedureArgument][i][1]]);
                }

                if (neuronValues[(unsigned int)ProcedureArgument][NUMBER_OF_NEURONS - 1] != prevValue0
                    && neuronValues[(unsigned int)ProcedureArgument][NUMBER_OF_NEURONS - 2] == prevValue1)
                {
                    if ((miningData[outputLength >> 6] >> (outputLength & 63)) & 1)
                    {
                        break;
                    }

                    outputLength++;
                }
                else
                {
                    if (neuronValues[(unsigned int)ProcedureArgument][NUMBER_OF_NEURONS - 2] != prevValue1
                        && neuronValues[(unsigned int)ProcedureArgument][NUMBER_OF_NEURONS - 1] == prevValue0)
                    {
                        if (!((miningData[outputLength >> 6] >> (outputLength & 63)) & 1))
                        {
                            break;
                        }

                        outputLength++;
                    }
                }
            }

            if (outputLength < miningScore)
            {
                neuronLinks[(unsigned int)ProcedureArgument][changedNeuronIndex][changedInputIndex] = prevNeuronLink;
            }
            else
            {
                miningScore = outputLength;
            }

            _InterlockedIncrement64(&numberOfMiningIterations);
        }

        if (miningScore > bestMiningScore)
        {
            while (_InterlockedCompareExchange8(&neuronNetworkLock, 1, 0))
            {
            }
            bestMiningScore = miningScore;
            bs->CopyMem(bestNeuronLinks, neuronLinks[(unsigned int)ProcedureArgument], sizeof(bestNeuronLinks));
            neuronNetworkLock = 0;
        }
    }

    _InterlockedDecrement64(&numberOfBusyProcessors);
}

static void minerShutdownCallback(EFI_EVENT Event, void* Context)
{
    bs->CloseEvent(Event);
}
#endif

static EFI_HANDLE getTcp4Protocol(const unsigned char* remoteAddress, EFI_TCP4_PROTOCOL** tcp4Protocol)
{
    EFI_STATUS status;
    EFI_HANDLE childHandle = NULL;
    if (status = tcp4ServiceBindingProtocol->CreateChild(tcp4ServiceBindingProtocol, &childHandle))
    {
        logStatus(L"EFI_TCP4_SERVICE_BINDING_PROTOCOL.CreateChild() fails", status);

        return NULL;
    }
    else
    {
        if (status = bs->OpenProtocol(childHandle, &tcp4ProtocolGuid, (void**)tcp4Protocol, ih, NULL, EFI_OPEN_PROTOCOL_GET_PROTOCOL))
        {
            logStatus(L"EFI_BOOT_SERVICES.OpenProtocol() fails", status);

            return NULL;
        }
        else
        {
            EFI_TCP4_CONFIG_DATA configData;
            bs->SetMem(&configData, sizeof(configData), 0);
            configData.TimeToLive = 64;
            if (!*((int*)ownAddress))
            {
                configData.AccessPoint.UseDefaultAddress = TRUE;
            }
            else
            {
                *((int*)configData.AccessPoint.StationAddress.Addr) = *((int*)ownAddress);
                *((int*)configData.AccessPoint.SubnetMask.Addr) = *((int*)ownMask);
            }
            if (!remoteAddress)
            {
                configData.AccessPoint.StationPort = PORT;
            }
            else
            {
                *((int*)configData.AccessPoint.RemoteAddress.Addr) = *((int*)remoteAddress);
                configData.AccessPoint.RemotePort = PORT;
                configData.AccessPoint.ActiveFlag = TRUE;
            }
            EFI_TCP4_OPTION option;
            bs->SetMem(&option, sizeof(option), 0);
            option.ReceiveBufferSize = BUFFER_SIZE * 2;
            option.SendBufferSize = BUFFER_SIZE * 2;
            option.EnableWindowScaling = TRUE;
            configData.ControlOption = &option;

            EFI_STATUS status;
            if ((status = (*tcp4Protocol)->Configure(*tcp4Protocol, &configData))
                && status != EFI_NO_MAPPING)
            {
                logStatus(L"EFI_TCP4_PROTOCOL.Configure() fails", status);

                return NULL;
            }
            else
            {
                EFI_IP4_MODE_DATA modeData;

                if (status == EFI_NO_MAPPING)
                {
                    while (!(status = (*tcp4Protocol)->GetModeData(*tcp4Protocol, NULL, NULL, &modeData, NULL, NULL))
                        && !modeData.IsConfigured)
                    {
                    }
                    if (!status)
                    {
                        if (status = (*tcp4Protocol)->Configure(*tcp4Protocol, &configData))
                        {
                            logStatus(L"EFI_TCP4_PROTOCOL.Configure() fails", status);

                            return NULL;
                        }
                    }
                }

                if (*((int*)defaultRouteGateway))
                {
                    if (status = (*tcp4Protocol)->Routes(*tcp4Protocol, FALSE, (EFI_IPv4_ADDRESS*)&defaultRouteAddress, (EFI_IPv4_ADDRESS*)&defaultRouteMask, (EFI_IPv4_ADDRESS*)&defaultRouteGateway))
                    {
                        logStatus(L"EFI_TCP4_PROTOCOL.Routes() fails", status);

                        return NULL;
                    }
                }

                if (status = (*tcp4Protocol)->GetModeData(*tcp4Protocol, NULL, &configData, &modeData, NULL, NULL))
                {
                    logStatus(L"EFI_TCP4_PROTOCOL.GetModeData() fails", status);

                    return NULL;
                }
                else
                {
                    if (!modeData.IsStarted || !modeData.IsConfigured)
                    {
                        log(L"EFI_TCP4_PROTOCOL is not configured!");

                        return NULL;
                    }
                    else
                    {
                        if (!remoteAddress)
                        {
                            CHAR16 message[256];

                            setText(message, L"Local address = ");
                            appendIPv4Address(message, configData.AccessPoint.StationAddress);
                            appendText(message, L":");
                            appendNumber(message, configData.AccessPoint.StationPort, FALSE);
                            appendText(message, L".");
                            log(message);

                            log(L"Routes:");
                            for (unsigned int i = 0; i < modeData.RouteCount; i++)
                            {
                                setText(message, L"Address = ");
                                appendIPv4Address(message, modeData.RouteTable[i].SubnetAddress);
                                appendText(message, L" | mask = ");
                                appendIPv4Address(message, modeData.RouteTable[i].SubnetMask);
                                appendText(message, L" | gateway = ");
                                appendIPv4Address(message, modeData.RouteTable[i].GatewayAddress);
                                appendText(message, L".");
                                log(message);
                            }
                        }

                        return childHandle;
                    }
                }
            }
        }
    }
}

static BOOLEAN accept()
{
    const EFI_TPL tpl = bs->RaiseTPL(TPL_NOTIFY);

    unsigned int i;
    for (i = 0; i < MAX_NUMBER_OF_PEERS; i++)
    {
        latestPeerIndex = (latestPeerIndex + 1) % MAX_NUMBER_OF_PEERS;
        if (!peers[latestPeerIndex].tcp4Protocol)
        {
            break;
        }
    }
    if (i != MAX_NUMBER_OF_PEERS)
    {
        peers[latestPeerIndex].tcp4Protocol = (EFI_TCP4_PROTOCOL*)1;
        *((int*)peers[latestPeerIndex].address) = 0;
        peers[latestPeerIndex].connectionBeginningTick = __rdtsc();
        peers[latestPeerIndex].acceptToken.NewChildHandle = NULL;
        peers[latestPeerIndex].prevNumberOfReceivedBytes = peers[latestPeerIndex].numberOfReceivedBytes = 0;
        peers[latestPeerIndex].prevNumberOfTransmittedBytes = peers[latestPeerIndex].numberOfTransmittedBytes = 0;
        bs->CreateEvent(EVT_NOTIFY_SIGNAL, TPL_CALLBACK, acceptCallback, &peers[latestPeerIndex], &peers[latestPeerIndex].acceptToken.CompletionToken.Event);
        EFI_STATUS status;
        if (status = tcp4Protocol->Accept(tcp4Protocol, &peers[latestPeerIndex].acceptToken))
        {
            logStatus(L"EFI_TCP4_PROTOCOL.Accept() fails", status);

            bs->CloseEvent(peers[latestPeerIndex].acceptToken.CompletionToken.Event);
            peers[latestPeerIndex].tcp4Protocol = NULL;
        }
        else
        {
            bs->RestoreTPL(tpl);

            return TRUE;
        }
    }

    bs->RestoreTPL(tpl);

    return FALSE;
}

static void connect(unsigned char* address)
{
    const EFI_TPL tpl = bs->RaiseTPL(TPL_NOTIFY);

    int freePeerSlot = -1;
    unsigned int i;
    for (i = 0; i < MAX_NUMBER_OF_PEERS; i++)
    {
        if (freePeerSlot < 0)
        {
            latestPeerIndex = (latestPeerIndex + 1) % MAX_NUMBER_OF_PEERS;
            if (!peers[latestPeerIndex].tcp4Protocol)
            {
                freePeerSlot = latestPeerIndex;
            }
        }

        if (((unsigned long long)peers[i].tcp4Protocol) > 1 && *((int*)peers[i].address) == *((int*)address))
        {
            break;
        }
    }
    if (freePeerSlot >= 0 && i == MAX_NUMBER_OF_PEERS)
    {
        EFI_TCP4_PROTOCOL* tcp4Protocol;
        EFI_HANDLE childHandle = getTcp4Protocol(address, &tcp4Protocol);
        if (childHandle)
        {
            peers[freePeerSlot].tcp4Protocol = tcp4Protocol;
            peers[freePeerSlot].acceptToken.NewChildHandle = NULL;
            *((int*)peers[freePeerSlot].address) = *((int*)address);
            peers[freePeerSlot].connectionBeginningTick = __rdtsc();
            peers[freePeerSlot].connectChildHandle = childHandle;
            peers[freePeerSlot].prevNumberOfReceivedBytes = peers[freePeerSlot].numberOfReceivedBytes = 0;
            peers[freePeerSlot].prevNumberOfTransmittedBytes = peers[freePeerSlot].numberOfTransmittedBytes = 0;
            bs->CreateEvent(EVT_NOTIFY_SIGNAL, TPL_CALLBACK, connectCallback, &peers[freePeerSlot], &peers[freePeerSlot].connectToken.CompletionToken.Event);
            EFI_STATUS status;
            if (status = peers[freePeerSlot].tcp4Protocol->Connect(peers[freePeerSlot].tcp4Protocol, &peers[freePeerSlot].connectToken))
            {
                logStatus(L"EFI_TCP4_PROTOCOL.Connect() fails", status);

                bs->CloseEvent(peers[freePeerSlot].connectToken.CompletionToken.Event);
                bs->CloseProtocol(peers[freePeerSlot].connectChildHandle, &tcp4ProtocolGuid, ih, NULL);
                tcp4ServiceBindingProtocol->DestroyChild(tcp4ServiceBindingProtocol, peers[freePeerSlot].connectChildHandle);
                peers[freePeerSlot].tcp4Protocol = NULL;
            }
        }
    }

    bs->RestoreTPL(tpl);
}

static void close(Peer* peer)
{
    const EFI_TPL tpl = bs->RaiseTPL(TPL_NOTIFY);

    if (((unsigned long long)peer->tcp4Protocol) > 1)
    {
        bs->CreateEvent(EVT_NOTIFY_SIGNAL, TPL_CALLBACK, closeCallback, peer, &peer->closeToken.CompletionToken.Event);
        EFI_STATUS status;
        if (status = peer->tcp4Protocol->Close(peer->tcp4Protocol, &peer->closeToken))
        {
            logStatus(L"EFI_TCP4_PROTOCOL.Close() fails", status);

            bs->CloseEvent(peer->closeToken.CompletionToken.Event);
            if (peer->acceptToken.NewChildHandle)
            {
                bs->CloseProtocol(peer->acceptToken.NewChildHandle, &tcp4ProtocolGuid, ih, NULL);
            }
            else
            {
                bs->CloseProtocol(peer->connectChildHandle, &tcp4ProtocolGuid, ih, NULL);
                tcp4ServiceBindingProtocol->DestroyChild(tcp4ServiceBindingProtocol, peer->connectChildHandle);
            }
            peer->tcp4Protocol = NULL;
        }
    }

    bs->RestoreTPL(tpl);
}

static void receive(Peer* peer)
{
    const EFI_TPL tpl = bs->RaiseTPL(TPL_NOTIFY);

    if (((unsigned long long)peer->tcp4Protocol) > 1)
    {
        if (((unsigned long long)peer->receiveData.FragmentTable[0].FragmentBuffer - (unsigned long long)peer->receiveBuffer) >= BUFFER_SIZE)
        {
            close(peer);
            log(L"A peer sending too many requests is disconnected.");
        }
        else
        {
            EFI_STATUS status;
            bs->CreateEvent(EVT_NOTIFY_SIGNAL, TPL_CALLBACK, receiveCallback, peer, &peer->receiveToken.CompletionToken.Event);
            peer->receiveData.DataLength = peer->receiveData.FragmentTable[0].FragmentLength = BUFFER_SIZE - (unsigned int)((unsigned long long)peer->receiveData.FragmentTable[0].FragmentBuffer - (unsigned long long)peer->receiveBuffer);
            if (status = peer->tcp4Protocol->Receive(peer->tcp4Protocol, &peer->receiveToken))
            {
                if (status != EFI_ACCESS_DENIED)
                {
                    logStatus(L"EFI_TCP4_PROTOCOL.Receive() fails", status);
                }

                bs->CloseEvent(peer->receiveToken.CompletionToken.Event);

                close(peer);
            }
        }
    }
    else
    {
        close(peer);
    }

    bs->RestoreTPL(tpl);
}

static void transmit(Peer* peer, unsigned int size)
{
    const EFI_TPL tpl = bs->RaiseTPL(TPL_NOTIFY);

    peer->isTransmitting = TRUE;

    if (((unsigned long long)peer->tcp4Protocol) > 1)
    {
        EFI_STATUS status;
        bs->CreateEvent(EVT_NOTIFY_SIGNAL, TPL_CALLBACK, transmitCallback, peer, &peer->transmitToken.CompletionToken.Event);

        if (peer->type < 0)
        {
            if (size <= 125)
            {
                bs->CopyMem(((char*)peer->transmitData.FragmentTable[0].FragmentBuffer) + 2, peer->transmitData.FragmentTable[0].FragmentBuffer, size);
                ((unsigned char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[1] = size;
                size += 2;
            }
            else
            {
                if (size < 0x10000)
                {
                    bs->CopyMem(((char*)peer->transmitData.FragmentTable[0].FragmentBuffer) + 4, peer->transmitData.FragmentTable[0].FragmentBuffer, size);
                    ((unsigned char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[1] = 126;
                    ((unsigned char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[2] = size >> 8;
                    ((unsigned char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[3] = size;
                    size += 4;
                }
                else
                {
                    bs->CopyMem(((char*)peer->transmitData.FragmentTable[0].FragmentBuffer) + 10, peer->transmitData.FragmentTable[0].FragmentBuffer, size);
                    ((unsigned char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[1] = 127;
                    ((unsigned int*)peer->transmitData.FragmentTable[0].FragmentBuffer)[2] = 0;
                    ((unsigned char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[6] = size >> 24;
                    ((unsigned char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[7] = size >> 16;
                    ((unsigned char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[8] = size >> 8;
                    ((unsigned char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[9] = size;
                    size += 10;
                }
            }
            ((unsigned char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[0] = 0x82;
        }

        peer->transmitData.DataLength = peer->transmitData.FragmentTable[0].FragmentLength = size;
        if (status = peer->tcp4Protocol->Transmit(peer->tcp4Protocol, &peer->transmitToken))
        {
            if (status != EFI_ACCESS_DENIED)
            {
                logStatus(L"EFI_TCP4_PROTOCOL.Transmit() fails", status);
            }

            bs->CloseEvent(peer->transmitToken.CompletionToken.Event);

            close(peer);
        }
    }
    else
    {
        close(peer);
    }

    bs->RestoreTPL(tpl);
}

static void acceptCallback(EFI_EVENT Event, void* Context)
{
    const EFI_TPL tpl = bs->RaiseTPL(TPL_NOTIFY);

    bs->CloseEvent(Event);

    Peer* peer = (Peer*)Context;
    if (peer->acceptToken.CompletionToken.Status)
    {
        peer->tcp4Protocol = NULL;
    }
    else
    {
        EFI_STATUS status;
        if (status = bs->OpenProtocol(peer->acceptToken.NewChildHandle, &tcp4ProtocolGuid, (void**)&peer->tcp4Protocol, ih, NULL, EFI_OPEN_PROTOCOL_GET_PROTOCOL))
        {
            logStatus(L"EFI_BOOT_SERVICES.OpenProtocol() fails", status);

            peer->tcp4Protocol = NULL;
        }
        else
        {
            peer->id = ++latestPeerId;
            peer->receiveData.FragmentTable[0].FragmentBuffer = peer->receiveBuffer;
            peer->type = 0;
            peer->exchangedPublicPeers = FALSE;
            peer->isTransmitting = FALSE;
            receive(peer);
        }
    }

    accept();

    bs->RestoreTPL(tpl);
}

static void connectCallback(EFI_EVENT Event, void* Context)
{
    const EFI_TPL tpl = bs->RaiseTPL(TPL_NOTIFY);

    bs->CloseEvent(Event);

    Peer* peer = (Peer*)Context;
    if (peer->connectToken.CompletionToken.Status)
    {
        close(peer);
    }
    else
    {
        peer->id = ++latestPeerId;
        peer->type = 0;
        peer->exchangedPublicPeers = TRUE;

        ExchangePublicPeers* request = (ExchangePublicPeers*)((char*)peer->transmitData.FragmentTable[0].FragmentBuffer + sizeof(RequestResponseHeader));
        unsigned int i;
        if (*((int*)ownPublicAddress))
        {
            *((int*)request->peers[0]) = *((int*)ownPublicAddress);
            i = 1;
        }
        else
        {
            i = 0;
        }
        while (_InterlockedCompareExchange8(&publicPeersLock, 1, 0))
        {
        }
        for (; i < MIN_NUMBER_OF_PEERS; i++)
        {
            unsigned int random;
            _rdrand32_step(&random);
            *((int*)request->peers[i]) = *((int*)publicPeers[random % numberOfPublicPeers].address);
        }
        publicPeersLock = 0;

        RequestResponseHeader* requestHeader = (RequestResponseHeader*)peer->transmitData.FragmentTable[0].FragmentBuffer;
        requestHeader->size = sizeof(RequestResponseHeader) + sizeof(ExchangePublicPeers) + 1 + 8 + (VERSION_A > 9 ? 2 : 1) + (VERSION_B > 9 ? 2 : 1) + (VERSION_C > 9 ? 2 : 1);
        requestHeader->protocol = PROTOCOL;
        requestHeader->type = EXCHANGE_PUBLIC_PEERS;

        char* software = ((char*)peer->transmitData.FragmentTable[0].FragmentBuffer) + (sizeof(RequestResponseHeader) + sizeof(ExchangePublicPeers));
        *software++ = 8 + (VERSION_A > 9 ? 2 : 1) + (VERSION_B > 9 ? 2 : 1) + (VERSION_C > 9 ? 2 : 1);
        *software++ = 'Q';
        *software++ = 'u';
        *software++ = 'b';
        *software++ = 'i';
        *software++ = 'c';
        *software++ = ' ';
        *software++ = (VERSION_A % 10) + '0';
        if (VERSION_A > 9)
        {
            *software++ = (VERSION_A / 10) + '0';
        }
        *software++ = '.';
        *software++ = (VERSION_B % 10) + '0';
        if (VERSION_B > 9)
        {
            *software++ = (VERSION_B / 10) + '0';
        }
        *software++ = '.';
        *software++ = (VERSION_C % 10) + '0';
        if (VERSION_C > 9)
        {
            *software = (VERSION_C / 10) + '0';
        }

        transmit(peer, requestHeader->size);

        peer->receiveData.FragmentTable[0].FragmentBuffer = peer->receiveBuffer;
        receive(peer);
    }

    bs->RestoreTPL(tpl);
}

static void closeCallback(EFI_EVENT Event, void* Context)
{
    const EFI_TPL tpl = bs->RaiseTPL(TPL_NOTIFY);

    bs->CloseEvent(Event);

    Peer* peer = (Peer*)Context;
    if (peer->acceptToken.NewChildHandle)
    {
        bs->CloseProtocol(peer->acceptToken.NewChildHandle, &tcp4ProtocolGuid, ih, NULL);
    }
    else
    {
        bs->CloseProtocol(peer->connectChildHandle, &tcp4ProtocolGuid, ih, NULL);
        tcp4ServiceBindingProtocol->DestroyChild(tcp4ServiceBindingProtocol, peer->connectChildHandle);
    }
    peer->tcp4Protocol = NULL;

    bs->RestoreTPL(tpl);
}

static void receiveCallback(EFI_EVENT Event, void* Context)
{
    const EFI_TPL tpl = bs->RaiseTPL(TPL_NOTIFY);

    bs->CloseEvent(Event);

    Peer* peer = (Peer*)Context;
    if (peer->receiveToken.CompletionToken.Status)
    {
        close(peer);
    }
    else
    {
        numberOfReceivedBytes += peer->receiveData.DataLength;
        *((unsigned long long*)&peer->receiveData.FragmentTable[0].FragmentBuffer) += peer->receiveData.DataLength;
        peer->numberOfReceivedBytes += peer->receiveData.DataLength;
        
    iteration:
        unsigned int receivedDataSize = (unsigned int)((unsigned long long)peer->receiveData.FragmentTable[0].FragmentBuffer - (unsigned long long)peer->receiveBuffer);

        if (peer->type < 0)
        {
            if (receivedDataSize < 4)
            {
                receive(peer);
            }
            else
            {
                const unsigned int size = ((((char*)peer->receiveBuffer)[1] & 0x7F) <= 125) ? (((unsigned char*)peer->receiveBuffer)[1] & 0x7F) : ((((unsigned char*)peer->receiveBuffer)[2] << 8) | ((unsigned char*)peer->receiveBuffer)[3]);
                if (receivedDataSize < (size <= 125 ? 2 : 4) + ((((char*)peer->receiveBuffer)[1] < 0) ? 4 : 0) + size)
                {
                    receive(peer);
                }
                else
                {
                    if (((char*)peer->receiveBuffer)[1] < 0)
                    {
                        int ptr = (size <= 125) ? (2 + 4) : (4 + 4);
                        char* mask = &((char*)peer->receiveBuffer)[ptr - 4];
                        for (unsigned int i = 0; i < size; i++)
                        {
                            ((char*)peer->receiveBuffer)[ptr++] ^= mask[i & 3];
                        }
                    }

                    unsigned int ptr = ((size <= 125) ? 2 : 4) + (((char*)peer->receiveBuffer)[1] < 0 ? 4 : 0);
                    RequestResponseHeader* requestResponseHeader = (RequestResponseHeader*)&((char*)peer->receiveBuffer)[ptr];
                    if (requestResponseHeader->protocol != PROTOCOL
                        || requestResponseHeader->type >= sizeof(requestResponseMinSizes) / sizeof(requestResponseMinSizes[0])
                        || requestResponseHeader->size < requestResponseMinSizes[requestResponseHeader->type]
                        || receivedDataSize < ptr + requestResponseHeader->size)
                    {
                        close(peer);
                    }
                    else
                    {
                        numberOfBusyProcessorsSumOfValues += numberOfBusyProcessors;
                        numberOfBusyProcessorsNumberOfValues++;

                        if (numberOfBusyProcessors < numberOfProcessors)
                        {
                            int counter = numberOfProcessors;
                            while (counter-- > 0)
                            {
                                if (++latestUsedProcessorIndex == numberOfProcessors)
                                {
                                    latestUsedProcessorIndex = 0;
                                }

                                if (!processors[latestUsedProcessorIndex].peer)
                                {
                                    processors[latestUsedProcessorIndex].peer = peer;
                                    processors[latestUsedProcessorIndex].peerId = peer->id;

                                    bs->CopyMem(processors[latestUsedProcessorIndex].requestBuffer, &((char*)peer->receiveBuffer)[ptr], requestResponseHeader->size);

                                    bs->CreateEvent(EVT_NOTIFY_SIGNAL, TPL_CALLBACK, responseCallback, &processors[latestUsedProcessorIndex], &processors[latestUsedProcessorIndex].event);
                                    mpServicesProtocol->StartupThisAP(mpServicesProtocol, requestProcessor, processors[latestUsedProcessorIndex].number, processors[latestUsedProcessorIndex].event, 0, &processors[latestUsedProcessorIndex], NULL);

                                    bs->CopyMem(peer->receiveBuffer, ((char*)peer->receiveBuffer) + ptr + requestResponseHeader->size, receivedDataSize -= (ptr + requestResponseHeader->size));
                                    peer->receiveData.FragmentTable[0].FragmentBuffer = ((char*)peer->receiveBuffer) + receivedDataSize;

                                    goto iteration;
                                }
                            }
                        }

                        receive(peer);
                    }
                }
            }
        }
        else
        {
            if (peer->numberOfReceivedBytes == peer->receiveData.DataLength
                && receivedDataSize >= 20 && *((unsigned long long*)peer->receiveBuffer) == 0x5448202F20544547 // "GET / HT"
                && receivedDataSize <= BUFFER_SIZE - 1024)
            {
                if (_mm256_movemask_epi8(_mm256_cmpeq_epi64(*((__m256i*)operatorPublicKey), ZERO)) == 0xFFFFFFFF)
                {
                    bs->CopyMem(peer->transmitData.FragmentTable[0].FragmentBuffer, (void*)"HTTP/1.1 403 Forbidden\r\nContent-Length: 0\r\n\r\n", 45);
                    transmit(peer, 45);
                }
                else
                {
                    unsigned int i = 20;
                    while (i < receivedDataSize
                        && (((char*)peer->receiveBuffer)[i - 20] != '\r'
                            || ((char*)peer->receiveBuffer)[i - 19] != '\n'
                            || ((char*)peer->receiveBuffer)[i - 18] != 'S'
                            || ((char*)peer->receiveBuffer)[i - 17] != 'e'
                            || ((char*)peer->receiveBuffer)[i - 16] != 'c'
                            || ((char*)peer->receiveBuffer)[i - 15] != '-'
                            || ((char*)peer->receiveBuffer)[i - 14] != 'W'
                            || ((char*)peer->receiveBuffer)[i - 13] != 'e'
                            || ((char*)peer->receiveBuffer)[i - 12] != 'b'
                            || ((char*)peer->receiveBuffer)[i - 11] != 'S'
                            || ((char*)peer->receiveBuffer)[i - 10] != 'o'
                            || ((char*)peer->receiveBuffer)[i - 9] != 'c'
                            || ((char*)peer->receiveBuffer)[i - 8] != 'k'
                            || ((char*)peer->receiveBuffer)[i - 7] != 'e'
                            || ((char*)peer->receiveBuffer)[i - 6] != 't'
                            || ((char*)peer->receiveBuffer)[i - 5] != '-'
                            || ((char*)peer->receiveBuffer)[i - 4] != 'K'
                            || ((char*)peer->receiveBuffer)[i - 3] != 'e'
                            || ((char*)peer->receiveBuffer)[i - 2] != 'y'
                            || ((char*)peer->receiveBuffer)[i - 1] != ':'))
                    {
                        i++;
                    }
                    while (i < receivedDataSize
                        && ((char*)peer->receiveBuffer)[i] == ' ')
                    {
                        i++;
                    }
                    unsigned int j = i;
                    while (j < receivedDataSize
                        && ((char*)peer->receiveBuffer)[j] != ' ' && ((char*)peer->receiveBuffer)[j] != '\r')
                    {
                        j++;
                    }

                    if (j < receivedDataSize)
                    {
                        peer->type = -1;

                        bs->CopyMem(peer->transmitData.FragmentTable[0].FragmentBuffer, (void*)"HTTP/1.1 101 Switching Protocols\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-WebSocket-Accept: ", 97);

                        bs->CopyMem(&((char*)peer->receiveBuffer)[j], (void*)"258EAFA5-E914-47DA-95CA-C5AB0DC85B11", 36);
                        j += 36;
                        const int size = j - i;
                        ((char*)peer->receiveBuffer)[j++] = -128;
                        while (((j - i) & 63) != 56)
                        {
                            ((char*)peer->receiveBuffer)[j++] = 0;
                        }
                        ((char*)peer->receiveBuffer)[j++] = 0;
                        ((char*)peer->receiveBuffer)[j++] = 0;
                        ((char*)peer->receiveBuffer)[j++] = 0;
                        ((char*)peer->receiveBuffer)[j++] = 0;
                        ((char*)peer->receiveBuffer)[j++] = 0;
                        ((char*)peer->receiveBuffer)[j++] = 0;
                        ((char*)peer->receiveBuffer)[j++] = size >> 5;
                        ((char*)peer->receiveBuffer)[j++] = size << 3;

                        unsigned char acceptBytes[21] = { 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0xF0, 0xE1, 0xD2, 0xC3, 0 };

                        __m128i ABCD_SAVE, MASK, E0, E0_SAVE, E1, MSG0, MSG1, MSG2, MSG3;
                        MASK = _mm_set_epi8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
                        E0 = _mm_set_epi32(*((int*)&acceptBytes[16]), 0, 0, 0);
                        int ptr = -16;
                        while ((j -= 64) >= i)
                        {
                            ABCD_SAVE = *((__m128i*)acceptBytes);
                            E0_SAVE = E0;

                            MSG0 = _mm_shuffle_epi8(*((__m128i*) & ((char*)peer->receiveBuffer)[i + (ptr += 16)]), MASK);
                            E0 = _mm_add_epi32(E0, MSG0);
                            E1 = *((__m128i*)acceptBytes);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E0, 0);

                            MSG1 = _mm_shuffle_epi8(*((__m128i*) & ((char*)peer->receiveBuffer)[i + (ptr += 16)]), MASK);
                            E1 = _mm_sha1nexte_epu32(E1, MSG1);
                            E0 = *((__m128i*)acceptBytes);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E1, 0);
                            MSG0 = _mm_sha1msg1_epu32(MSG0, MSG1);

                            MSG2 = _mm_shuffle_epi8(*((__m128i*) & ((char*)peer->receiveBuffer)[i + (ptr += 16)]), MASK);
                            E0 = _mm_sha1nexte_epu32(E0, MSG2);
                            E1 = *((__m128i*)acceptBytes);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E0, 0);
                            MSG1 = _mm_sha1msg1_epu32(MSG1, MSG2);
                            MSG0 = _mm_xor_si128(MSG0, MSG2);

                            MSG3 = _mm_shuffle_epi8(*((__m128i*) & ((char*)peer->receiveBuffer)[i + (ptr += 16)]), MASK);
                            E1 = _mm_sha1nexte_epu32(E1, MSG3);
                            E0 = *((__m128i*)acceptBytes);
                            MSG0 = _mm_sha1msg2_epu32(MSG0, MSG3);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E1, 0);
                            MSG2 = _mm_sha1msg1_epu32(MSG2, MSG3);
                            MSG1 = _mm_xor_si128(MSG1, MSG3);

                            E0 = _mm_sha1nexte_epu32(E0, MSG0);
                            E1 = *((__m128i*)acceptBytes);
                            MSG1 = _mm_sha1msg2_epu32(MSG1, MSG0);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E0, 0);
                            MSG3 = _mm_sha1msg1_epu32(MSG3, MSG0);
                            MSG2 = _mm_xor_si128(MSG2, MSG0);

                            E1 = _mm_sha1nexte_epu32(E1, MSG1);
                            E0 = *((__m128i*)acceptBytes);
                            MSG2 = _mm_sha1msg2_epu32(MSG2, MSG1);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E1, 1);
                            MSG0 = _mm_sha1msg1_epu32(MSG0, MSG1);
                            MSG3 = _mm_xor_si128(MSG3, MSG1);

                            E0 = _mm_sha1nexte_epu32(E0, MSG2);
                            E1 = *((__m128i*)acceptBytes);
                            MSG3 = _mm_sha1msg2_epu32(MSG3, MSG2);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E0, 1);
                            MSG1 = _mm_sha1msg1_epu32(MSG1, MSG2);
                            MSG0 = _mm_xor_si128(MSG0, MSG2);

                            E1 = _mm_sha1nexte_epu32(E1, MSG3);
                            E0 = *((__m128i*)acceptBytes);
                            MSG0 = _mm_sha1msg2_epu32(MSG0, MSG3);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E1, 1);
                            MSG2 = _mm_sha1msg1_epu32(MSG2, MSG3);
                            MSG1 = _mm_xor_si128(MSG1, MSG3);

                            E0 = _mm_sha1nexte_epu32(E0, MSG0);
                            E1 = *((__m128i*)acceptBytes);
                            MSG1 = _mm_sha1msg2_epu32(MSG1, MSG0);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E0, 1);
                            MSG3 = _mm_sha1msg1_epu32(MSG3, MSG0);
                            MSG2 = _mm_xor_si128(MSG2, MSG0);

                            E1 = _mm_sha1nexte_epu32(E1, MSG1);
                            E0 = *((__m128i*)acceptBytes);
                            MSG2 = _mm_sha1msg2_epu32(MSG2, MSG1);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E1, 1);
                            MSG0 = _mm_sha1msg1_epu32(MSG0, MSG1);
                            MSG3 = _mm_xor_si128(MSG3, MSG1);

                            E0 = _mm_sha1nexte_epu32(E0, MSG2);
                            E1 = *((__m128i*)acceptBytes);
                            MSG3 = _mm_sha1msg2_epu32(MSG3, MSG2);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E0, 2);
                            MSG1 = _mm_sha1msg1_epu32(MSG1, MSG2);
                            MSG0 = _mm_xor_si128(MSG0, MSG2);

                            E1 = _mm_sha1nexte_epu32(E1, MSG3);
                            E0 = *((__m128i*)acceptBytes);
                            MSG0 = _mm_sha1msg2_epu32(MSG0, MSG3);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E1, 2);
                            MSG2 = _mm_sha1msg1_epu32(MSG2, MSG3);
                            MSG1 = _mm_xor_si128(MSG1, MSG3);

                            E0 = _mm_sha1nexte_epu32(E0, MSG0);
                            E1 = *((__m128i*)acceptBytes);
                            MSG1 = _mm_sha1msg2_epu32(MSG1, MSG0);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E0, 2);
                            MSG3 = _mm_sha1msg1_epu32(MSG3, MSG0);
                            MSG2 = _mm_xor_si128(MSG2, MSG0);

                            E1 = _mm_sha1nexte_epu32(E1, MSG1);
                            E0 = *((__m128i*)acceptBytes);
                            MSG2 = _mm_sha1msg2_epu32(MSG2, MSG1);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E1, 2);
                            MSG0 = _mm_sha1msg1_epu32(MSG0, MSG1);
                            MSG3 = _mm_xor_si128(MSG3, MSG1);

                            E0 = _mm_sha1nexte_epu32(E0, MSG2);
                            E1 = *((__m128i*)acceptBytes);
                            MSG3 = _mm_sha1msg2_epu32(MSG3, MSG2);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E0, 2);
                            MSG1 = _mm_sha1msg1_epu32(MSG1, MSG2);
                            MSG0 = _mm_xor_si128(MSG0, MSG2);

                            E1 = _mm_sha1nexte_epu32(E1, MSG3);
                            E0 = *((__m128i*)acceptBytes);
                            MSG0 = _mm_sha1msg2_epu32(MSG0, MSG3);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E1, 3);
                            MSG2 = _mm_sha1msg1_epu32(MSG2, MSG3);
                            MSG1 = _mm_xor_si128(MSG1, MSG3);

                            E0 = _mm_sha1nexte_epu32(E0, MSG0);
                            E1 = *((__m128i*)acceptBytes);
                            MSG1 = _mm_sha1msg2_epu32(MSG1, MSG0);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E0, 3);
                            MSG3 = _mm_sha1msg1_epu32(MSG3, MSG0);
                            MSG2 = _mm_xor_si128(MSG2, MSG0);

                            E1 = _mm_sha1nexte_epu32(E1, MSG1);
                            E0 = *((__m128i*)acceptBytes);
                            MSG2 = _mm_sha1msg2_epu32(MSG2, MSG1);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E1, 3);
                            MSG3 = _mm_xor_si128(MSG3, MSG1);

                            E0 = _mm_sha1nexte_epu32(E0, MSG2);
                            E1 = *((__m128i*)acceptBytes);
                            MSG3 = _mm_sha1msg2_epu32(MSG3, MSG2);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E0, 3);

                            E1 = _mm_sha1nexte_epu32(E1, MSG3);
                            E0 = *((__m128i*)acceptBytes);
                            *((__m128i*)acceptBytes) = _mm_sha1rnds4_epu32(*((__m128i*)acceptBytes), E1, 3);

                            E0 = _mm_sha1nexte_epu32(E0, E0_SAVE);
                            *((__m128i*)acceptBytes) = _mm_add_epi32(*((__m128i*)acceptBytes), ABCD_SAVE);
                        }
                        *((__m128i*)acceptBytes) = _mm_shuffle_epi8(*((__m128i*)acceptBytes), _mm_setr_epi8(15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0));
                        *((int*)&acceptBytes[16]) = _byteswap_ulong(*(((int*)&E0) + 3));

                        const char alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                        i = 97;
                        for (j = 0; j < 21; j += 3)
                        {
                            unsigned int word = (acceptBytes[j] << 16) | (acceptBytes[j + 1] << 8) | acceptBytes[j + 2];
                            ((char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[i++] = alphabet[word >> 18];
                            ((char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[i++] = alphabet[(word >> 12) & 63];
                            ((char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[i++] = alphabet[(word >> 6) & 63];
                            ((char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[i++] = alphabet[word & 63];
                        }
                        ((char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[i - 1] = '=';
                        ((char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[i++] = '\r';
                        ((char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[i++] = '\n';
                        ((char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[i++] = '\r';
                        ((char*)peer->transmitData.FragmentTable[0].FragmentBuffer)[i++] = '\n';

                        peer->receiveData.FragmentTable[0].FragmentBuffer = peer->receiveBuffer;
                        receive(peer);

                        const EFI_TPL tpl = bs->RaiseTPL(TPL_NOTIFY);

                        peer->isTransmitting = TRUE;
                        bs->CreateEvent(EVT_NOTIFY_SIGNAL, TPL_CALLBACK, transmitCallback, peer, &peer->transmitToken.CompletionToken.Event);
                        peer->transmitData.DataLength = peer->transmitData.FragmentTable[0].FragmentLength = i;
                        EFI_STATUS status;
                        if (status = peer->tcp4Protocol->Transmit(peer->tcp4Protocol, &peer->transmitToken))
                        {
                            if (status != EFI_ACCESS_DENIED)
                            {
                                logStatus(L"EFI_TCP4_PROTOCOL.Transmit() fails", status);
                            }

                            bs->CloseEvent(peer->transmitToken.CompletionToken.Event);

                            close(peer);
                        }

                        bs->RestoreTPL(tpl);
                    }
                    else
                    {
                        close(peer);
                    }
                }
            }
            else
            {
                if (peer->numberOfReceivedBytes == peer->receiveData.DataLength)
                {
                    peer->type = 1;
                }

                if (receivedDataSize < sizeof(RequestResponseHeader))
                {
                    receive(peer);
                }
                else
                {
                    RequestResponseHeader* requestResponseHeader = (RequestResponseHeader*)peer->receiveBuffer;
                    if (requestResponseHeader->protocol != PROTOCOL
                        || requestResponseHeader->type >= sizeof(requestResponseMinSizes) / sizeof(requestResponseMinSizes[0])
                        || requestResponseHeader->size < requestResponseMinSizes[requestResponseHeader->type])
                    {
                        close(peer);
                    }
                    else
                    {
                        if (receivedDataSize >= requestResponseHeader->size)
                        {
                            numberOfBusyProcessorsSumOfValues += numberOfBusyProcessors;
                            numberOfBusyProcessorsNumberOfValues++;

                            if (numberOfBusyProcessors < numberOfProcessors)
                            {
                                int counter = numberOfProcessors;
                                while (counter-- > 0)
                                {
                                    if (++latestUsedProcessorIndex == numberOfProcessors)
                                    {
                                        latestUsedProcessorIndex = 0;
                                    }

                                    if (!processors[latestUsedProcessorIndex].peer)
                                    {
                                        processors[latestUsedProcessorIndex].peer = peer;
                                        processors[latestUsedProcessorIndex].peerId = peer->id;
                                        if (receivedDataSize == requestResponseHeader->size)
                                        {
                                            void* tmp = processors[latestUsedProcessorIndex].requestBuffer;
                                            processors[latestUsedProcessorIndex].requestBuffer = peer->receiveBuffer;
                                            peer->receiveData.FragmentTable[0].FragmentBuffer = peer->receiveBuffer = tmp;

                                            bs->CreateEvent(EVT_NOTIFY_SIGNAL, TPL_CALLBACK, responseCallback, &processors[latestUsedProcessorIndex], &processors[latestUsedProcessorIndex].event);
                                            mpServicesProtocol->StartupThisAP(mpServicesProtocol, requestProcessor, processors[latestUsedProcessorIndex].number, processors[latestUsedProcessorIndex].event, 0, &processors[latestUsedProcessorIndex], NULL);
                                        }
                                        else
                                        {
                                            bs->CopyMem(processors[latestUsedProcessorIndex].requestBuffer, peer->receiveBuffer, requestResponseHeader->size);

                                            bs->CreateEvent(EVT_NOTIFY_SIGNAL, TPL_CALLBACK, responseCallback, &processors[latestUsedProcessorIndex], &processors[latestUsedProcessorIndex].event);
                                            mpServicesProtocol->StartupThisAP(mpServicesProtocol, requestProcessor, processors[latestUsedProcessorIndex].number, processors[latestUsedProcessorIndex].event, 0, &processors[latestUsedProcessorIndex], NULL);

                                            bs->CopyMem(peer->receiveBuffer, ((char*)peer->receiveBuffer) + requestResponseHeader->size, receivedDataSize -= requestResponseHeader->size);
                                            peer->receiveData.FragmentTable[0].FragmentBuffer = ((char*)peer->receiveBuffer) + receivedDataSize;
                                        }

                                        goto iteration;
                                    }
                                }
                            }
                        }

                        receive(peer);
                    }
                }
            }
        }
    }

    bs->RestoreTPL(tpl);
}

static void transmitCallback(EFI_EVENT Event, void* Context)
{
    const EFI_TPL tpl = bs->RaiseTPL(TPL_NOTIFY);

    bs->CloseEvent(Event);

    Peer* peer = (Peer*)Context;
    if (peer->transmitToken.CompletionToken.Status)
    {
        close(peer);
    }
    else
    {
        numberOfTransmittedBytes += peer->transmitData.DataLength;
        peer->numberOfTransmittedBytes += peer->transmitData.DataLength;

        peer->isTransmitting = FALSE;
    }

    bs->RestoreTPL(tpl);
}

static BOOLEAN isWhitelisted(int address)
{
    for (unsigned int i = 0; i < sizeof(whitelistedPeers) / sizeof(whitelistedPeers[0]); i++)
    {
        if (*((int*)whitelistedPeers[i]) == address)
        {
            return TRUE;
        }
    }

    return FALSE;
}

static void processorInitializationProcessor(void* ProcedureArgument)
{
    __writecr4(__readcr4() | 0x40600);
    _xsetbv(_XCR_XFEATURE_ENABLED_MASK, (_xgetbv(_XCR_XFEATURE_ENABLED_MASK) & 0xFFFB) | 7); // Enable AVX2
}

static BOOLEAN initialize()
{
    processorInitializationProcessor(NULL);

    ZERO = _mm256_setzero_si256();

    if (!getSubseed(ownSeed, ownSubseed))
    {
        return FALSE;
    }
    getPrivateKey(ownSubseed, ownPrivateKey);
    getPublicKey(ownPrivateKey, ownPublicKey);
    getPublicKeyFromIdentity((const unsigned char*)OPERATOR, operatorPublicKey);
    getPublicKeyFromIdentity((const unsigned char*)COMPUTOR, computorPublicKey);
    getPublicKeyFromIdentity((const unsigned char*)ADMIN, adminPublicKey);
    EFI_TIME time;
    rs->GetTime(&time, NULL);
    latestOperatorTimestamp = launchTime = (((((time.Year - 2001) * 12 + (time.Month - 1)) * 31 + (time.Day - 1)) * 24 + time.Hour) * 60 + time.Minute) * 60 + time.Second;
    _rdrand64_step(&salt);

    frequency = __rdtsc();
    bs->Stall(1000000);
    frequency = __rdtsc() - frequency;
    CHAR16 message[256];
    setText(message, L"TSC frequency = ");
    appendNumber(message, frequency, TRUE);
    appendText(message, L" Hz.");
    log(message);

    bs->SetMem(&latestComputorStates, sizeof(latestComputorStates), 0);
    for (unsigned int i = 0; i < sizeof(latestComputorStates) / sizeof(latestComputorStates[0]); i++)
    {
        latestComputorStates[i].computorIndex = i;
    }

    bs->SetMem(processors, sizeof(processors), 0);
    bs->SetMem(peers, sizeof(peers), 0);
    bs->SetMem(publicPeers, sizeof(publicPeers), 0);

    EFI_STATUS status;

#if NUMBER_OF_COMPUTING_PROCESSORS || NUMBER_OF_MINING_PROCESSORS
    EFI_GUID simpleFileSystemProtocolGuid = EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_GUID;
    bs->LocateProtocol(&simpleFileSystemProtocolGuid, NULL, (void**)&simpleFileSystemProtocol);
    EFI_FILE_PROTOCOL* root;
    if (status = simpleFileSystemProtocol->OpenVolume(simpleFileSystemProtocol, (void**)&root))
    {
        logStatus(L"EFI_SIMPLE_FILE_SYSTEM_PROTOCOL.OpenVolume() fails", status);

        return FALSE;
    }
    else
    {
        EFI_FILE_PROTOCOL* dataFile;

        if (status = root->Open(root, (void**)&dataFile, (CHAR16*)MINING_DATA_FILE_NAME, EFI_FILE_MODE_READ, 0))
        {
            logStatus(L"EFI_FILE_PROTOCOL.Open() fails", status);

            root->Close(root);

            return FALSE;
        }
        else
        {
            unsigned long long size = sizeof(miningData);
            status = dataFile->Read(dataFile, &size, &miningData);
            dataFile->Close(dataFile);
            if (status)
            {
                logStatus(L"EFI_FILE_PROTOCOL.Read() fails", status);

                root->Close(root);

                return FALSE;
            }
            else
            {
                if (size < sizeof(miningData))
                {
                    log(L"Mining data file is too small!");

                    root->Close(root);

                    return FALSE;
                }

                miningData[0] ^= 1;

                unsigned char* miningDataBytes = (unsigned char*)miningData;
                for (unsigned int i = 0; i < sizeof(computorPublicKey); i++)
                {
                    miningDataBytes[i] ^= computorPublicKey[i];
                }
            }
        }

        if (status = root->Open(root, (void**)&dataFile, (CHAR16*)SOLUTION_DATA_FILE_NAME, EFI_FILE_MODE_READ, 0))
        {
            logStatus(L"EFI_FILE_PROTOCOL.Open() fails", status);

            root->Close(root);

            return FALSE;
        }
        else
        {
            unsigned long long size = sizeof(bestNeuronLinks);
            status = dataFile->Read(dataFile, &size, &bestNeuronLinks);
            dataFile->Close(dataFile);
            root->Close(root);
            if (status)
            {
                logStatus(L"EFI_FILE_PROTOCOL.Read() fails", status);

                return FALSE;
            }
            else
            {
                if (size < sizeof(bestNeuronLinks))
                {
                    if (!size)
                    {
                        for (unsigned int i = 0; i < NUMBER_OF_NEURONS; i++)
                        {
                            _rdrand32_step(&bestNeuronLinks[i][0]);
                            _rdrand32_step(&bestNeuronLinks[i][1]);
                            bestNeuronLinks[i][0] %= NUMBER_OF_NEURONS;
                            bestNeuronLinks[i][1] %= NUMBER_OF_NEURONS;
                        }
                    }
                    else
                    {
                        log(L"Solution data file is too small!");

                        return FALSE;
                    }
                }
            }
        }
    }

    bs->SetMem(minerScores, sizeof(minerScores), 0);
#endif

    if (NUMBER_OF_COMPUTING_PROCESSORS > 0)
    {
        if (status = bs->AllocatePool(EfiRuntimeServicesData, 0x1000000 * sizeof(Entity), (void**)&entities))
        {
            logStatus(L"EFI_BOOT_SERVICES.AllocatePool() fails", status);

            return FALSE;
        }
        bs->SetMem(entities, 0x1000000 * sizeof(Entity), 0);
    }
    if (status = bs->AllocatePool(EfiRuntimeServicesData, 0x10000 * sizeof(TransferSuperstatus), (void**)&transferSuperstatuses))
    {
        logStatus(L"EFI_BOOT_SERVICES.AllocatePool() fails", status);

        return FALSE;
    }
    bs->SetMem(transferSuperstatuses, 0x10000 * sizeof(TransferSuperstatus), 0);

    if ((status = bs->AllocatePool(EfiRuntimeServicesData, 536870912, (void**)&dejavu0))
        || (status = bs->AllocatePool(EfiRuntimeServicesData, 536870912, (void**)&dejavu1)))
    {
        logStatus(L"EFI_BOOT_SERVICES.AllocatePool() fails", status);

        return FALSE;
    }
    bs->SetMem((void*)dejavu0, 536870912, 0);
    bs->SetMem((void*)dejavu1, 536870912, 0);

    for (unsigned int peerIndex = 0; peerIndex < MAX_NUMBER_OF_PEERS; peerIndex++)
    {
        peers[peerIndex].receiveData.FragmentCount = 1;
        peers[peerIndex].transmitData.Push = TRUE;
        peers[peerIndex].transmitData.Urgent = TRUE;
        peers[peerIndex].transmitData.FragmentCount = 1;
        if ((status = bs->AllocatePool(EfiRuntimeServicesData, BUFFER_SIZE, &peers[peerIndex].receiveBuffer))
            || (status = bs->AllocatePool(EfiRuntimeServicesData, BUFFER_SIZE, &peers[peerIndex].transmitData.FragmentTable[0].FragmentBuffer)))
        {
            logStatus(L"EFI_BOOT_SERVICES.AllocatePool() fails", status);

            return FALSE;
        }
        peers[peerIndex].receiveToken.Packet.RxData = &peers[peerIndex].receiveData;
        peers[peerIndex].transmitToken.Packet.TxData = &peers[peerIndex].transmitData;
        peers[peerIndex].closeToken.AbortOnClose = TRUE;
    }

    while (numberOfPublicPeers < MIN_NUMBER_OF_PEERS)
    {
        unsigned int random;
        _rdrand32_step(&random);
        addPublicPeer((unsigned char*)knownPublicPeers[random % (sizeof(knownPublicPeers) / sizeof(knownPublicPeers[0]))]);
    }

    return TRUE;
}

static void deinitialize()
{
    bs->SetMem(ownSeed, sizeof(ownSeed), 0);
    bs->SetMem(ownSubseed, sizeof(ownSubseed), 0);
    bs->SetMem(ownPrivateKey, sizeof(ownPrivateKey), 0);
    bs->SetMem(ownPublicKey, sizeof(ownPublicKey), 0);

    if (NUMBER_OF_COMPUTING_PROCESSORS > 0)
    {
        if (entities)
        {
            bs->FreePool(entities);
        }
    }
    if (transferSuperstatuses)
    {
        bs->FreePool(transferSuperstatuses);
    }

    if (dejavu0)
    {
        bs->FreePool((void*)dejavu0);
    }
    if (dejavu1)
    {
        bs->FreePool((void*)dejavu1);
    }

    for (unsigned int processorIndex = 0; processorIndex < MAX_NUMBER_OF_PROCESSORS; processorIndex++)
    {
        if (processors[processorIndex].requestBuffer)
        {
            bs->FreePool(processors[processorIndex].requestBuffer);
        }
        if (processors[processorIndex].responseBuffer)
        {
            bs->FreePool(processors[processorIndex].responseBuffer);
        }
    }

    for (unsigned int peerIndex = 0; peerIndex < MAX_NUMBER_OF_PEERS; peerIndex++)
    {
        if (peers[peerIndex].receiveBuffer)
        {
            bs->FreePool(peers[peerIndex].receiveBuffer);
        }
        if (peers[peerIndex].transmitData.FragmentTable[0].FragmentBuffer)
        {
            bs->FreePool(peers[peerIndex].transmitData.FragmentTable[0].FragmentBuffer);
        }
    }
}

#if NUMBER_OF_MINING_PROCESSORS
static void saveSolution()
{
    EFI_STATUS status;
    EFI_FILE_PROTOCOL* root;
    if (status = simpleFileSystemProtocol->OpenVolume(simpleFileSystemProtocol, (void**)&root))
    {
        logStatus(L"EFI_SIMPLE_FILE_SYSTEM_PROTOCOL.OpenVolume() fails", status);
    }
    else
    {
        EFI_FILE_PROTOCOL* dataFile;
        if (status = root->Open(root, (void**)&dataFile, (CHAR16*)SOLUTION_DATA_FILE_NAME, EFI_FILE_MODE_READ | EFI_FILE_MODE_WRITE, 0))
        {
            logStatus(L"EFI_FILE_PROTOCOL.Open() fails", status);
        }
        else
        {
            unsigned long long size = sizeof(bestNeuronLinks);
            while (_InterlockedCompareExchange8(&neuronNetworkLock, 1, 0))
            {
            }
            status = dataFile->Write(dataFile, &size, &bestNeuronLinks);
            neuronNetworkLock = 0;
            dataFile->Close(dataFile);
            if (status)
            {
                logStatus(L"EFI_FILE_PROTOCOL.Write() fails", status);
            }
        }
        root->Close(root);
    }
}
#endif

EFI_STATUS efi_main(EFI_HANDLE imageHandle, EFI_SYSTEM_TABLE* systemTable)
{
    ih = imageHandle;
    st = systemTable;
    rs = st->RuntimeServices;
    bs = st->BootServices;

    bs->SetWatchdogTimer(0, 0, 0, NULL);

    st->ConOut->ClearScreen(st->ConOut);
    CHAR16 message[256];
    setText(message, L"Qubic ");
    appendNumber(message, VERSION_A, FALSE);
    appendText(message, L".");
    appendNumber(message, VERSION_B, FALSE);
    appendText(message, L".");
    appendNumber(message, VERSION_C, FALSE);
    appendText(message, L" is launched.");
    log(message);

    if (initialize())
    {
        getIdentity(ownPublicKey, message);
        log(message);

        EFI_GUID mpServiceProtocolGuid = EFI_MP_SERVICES_PROTOCOL_GUID;
        bs->LocateProtocol(&mpServiceProtocolGuid, NULL, (void**)&mpServicesProtocol);
        unsigned long long numberOfAllProcessors, numberOfEnabledProcessors;
        mpServicesProtocol->GetNumberOfProcessors(mpServicesProtocol, &numberOfAllProcessors, &numberOfEnabledProcessors);
        for (unsigned int i = 0; i < numberOfAllProcessors && numberOfProcessors < MAX_NUMBER_OF_PROCESSORS; i++)
        {
            EFI_PROCESSOR_INFORMATION processorInformation;
            mpServicesProtocol->GetProcessorInfo(mpServicesProtocol, i, &processorInformation);
            if (processorInformation.StatusFlag == (PROCESSOR_ENABLED_BIT | PROCESSOR_HEALTH_STATUS_BIT))
            {
                mpServicesProtocol->StartupThisAP(mpServicesProtocol, processorInitializationProcessor, i, NULL, 0, NULL, NULL);

                EFI_STATUS status;
                if ((status = bs->AllocatePool(EfiRuntimeServicesData, BUFFER_SIZE, &processors[numberOfProcessors].requestBuffer))
                    || (status = bs->AllocatePool(EfiRuntimeServicesData, BUFFER_SIZE, &processors[numberOfProcessors].responseBuffer)))
                {
                    logStatus(L"EFI_BOOT_SERVICES.AllocatePool() fails", status);

                    numberOfProcessors = 0;

                    break;
                }
                processors[numberOfProcessors++].number = i;
            }
        }
        if (numberOfProcessors)
        {
            if (numberOfProcessors < NUMBER_OF_MINING_PROCESSORS + 1)
            {
                log(L"[NUMBER_OF_MINING_PROCESSORS] is set to a too high value!");
            }
            else
            {
                setNumber(message, 1 + numberOfProcessors, TRUE);
                appendText(message, L"/");
                appendNumber(message, numberOfAllProcessors, TRUE);
                appendText(message, L" processors are being used.");
                log(message);

                setText(message, L"Own public address = ");
                appendIPv4Address(message, *((EFI_IPv4_ADDRESS*)ownPublicAddress));
                appendText(message, L".");
                log(message);

                EFI_STATUS status;
                if (status = bs->LocateProtocol(&tcp4ServiceBindingProtocolGuid, NULL, (void**)&tcp4ServiceBindingProtocol))
                {
                    logStatus(L"EFI_TCP4_SERVICE_BINDING_PROTOCOL is not located", status);
                }
                else
                {
                    if (getTcp4Protocol(NULL, &tcp4Protocol))
                    {
                        if (accept())
                        {
#if NUMBER_OF_MINING_PROCESSORS
                            for (unsigned int i = 0; i < NUMBER_OF_MINING_PROCESSORS; i++)
                            {
                                processors[i].peer = (Peer*)1;
                                bs->CreateEvent(EVT_NOTIFY_SIGNAL, TPL_CALLBACK, minerShutdownCallback, NULL, &minerEvents[i]);
                                mpServicesProtocol->StartupThisAP(mpServicesProtocol, minerProcessor, processors[i].number, minerEvents[i], 0, (void*)i, NULL);
                            }
#endif

                            for (unsigned int i = 0; i < numberOfPublicPeers; i++)
                            {
                                connect(publicPeers[i].address);
                            }

                            unsigned long long prevDejavuSwapTick = __rdtsc();
                            unsigned long long prevPeerRatingTick = __rdtsc();
                            unsigned long long prevLogTick = __rdtsc();
                            int knownMiningScore = 0;
                            long long prevNumberOfMiningIterations = 0;
                            unsigned long long prevMiningPerformanceTick = __rdtsc();
                            unsigned long long prevResourceTestingSolutionPublicationTick = 0;
                            while (!state)
                            {
                                if (__rdtsc() - prevDejavuSwapTick >= DEJAVU_SWAP_PERIOD * frequency)
                                {
                                    volatile unsigned long long* tmp = dejavu1;
                                    dejavu1 = dejavu0;
                                    bs->SetMem((void*)tmp, 536870912, 0);
                                    dejavu0 = tmp;

                                    prevDejavuSwapTick = __rdtsc();
                                }

                                CHAR16 peersGraph[256];
                                peersGraph[0] = 0;

                                EFI_TPL tpl = bs->RaiseTPL(TPL_NOTIFY);
                                unsigned int numberOfFreePeerSlots = 0, numberOfAcceptingPeerSlots = 0, numberOfWebSocketClients = 0;
                                for (unsigned int i = 0; i < MAX_NUMBER_OF_PEERS; i++)
                                {
                                    if (!peers[i].tcp4Protocol)
                                    {
                                        numberOfFreePeerSlots++;

                                        appendText(peersGraph, L"_");
                                    }
                                    else
                                    {
                                        if (((unsigned long long)peers[i].tcp4Protocol) == 1)
                                        {
                                            numberOfAcceptingPeerSlots++;

                                            appendText(peersGraph, L"?");
                                        }
                                        else
                                        {
                                            if (peers[i].acceptToken.NewChildHandle)
                                            {
                                                if (peers[i].type < 0)
                                                {
                                                    numberOfWebSocketClients++;

                                                    appendText(peersGraph, L"W");
                                                }
                                                else
                                                {
                                                    appendText(peersGraph, peers[i].type ? L"O" : L".");
                                                }
                                            }
                                            else
                                            {
                                                appendText(peersGraph, peers[i].type ? L"O" : L".");
                                            }

                                            if ((!peers[i].numberOfReceivedBytes || !peers[i].numberOfTransmittedBytes)
                                                && __rdtsc() - peers[i].connectionBeginningTick > MAX_CONNECTION_DELAY * frequency)
                                            {
                                                if (!isWhitelisted(*((int*)peers[i].address)))
                                                {
                                                    while (_InterlockedCompareExchange8(&publicPeersLock, 1, 0))
                                                    {
                                                    }
                                                    for (unsigned int j = 0; numberOfPublicPeers > MIN_NUMBER_OF_PEERS && j < numberOfPublicPeers; j++)
                                                    {
                                                        if (*((int*)publicPeers[j].address) == *((int*)peers[i].address))
                                                        {
                                                            if (j != --numberOfPublicPeers)
                                                            {
                                                                bs->CopyMem(&publicPeers[j], &publicPeers[numberOfPublicPeers], sizeof(PublicPeer));
                                                            }

                                                            break;
                                                        }
                                                    }
                                                    publicPeersLock = 0;
                                                }

                                                close(&peers[i]);
                                            }
                                        }
                                    }
                                }
                                bs->RestoreTPL(tpl);

                                for (unsigned int i = 0; i < MAX_NUMBER_OF_PEERS; i++)
                                {
                                    if (((unsigned long long)peers[i].tcp4Protocol) > 1)
                                    {
                                        peers[i].tcp4Protocol->Poll(peers[i].tcp4Protocol);
                                    }
                                }

                                if (MAX_NUMBER_OF_PEERS - numberOfFreePeerSlots - numberOfAcceptingPeerSlots - numberOfWebSocketClients < MIN_NUMBER_OF_PEERS)
                                {
                                    unsigned char address[4];

                                    unsigned int random;
                                    _rdrand32_step(&random);

                                    while (_InterlockedCompareExchange8(&publicPeersLock, 1, 0))
                                    {
                                    }
                                    *((int*)address) = *((int*)publicPeers[random % numberOfPublicPeers].address);
                                    publicPeersLock = 0;

                                    connect(address);
                                }
                                if (!numberOfAcceptingPeerSlots && numberOfFreePeerSlots)
                                {
                                    accept();
                                }

                                if (__rdtsc() - prevPeerRatingTick >= PEER_RATING_PERIOD * frequency)
                                {
                                    int worstNumberOfReceivedBytesPeerIndex = -1;
                                    unsigned long long worstNumberOfReceivedBytesDelta = 0xFFFFFFFFFFFFFFFF;
                                    unsigned long long numberOfReceivedBytesSumOfDeltas = 0;
                                    int worstNumberOfTransmittedBytesPeerIndex = -1;
                                    unsigned long long worstNumberOfTransmittedBytesDelta = 0xFFFFFFFFFFFFFFFF;
                                    unsigned long long numberOfTransmittedBytesSumOfDeltas = 0;
                                    unsigned long long numberOfDeltas = 0;

                                    for (unsigned int i = MAX_NUMBER_OF_PEERS; i-- > 0; )
                                    {
                                        if (((unsigned long long)peers[i].tcp4Protocol) > 1 && peers[i].type > 0)
                                        {
                                            unsigned long long delta = peers[i].numberOfReceivedBytes - peers[i].prevNumberOfReceivedBytes;
                                            peers[i].prevNumberOfReceivedBytes = peers[i].numberOfReceivedBytes;
                                            if (delta < worstNumberOfReceivedBytesDelta)
                                            {
                                                worstNumberOfReceivedBytesPeerIndex = i;
                                                worstNumberOfReceivedBytesDelta = delta;
                                            }
                                            numberOfReceivedBytesSumOfDeltas += delta;

                                            delta = peers[i].numberOfTransmittedBytes - peers[i].prevNumberOfTransmittedBytes;
                                            peers[i].prevNumberOfTransmittedBytes = peers[i].numberOfTransmittedBytes;
                                            if (delta < worstNumberOfTransmittedBytesDelta)
                                            {
                                                worstNumberOfTransmittedBytesPeerIndex = i;
                                                worstNumberOfTransmittedBytesDelta = delta;
                                            }
                                            numberOfTransmittedBytesSumOfDeltas += delta;

                                            numberOfDeltas++;
                                        }
                                    }
                                    if (worstNumberOfReceivedBytesPeerIndex >= 0 && (!worstNumberOfReceivedBytesDelta || worstNumberOfReceivedBytesDelta < numberOfReceivedBytesSumOfDeltas / ((numberOfDeltas ? numberOfDeltas : 1) * 3)))
                                    {
                                        setText(message, L"A peer sending too few bytes (");
                                        appendNumber(message, worstNumberOfReceivedBytesDelta, TRUE);
                                        appendText(message, L" / ");
                                        appendNumber(message, numberOfReceivedBytesSumOfDeltas / (numberOfDeltas ? numberOfDeltas : 1), TRUE);
                                        appendText(message, L") is disconnected.");
                                        log(message);

                                        close(&peers[worstNumberOfReceivedBytesPeerIndex]);
                                    }
                                    else
                                    {
                                        worstNumberOfReceivedBytesPeerIndex = -1;
                                    }
                                    if (worstNumberOfTransmittedBytesPeerIndex != worstNumberOfReceivedBytesPeerIndex && worstNumberOfTransmittedBytesPeerIndex >= 0 && (!worstNumberOfTransmittedBytesDelta || worstNumberOfTransmittedBytesDelta < numberOfTransmittedBytesSumOfDeltas / ((numberOfDeltas ? numberOfDeltas : 1) * 3)))
                                    {
                                        setText(message, L"A peer receiving too few bytes (");
                                        appendNumber(message, worstNumberOfTransmittedBytesDelta, TRUE);
                                        appendText(message, L" / ");
                                        appendNumber(message, numberOfTransmittedBytesSumOfDeltas / (numberOfDeltas ? numberOfDeltas : 1), TRUE);
                                        appendText(message, L") is disconnected.");
                                        log(message);

                                        close(&peers[worstNumberOfTransmittedBytesPeerIndex]);
                                    }

                                    prevPeerRatingTick = __rdtsc();
                                }

                                if (__rdtsc() - prevLogTick >= frequency)
                                {
                                    CHAR16 message[256]; setText(message, L"["); appendNumber(message, !numberOfBusyProcessorsNumberOfValues ? (numberOfBusyProcessors * 100 / numberOfProcessors) : ((numberOfBusyProcessorsSumOfValues * 100) / (numberOfBusyProcessorsNumberOfValues * numberOfProcessors)), FALSE); appendText(message, L"% CPU / "); appendNumber(message, numberOfProcessedRequests - prevNumberOfProcessedRequests, TRUE); appendText(message, L"] "); appendNumber(message, MAX_NUMBER_OF_PEERS - numberOfFreePeerSlots - numberOfAcceptingPeerSlots - numberOfWebSocketClients, TRUE); appendText(message, L"/"); appendNumber(message, numberOfPublicPeers, TRUE); appendText(message, L" peers ("); appendNumber(message, numberOfReceivedBytes - prevNumberOfReceivedBytes, TRUE); appendText(message, L" rx / "); appendNumber(message, numberOfTransmittedBytes - prevNumberOfTransmittedBytes, TRUE); appendText(message, L" tx / "); appendNumber(message, numberOfDiscardedBytes - prevNumberOfDiscardedBytes, TRUE); appendText(message, L" dx)."); log(message);
                                    numberOfBusyProcessorsSumOfValues = 0;
                                    numberOfBusyProcessorsNumberOfValues = 0;
                                    prevNumberOfProcessedRequests = numberOfProcessedRequests;
                                    prevNumberOfReceivedBytes = numberOfReceivedBytes;
                                    prevNumberOfTransmittedBytes = numberOfTransmittedBytes;
                                    prevNumberOfDiscardedBytes = numberOfDiscardedBytes;

                                    log(peersGraph);

#if NUMBER_OF_MINING_PROCESSORS
                                    unsigned long long random;
                                    _rdrand64_step(&random);
                                    if (bestMiningScore >= 0 && !(random % 5))
                                    {
                                        unsigned int numberOfBetterScores = 1;
                                        for (unsigned int i = 0; i < numberOfMiners; i++)
                                        {
                                            if (minerScores[i] >= bestMiningScore)
                                            {
                                                numberOfBetterScores++;
                                            }
                                        }

                                        setText(message, L"Score = ");
                                        appendNumber(message, bestMiningScore, TRUE);
                                        appendText(message, L" (");
                                        appendNumber(message, (numberOfMiningIterations - prevNumberOfMiningIterations) * frequency / (__rdtsc() - prevMiningPerformanceTick), TRUE);
                                        prevMiningPerformanceTick = __rdtsc();
                                        prevNumberOfMiningIterations = numberOfMiningIterations;
                                        appendText(message, L" it/s); rating = ");
                                        appendNumber(message, numberOfBetterScores, TRUE);
                                        appendText(message, L" of ");
                                        appendNumber(message, numberOfMiners, TRUE);
                                        appendText(message, L".");
                                        log(message);

                                        if (bestMiningScore > knownMiningScore || __rdtsc() - prevResourceTestingSolutionPublicationTick >= RESOURCE_TESTING_SOLUTION_PUBLICATION_PERIOD * frequency)
                                        {
                                            if (bestMiningScore > knownMiningScore)
                                            {
                                                knownMiningScore = bestMiningScore;

                                                saveSolution();
                                            }
                                            else
                                            {
                                                prevResourceTestingSolutionPublicationTick = __rdtsc();
                                            }

                                            solution.header.size = sizeof(solution);
                                            solution.header.protocol = PROTOCOL;
                                            solution.header.type = BROADCAST_RESOURCE_TESTING_SOLUTION;
                                            bs->CopyMem(solution.broadcastResourceTestingSolution.resourceTestingSolution.computorPublicKey, computorPublicKey, 32);
                                            solution.broadcastResourceTestingSolution.resourceTestingSolution.score = knownMiningScore;
                                            bs->CopyMem(solution.broadcastResourceTestingSolution.resourceTestingSolution.neuronLinks, bestNeuronLinks, sizeof(solution.broadcastResourceTestingSolution.resourceTestingSolution.neuronLinks));

                                            for (unsigned int i = 0; i < MAX_NUMBER_OF_PEERS; i++)
                                            {
                                                if (((unsigned long long)peers[i].tcp4Protocol) > 1 && peers[i].type > 0)
                                                {
                                                    if (peers[i].isTransmitting)
                                                    {
                                                        numberOfDiscardedBytes += solution.header.size;
                                                    }
                                                    else
                                                    {
                                                        bs->CopyMem(peers[i].transmitData.FragmentTable[0].FragmentBuffer, &solution, sizeof(solution));
                                                        transmit(&peers[i], solution.header.size);
                                                    }
                                                }
                                            }
                                        }
                                    }
#endif

                                    prevLogTick = __rdtsc();
                                }
                            }
                        }
                    }
                }
            }
        }
        else
        {
            log(L"Cannot continue without at least 2 healthy enabled processors!");
        }
    }
    else
    {
        log(L"Initialization fails!");
    }

    deinitialize();

    if (!state)
    {
        bs->Stall(1000000);
        st->ConIn->Reset(st->ConIn, FALSE);
        unsigned long long eventIndex;
        bs->WaitForEvent(1, &st->ConIn->WaitForKey, &eventIndex);
    }

	return EFI_SUCCESS;
}